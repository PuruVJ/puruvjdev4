// @ts-ignore
export const blogMap = {
  "macos-react-to-svelte": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "macOS Web: Why I moved from React to Svelte",
    "date": "2021-08-23T18:30:00.000Z",
    "description": "I recently moved macOS web from Preact to Svelte. Here's a firsthand account of my experience.",
    "body": "<p>macOS is an amazing operating system. It looks really good, works really fast(Thanks to Apple's hardware), is very consistent, and overall an amazing experience.</p>\n<p>Personally, I have never been much infatuated with macOS. But that changed last year when macOS Big Sur came out with the super sleek and modern design with those beautiful blurs. I instantly fell in love with it <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"> Just look how beautiful it is <img class=\"emoji\" draggable=\"false\" alt=\"😌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60c.svg\"></p>\n<p>Unfortunately, I couldn't afford to buy the MacBook(You're overpriced, Apple <img class=\"emoji\" draggable=\"false\" alt=\"😑\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f611.svg\">), but I couldn't not want it. I spent weeks just watching review videos and screenshots of it. I am not a designer, but I have a good taste in design, and Big Sur was it! Finally, when the craving became too much, I was like, <em>\"Screw it! I'll just make it myself\"</em></p>\n<p><img src=\"\" alt=\"Fine... I'll do it myself, quoted by Thanos\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/macos-preact-to-svelte--fine-i-will-do-it-myself/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/macos-preact-to-svelte--fine-i-will-do-it-myself.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>So that's what I did <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\"> I recreated the interface of macOS Big Sur for Web. You can see it @ <a href=\"https://macos.vercel.app\" target=\"_blank\" rel=\"noopener\">macos.vercel.app</a>.</p>\n<h1 id=\"Early-days-(React)!\"><a class=\"heading-link\" href=\"#Early-days-(React)!\">#</a>Early days (React)!</h1>\n<p>I began working on this project back in November 2020, with the stack being React with Snowpack as the bundler+dev server, JSS for styling, and restater for state management, and I created just the topbar(without the opening menus), the animated dock, and the background. Nothing much, really. Quite easy to do. You can visit it here <a href=\"https://macos-web-mmo5af3r6.vercel.app/\" target=\"_blank\" rel=\"noopener\">macos-web-mmo5af3r6.vercel.app</a></p>\n<p>The dock animation isn't as smooth as it is in the latest iteration if you look closely. Not to mention, this very simple app is using loads of dependencies. It loaded <mark>146KB</mark> min+brotli of JS, and 0KB of CSS(It was CSS-in-JS, so no separate CSS file). For reference, the current version in Svelte loads only <mark>28.5KB</mark> of JS, and <mark>3.6KB</mark> of CSS, and it does a <strong>lot</strong> more than the November version.</p>\n<p>Here's the <code>package.json</code> <code>dependencies</code> field of the November version <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@material-ui/core</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.11.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@mdi/js</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^5.8.55</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@rooks/use-raf</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.0.2</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@tippyjs/react</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.2.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">date-fns</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^2.16.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">framer-motion</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^2.9.4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^17.0.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-dom</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^17.0.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-helmet-async</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.0.7</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">restater</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">0.0.12</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">use-sound</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^2.0.1</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See?! So much stuff for so little!</p>\n<p>So this was the state of the app. Then I didn't work on it. I was bored of it. Then I had an accident, broke my spine, was prescribed 3 months bed rest. I was so bored out of my mind, I thought, what the heck, I'll just continue working on it.</p>\n<p>So I revived the project, made some heavy changes. Like I threw away <code>restater</code> library to use <a href=\"https://github.com/pmndrs/jotai\" target=\"_blank\" rel=\"noopener\">Jotai</a>, because it was much simpler.</p>\n<p>Fast forward two months, I made some drastic changes. I replaced Snowpack(Bundler and dev server) with <a href=\"https://vitejs.dev/\" target=\"_blank\" rel=\"noopener\">ViteJS</a>. Why? No specific reason, I just felt it was more polished and had some superb features which I could use to make the app smaller in size.</p>\n<p>I replaced the existing JSS style with <code>styled-components</code>. Not perf-related really, just that writing CSS as JS objects wasn't fun.</p>\n<p>I also got rid of some dependencies to reduce bundle size.</p>\n<p>That brings us to <mark>120KB</mark> min+brotli JS. You can see it for yourself: <a href=\"https://macos-web-git-feat-switch-to-vite-puruvj.vercel.app/\" target=\"_blank\" rel=\"noopener\">macos-web-git-feat-switch-to-vite-puruvj.vercel.app</a></p>\n<p>I was still not satisfied with it. The app felt slow, the dock animation was janky, menus wouldn't open up instantly. Not satisfactory!</p>\n<p>Then, I did something <strong>very</strong> drastic: I moved the app from <strong>React</strong> to <strong>Preact</strong>.</p>\n<h1 id=\"The-era-of-Preact\"><a class=\"heading-link\" href=\"#The-era-of-Preact\">#</a>The era of Preact</h1>\n<p>Yepp!! I did that. I'm crazy that way <img class=\"emoji\" draggable=\"false\" alt=\"😏\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60f.svg\"></p>\n<p>Anyways, moving React to Preact was a very smooth experience. I just had to install the official <code>@preactjs/preset-vite</code> Vite plugin by Preact team, and it took care of aliasing <code>react</code> in <code>import React from 'react'</code> to <code>preact/compat</code> and everything. It was very seamless. It just worked. Huge kudos to the Preact team!!</p>\n<p>And that, my friend, made all the difference in the world.</p>\n<p>The site got fast. Animations lost their jank. Menus opened instantly. <strong>Everything just worked!</strong>.</p>\n<p>And the best part: Bundle size went down by a <strong>lot!!</strong>. React + React DOM is 42KB. Preact Core + Compat is just 4KB, max!</p>\n<p>You can check it out here yourself <a href=\"https://macos-web-git-feat-move-to-preact-puruvj.vercel.app/\" target=\"_blank\" rel=\"noopener\">macos-web-git-feat-move-to-preact-puruvj.vercel.app</a>.</p>\n<blockquote>\n<p>You will find the bundle size is not drastically less here compared to the previous React iteration. That's because I added some dependencies in the period before transitioning.</p>\n</blockquote>\n<p>This was great, but there was one problem: Too many dependencies.</p>\n<p>Here's the <code>package.json</code> <code>dependencies</code> field <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@mdi/js</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^5.9.55</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@rooks/use-raf</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.9.2</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@tippyjs/react</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.2.3</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">color2k</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.2.4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">date-fns</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^2.18.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">framer-motion</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^3.10.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">idb-keyval</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^5.0.4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">immer</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^8.0.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">jotai</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^0.15.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">preact</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^10.5.12</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">prop-types</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^15.7.2</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-helmet-async</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.0.9</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-is</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^17.0.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-lazily</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^0.9.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-rnd</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^10.2.4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-slider</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.1.4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-sound</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.2.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">styled-components</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^5.2.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">styled-reset</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.3.4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">throttle-debounce</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^3.0.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">tippy.js</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^6.3.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">use-interval</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.3.0</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is a lot of dependencies at this point. Doesn't look good, does it? <img class=\"emoji\" draggable=\"false\" alt=\"🤐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f910.svg\"></p>\n<h1 id=\"Goodbye-styled-components\"><a class=\"heading-link\" href=\"#Goodbye-styled-components\">#</a>Goodbye styled-components <img class=\"emoji\" draggable=\"false\" alt=\"🏳️\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f3f3.svg\"></h1>\n<p>So in my quest to make the app smaller and faster, I found <code>styled-components</code> to be one of the roadblocks.</p>\n<p>What was the issue with it? Well, first thing, CSS-in-JS is always less performant than just raw CSS(Well written CSS. Bad, duplicated styled don't count <img class=\"emoji\" draggable=\"false\" alt=\"😼\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f63c.svg\">). 2nd, <code>styled-components</code> added 12KB bundle size to the app.</p>\n<p>And the most important one: The output CSS wouldn't minify.</p>\n<p>Generally, when you are writing in <code>.css</code> or <code>.scss</code> files, your CSS is minified completely, that is all spaces and line breaks are removed, making it smaller to send over the wire.</p>\n<p>But with styled-components, because I'm writing the CSS inside JavaScript strings, the CSS tooling can't minify it by default, so that CSS remains unminified.</p>\n<p><img src=\"\" alt=\"Unminified Styled components output\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.25%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/macos-preact-to-svelte--unmin-styled-comps-code/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/macos-preact-to-svelte--unmin-styled-comps-code/small.png\">\n      <img alt=\"Unminified Styled components output\" data-src=\"../media/macos-preact-to-svelte--unmin-styled-comps-code/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>See? All the code is here as it is.</p>\n<p>And I couldn't use the <mark>babel-plugin-styled-components</mark>, as it wouldn't work with Vite, for some reason. And leaving Vite wasn't an option.</p>\n<p>So it was then that I decided to move to the basics, <strong>CSS Modules</strong> (SCSS Modules, to be exact <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\">)</p>\n<p>So I did that. Took a lot of effort, but the final result was worth it. It took the JS size from around 110KB to <mark>85KB</mark>, and the CSS was <mark>3.3KB</mark>. This was a huge amount of reduction and made the app feel really fast. The burden of supplying CSS was removed from the JS, and that alone made a lot of difference.</p>\n<p>Here's an in-detail write-up of moving to CSS Modules: <a href=\"https://www.puruvj.dev/blog/move-to-css-modules-from-styled-components\" target=\"_blank\" rel=\"noopener\">Why I moved from Styled Components to (S)CSS modules</a></p>\n<p>And, because this process required me to touch the whole project at once, I got the chance to revisit some not-so-good code and improve it, resulting in me getting rid of a lot of dependencies. This is the package.json's <code>dependencies</code> field after this change <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@mdi/js</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^5.9.55</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@reach/slider</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^0.14.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@rooks/use-raf</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.10.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">@tippyjs/react</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.2.5</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">clsx</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.1.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">date-fns</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^2.19.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">framer-motion</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^4.0.3</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">idb-keyval</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^5.0.4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">immer</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^9.0.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">jotai</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^0.16.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">preact</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^10.5.13</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">react-rnd</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^10.2.4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">tippy.js</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^6.3.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">use-interval</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.3.0</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That's a lot of reduction compared to the previous iteration.</p>\n<p>So all this brings us to the final situation of macOS: Built in preact, styled with CSS Modules, only 85KB loaded at first, and pretty smooth usage.</p>\n<p>But me being me, I strived to make it even better. Because there wasn't much scope for radical techniques, I resorted to the ultimate technique: Code Splitting</p>\n<h1 id=\"Go-Code-splitting!\"><a class=\"heading-link\" href=\"#Go-Code-splitting!\">#</a>Go Code splitting!</h1>\n<p>Implementing Code splitting was very easy. The components that aren't needed on the first load, I split them away into their own separate chunks.</p>\n<p>One component where I do code splitting was the <code>AppNexus.tsx</code>. This is basically a gateway to render the right app component when you open any app. This is as easy as <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> AppID</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">__/stores/apps.store</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> lazy</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">react</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> AppNexusProps</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  appID</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> AppID</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  isBeingDragged</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> boolean</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> Calculator </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> lazy</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> import</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">./Calculator/Calculator</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> VSCode </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> lazy</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> import</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">./VSCode/VSCode</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> Calendar </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> lazy</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> import</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">./Calendar/Calendar</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> PlaceholderApp </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> lazy</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> import</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">./Placeholder/Placeholder</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> AppNexus </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> ({</span><span style=\"color:#BABED8;font-style:italic\"> appID</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> isBeingDragged</span><span style=\"color:#89DDFF\"> }:</span><span style=\"color:#FFCB6B\"> AppNexusProps</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">appID</span><span style=\"color:#89DDFF\"> ===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">calculator</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#FFCB6B\">Calculator</span><span style=\"color:#89DDFF\"> /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">appID</span><span style=\"color:#89DDFF\"> ===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">vscode</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#FFCB6B\">VSCode</span><span style=\"color:#C792EA\"> isBeingDragged</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">isBeingDragged</span><span style=\"color:#89DDFF\">} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">appID</span><span style=\"color:#89DDFF\"> ===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">calendar</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#FFCB6B\">Calendar</span><span style=\"color:#89DDFF\"> /&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#FFCB6B\">PlaceholderApp</span><span style=\"color:#C792EA\"> appID</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">appID</span><span style=\"color:#89DDFF\">} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See?? Super easy to do!!</p>\n<p>This brought the initial bundle size down to just <mark>62KB</mark> min+brotli with 3.9KB of CSS. 23KB smaller\nby just dynamically importing stuff <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"></p>\n<p>And this is when I took a break from this project(again!)...</p>\n<p>Until 12th August 2021, when I was so bored I decided to just rebuild the whole thing again in Svelte. So that's what I did.</p>\n<h1 id=\"Svelte:-The-golden-age\"><a class=\"heading-link\" href=\"#Svelte:-The-golden-age\">#</a>Svelte: The golden age</h1>\n<p>I began migrating on the morning of 12th August, kept at it the whole day, and got the Dock, the menubar, and the action center working, as it was a matter of copy-pasting only.</p>\n<p>As for the dock animation, I had <a href=\"https://puruvj.dev/blog/macos-dock-animation-svelte\" target=\"_blank\" rel=\"noopener\">already done an article about it</a>, so all I had to do was just copy-paste stuff, again <img class=\"emoji\" draggable=\"false\" alt=\"😏\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60f.svg\">.</p>\n<p>I continued on the 13th too, working the whole day, implementing the different apps. Finally completed by the end of the day.</p>\n<h1 id=\"Results\"><a class=\"heading-link\" href=\"#Results\">#</a>Results</h1>\n<p>Unsurprisingly, the bundle size went down and runtime performance went up. If you have been following Web Dev news on Twitter and Reddit, you probably saw this coming from a mile away.</p>\n<p>But the extent of these improvements was <strong>very</strong> surprising. I'll just let the cat out of the bag: Initial bundle size went down to <mark>28.5KB</mark> of JS, min+brotli<img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\">. That's less than half of what it was before.</p>\n<p>And runtime performance went up by a lot. With the previous version, the dock animation could get janky when my computer was overloaded. Not by a lot, but it was visible. After I moved to Svelte, even that much jank was gone. <strong>Fully gone!</strong></p>\n<h1 id=\"The-process\"><a class=\"heading-link\" href=\"#The-process\">#</a>The process</h1>\n<p>The process of migrating to Svelte from a React app was gruelling and hard and rough and mentally taxing. It was exhausting.</p>\n<p><strong>Ignore the line above, it was total BS <img class=\"emoji\" draggable=\"false\" alt=\"🤣\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f923.svg\"></strong></p>\n<p>Moving to Svelte was an <strong>extremely simple</strong> process. It was literally copying the JSX code, pasting it as is, removing the CSS Modules stuff, and adding regular old classes.</p>\n<p>Because Svelte's state is very close to React's useState, moving it was a matter of copy-pasting all the state-related code and modifying it to be a regular Variable.</p>\n<p>So this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">xPos</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setXPos</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">yPos</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setYPos</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">isMenuVisible</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setIsMenuVisible</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#BABED8\">(</span><span style=\"color:#FF9CAC\">false</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>became this in svelte <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> xPos </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> yPos </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> isMenuVisible </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is it. Literally got rid of a lot of noise, but the skeleton structure remained the same.</p>\n<h2 id=\"But-what-about-Global-state\"><a class=\"heading-link\" href=\"#But-what-about-Global-state\">#</a>But what about Global state?</h2>\n<p>Yes, global state would've been a problem, but the thing is: <strong>It Wasn't</strong>.</p>\n<p>Moving React global state would be a huge pain if I were using the React Context or Redux, where person A tells person B to tell person C to change the state. I personally never liked this Reducer pattern. It made sense to use it on super big codebases, but I never encountered the problem myself.</p>\n<p>So I searched rigorously for a global management system as simple as possible. I already had a taste of the simplicity that <a href=\"https://stenciljs.com/docs/stencil-store\" target=\"_blank\" rel=\"noopener\">StencilJS store</a> and Svelte Stores provided.</p>\n<p>After searching long, I found this amazing library called <a href=\"https://jotai.pmnd.rs/\" target=\"_blank\" rel=\"noopener\">Jotai</a> which provided a global state very very similar to Svelte Stores, and I <strong>freaking loved it!!! <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"></strong></p>\n<p>It was exactly what I needed.</p>\n<p>Here's a little snippet of how it works <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Create global store</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> themeAtom </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> atom</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">light</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Inside the component</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setTheme</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useAtom</span><span style=\"color:#BABED8\">(themeAtom)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It makes the state management very linear, just like <code>useState</code>. Which made migrating it to Svelte extremely easy.</p>\n<p>I copied the <code>atom</code>s as is, renamed their function to <code>writable</code>, remove the whole <code>const [val, setVal] = useAtom(someAtom);</code> syntax entirely and put a <code>$</code> before the store where I was using it. And that's it! This is literally how I migrated away.</p>\n<h2 id=\"What-about-Styles\"><a class=\"heading-link\" href=\"#What-about-Styles\">#</a>What about Styles?</h2>\n<p>The same thing literally. Because Styles were just plain SCSS, independent of the framework, there was literally nothing to do here. Just copy-pasted styles from the .scss file to the Svelte SFCs, and we're done.</p>\n<p>This whole process was so simple, that it took me just 2 days to completely migrate away.</p>\n<p><img src=\"\" alt=\"Let's get this party started\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/macos-preact-to-svelte--party-celebration/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/macos-preact-to-svelte--party-celebration.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h1 id=\"Observations\"><a class=\"heading-link\" href=\"#Observations\">#</a>Observations</h1>\n<p>Here are my takeaways from this whole process <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<h2 id=\"Svelte-Code-is-much-simpler\"><a class=\"heading-link\" href=\"#Svelte-Code-is-much-simpler\">#</a>Svelte Code is much simpler</h2>\n<p>This comes as no surprise, Svelte code is much shorter, more readable than JSX.</p>\n<p>I tweeted a little part of it <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Svelte is simpler tweet\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 80.08333333333333%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/macos-preact-to-svelte--svelte-simplicity-tweet/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/macos-preact-to-svelte--svelte-simplicity-tweet/small.png\">\n      <img alt=\"Svelte is simpler tweet\" data-src=\"../media/macos-preact-to-svelte--svelte-simplicity-tweet/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p><a href=\"https://twitter.com/puruvjdev/status/1425866919853260800\" target=\"_blank\" rel=\"noopener\">Source</a></p>\n</blockquote>\n<p>Every single component in the new Svelte Codebase is around 20-30% smaller. The number of files is literally <strong>half</strong> as before, cuz I don't need to separate <code>.scss</code> files anymore. Styles exists in the one <code>.svelte</code> file only.</p>\n<p>And some components that are now longer than before, are longer because I got rid of some abstracted small components entirely, which I had refactored away earlier. Because Svelte is so simple in terms of readability, I could just inline these components and the code still looked very clean. <img class=\"emoji\" draggable=\"false\" alt=\"💯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f4af.svg\"> points for Svelte!!</p>\n<h2 id=\"Svelte-Motion\"><a class=\"heading-link\" href=\"#Svelte-Motion\">#</a>Svelte Motion = <img class=\"emoji\" draggable=\"false\" alt=\"🔥\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f525.svg\"></h2>\n<p>macOS is an Operating system, and no OS is complete without animations. This is where Svelte's built in Motion stores and transitions come in.</p>\n<p>Svelte's Motion stores are extremely lightweight, and extremely powerful. They power the dock animation when you hover over it, and using them is extremely easy.</p>\n<p>Previously I was using Framer Motion. Framer Motion is a great library and my go-to thing for animations in P/React. But there's just one little issue with it: It's not exactly small <img class=\"emoji\" draggable=\"false\" alt=\"🥲\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f972.svg\"></p>\n<p>This is the bundlephobia size of <code>framer-motion</code></p>\n<p><img src=\"\" alt=\"Framer Motion bundlephobia size. Gzip size = 32KB\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 55.25%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/macos-preact-to-svelte--bundlephobia-framer-motion/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/macos-preact-to-svelte--bundlephobia-framer-motion/small.png\">\n      <img alt=\"Framer Motion bundlephobia size. Gzip size = 32KB\" data-src=\"../media/macos-preact-to-svelte--bundlephobia-framer-motion/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>This isn't very big, but this ain't small either. 32KB Gzip is a lot <img class=\"emoji\" draggable=\"false\" alt=\"🤐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f910.svg\"></p>\n<p>Framer Motion's size is indicative of its capabilities. Framer Motion can do a <strong>lot</strong>. Really, it can do anything animation related under the sun.</p>\n<p>But ofc, there's no such thing as a good tool and a bad tool. There's only the <strong>right tool for the JOB</strong>, and Framer Motion was overqualified for my use case.</p>\n<p>But Svelte fit right in. It had exactly what I needed(Except for one small piece, which I got from <code>popmotion</code>. Jut 3Kb big <img class=\"emoji\" draggable=\"false\" alt=\"😌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60c.svg\">), and most importantly, it allowed me to programmatically handle it, which is easier than going the declarative route.</p>\n<p>Here's a little example. Go to <a href=\"https://macos.vercel.app\" target=\"_blank\" rel=\"noopener\">macos.vercel.app</a>, click on any icon on the dock. It jumps up and down once.</p>\n<p>Animating that with Framer Motion looked somewhat like this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">animateObj</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setAnimateObj</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span><span style=\"color:#F07178\"> translateY</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">0%</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">0%</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">0%</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">] </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">motion.span</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  onTap</span><span style=\"color:#89DDFF\">={()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> setAnimateObj</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span><span style=\"color:#F07178\"> translateY</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">0%</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">-39.2%</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">0%</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">] </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  initial</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#FF9CAC\">false</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  animate</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">animateObj</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  transition</span><span style=\"color:#89DDFF\">={{</span><span style=\"color:#F07178\"> type</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">spring</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> duration</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.7</span><span style=\"color:#89DDFF\"> }}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  transformTemplate</span><span style=\"color:#89DDFF\">={({</span><span style=\"color:#BABED8;font-style:italic\"> translateY</span><span style=\"color:#89DDFF\"> })</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">translateY(</span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">translateY</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">)</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  {</span><span style=\"color:#676E95;font-style:italic\">/* Markup */</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#FFCB6B\">motion.span</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is pretty simple, but there are a few issues with it: Have to tell it to not run in the beginning, how to translate it. All these can be condensed into 1 big issue: It's declarative.</p>\n<p>I'm a JS guy first. Declarative programming doesn't come naturally to me. I see the world as cause and effect. You click, something happens.</p>\n<p>Doing the same thing in Svelte was much easier and programmatic <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">script</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Spring animation for the click animation</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> appOpenIconBounceTransform </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> tweened</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    duration</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 400</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    easing</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> sineInOut</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  async</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> openApp</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">e</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> MouseEvent</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    /* State related stuff */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Animate the icon</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    await</span><span style=\"color:#BABED8\"> appOpenIconBounceTransform</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">set</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#F78C6C\">39.2</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Now animate it back to its place</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    appOpenIconBounceTransform</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">set</span><span style=\"color:#F07178\">(</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">script</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">span</span><span style=\"color:#C792EA\"> style</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">transform: translate3d(0, {$appOpenIconBounceTransform}%, 0)</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  &lt;!-- Stuff --&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">span</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It's very clean and simple now. Plus it's not declarative anymore. I <strong>tell</strong> the program <strong>explicitly</strong> when to go up, and when to come back down. The program literally reads like this: <code>Go up -39.2%, and when you're done with that, go down to base position</code>. As simple as that ¯\\_(ツ)_/¯</p>\n<h2 id=\"Those-transitions\"><a class=\"heading-link\" href=\"#Those-transitions\">#</a>Those transitions <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"></h2>\n<p>Transitions in Svelte are basically animations to be run when some DOM is created or destroyed. This is nearly impossible to do in P/React without relying on external libraries like Framer Motion. But in Svelte, this is in-built and extremelyyyyyyy easy to do.</p>\n<p>So, ofc, I put in transitions everywhere I could. Earlier, when you opened/closed any app, there was no transition. Now, when you close a window, it collapses into itself while closing, giving an awesome transition.</p>\n<p>Adding this window close transition was literally just this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">script</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  function</span><span style=\"color:#82AAFF\"> windowCloseTransition</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">el</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8;font-style:italic\"> duration</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 300</span><span style=\"color:#89DDFF\"> })</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> existingTransform</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> getComputedStyle</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">el</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">transform</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">      duration</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">      easing</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> sineInOut</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">      css</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">t</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">opacity: </span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">t</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">; transform: </span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">existingTransform</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\"> scale(</span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">t</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">)</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    };</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">script</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">section</span><span style=\"color:#C792EA\"> out:windowCloseTransition</span><span style=\"color:#89DDFF\">&gt;&lt;/</span><span style=\"color:#F07178\">section</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And that is it!! Now there's a really nice transition, with around 10 lines of code only.</p>\n<blockquote>\n<p>I see this as an absolute win ~~ Professor Hulk</p>\n</blockquote>\n<p>I added in transitions in many other places which I couldn't add before with Framer Motion. Not because they weren't possible, but because the syntax felt unnatural there, but here in Svelte, it just fits right in!</p>\n<h1 id=\"Final-Words\"><a class=\"heading-link\" href=\"#Final-Words\">#</a>Final Words</h1>\n<p>Really, moving to Svelte made me realize how extremely powerful it is. A lot of React developers treat Svelte as a toy(I was one of them), but really, it isn't a toy. In fact I'd say it's more powerful than React. Yes, less control over everything than React, but it is a better choice for 95% of developers than React anyway.</p>\n<p>Hope you liked this half-historical half-technical article, and it gave you some enthusiasm to try Svelte, if you haven't already.</p>\n<p>Peace out <img class=\"emoji\" draggable=\"false\" alt=\"✌️\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/270c.svg\"></p>\n",
    "id": "macos-react-to-svelte",
    "reading_time": 10.915,
    "toc": [
      {
        "indent": 0,
        "id": "Early-days-(React)!",
        "title": "Early days (React)!",
        "length": 19
      },
      {
        "indent": 0,
        "id": "The-era-of-Preact",
        "title": "The era of Preact",
        "length": 17
      },
      {
        "indent": 0,
        "id": "Goodbye-styled-components",
        "title": "Goodbye styled-components <img class=\"emoji\" draggable=\"false\" alt=\"🏳️\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f3f3.svg\"/>",
        "length": 29
      },
      {
        "indent": 0,
        "id": "Go-Code-splitting!",
        "title": "Go Code splitting!",
        "length": 18
      },
      {
        "indent": 0,
        "id": "Svelte:-The-golden-age",
        "title": "Svelte: The golden age",
        "length": 22
      },
      {
        "indent": 0,
        "id": "Results",
        "title": "Results",
        "length": 7
      },
      {
        "indent": 0,
        "id": "The-process",
        "title": "The process",
        "length": 11
      },
      {
        "indent": 1,
        "id": "But-what-about-Global-state",
        "title": "But what about Global state?",
        "length": 28
      },
      {
        "indent": 1,
        "id": "What-about-Styles",
        "title": "What about Styles?",
        "length": 18
      },
      {
        "indent": 0,
        "id": "Observations",
        "title": "Observations",
        "length": 12
      },
      {
        "indent": 1,
        "id": "Svelte-Code-is-much-simpler",
        "title": "Svelte Code is much simpler",
        "length": 27
      },
      {
        "indent": 1,
        "id": "Svelte-Motion",
        "title": "Svelte Motion = <img class=\"emoji\" draggable=\"false\" alt=\"🔥\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f525.svg\"/>",
        "length": 18
      },
      {
        "indent": 1,
        "id": "Those-transitions",
        "title": "Those transitions <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"/>",
        "length": 20
      },
      {
        "indent": 0,
        "id": "Final-Words",
        "title": "Final Words",
        "length": 11
      }
    ],
    "seriesIndex": 0
  },
  "golang-as-javascripter": {
    "cover_image": "media/golang-as-javascripter--cover-image.jpg",
    "title": "Trying Golang as a JavaScript lover",
    "date": "2021-08-17T18:30:00.000Z",
    "description": "I have written JavaScript, TypeScript, Dart, Python, PHP, C, C++, but never tried golang before. Here is my first hand experience trying it out",
    "body": "<p><img src=\"\" alt=\"Peaceful Tibetan Monastery\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.91666666666667%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/golang-as-javascripter--cover-image/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/golang-as-javascripter--cover-image/small.jpg\">\n      <img alt=\"Peaceful Tibetan Monastery\" data-src=\"../media/golang-as-javascripter--cover-image/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Go for JavaScript developers series:</p>\n      <p>\n        <a> Part 1 - Trying Golang as a JavaScript lover (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br>\n      </p>\n    </blockquote><p></p>\n<p>I have been into coding since early 2015. That's about 6 years now. In that time I have done HTML CSS JavaScript, its supersets TypeScript(My favorite language of all time <img class=\"emoji\" draggable=\"false\" alt=\"😌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60c.svg\">) and Dart, some light Python, and C and C++ in university curriculum.</p>\n<p>Recently, Golang caught my eye. So I had been casually reading its documentation, the tutorial, some articles. Not really trying it out, in the sense of opening VSCode and writing the actual code.</p>\n<p>I was just trying to get a feel for the patterns. Because the more sources you learn from, the better you become, no matter if the context is entirely different. Concepts and Patterns bleed over to other things.</p>\n<p>Now here's one thing about me: I am a die-hard JavaScripter(That's not an official term, but who cares, let's consider it is, for now <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\">). I write everything in JavaScript or TypeScript(Basically JavaScript with Types and futuristic features). Whether it's an app, or a small script or heck, even something where using Python would be better, I still go with JavaScript.</p>\n<p>Why? Because JavaScript is extremely flexible. As a language alone, it can literally do <strong>anything</strong>. It is a very easy language. There are a dozen ways to do anything in it. Then you include the <strong>Modular</strong> aspect of it in the equation, and the huge registry, <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">NPM</a>, and JavaScript reaches a godly level.</p>\n<p>Yet at the same time, it is explicit enough. You have to declare variable first before using it with <code>const</code> or <code>let</code>, unlike Python, which leads to confusion about <strong>where</strong> the variable is coming from!!</p>\n<p>JavaScript uses curly braces for blocks instead of indentation. People would say Python looks cleaner without those braces, and I agree. It <strong>looks</strong> cleaner. But while reading, that indentation confuses me, as in, the line I'm reading belongs to which block exactly. Plus writing it is really risky. You might end up accidentally removing indentation from a line at the end of a block and it becomes a part of the outer block. It <strong>has happened to me</strong>, countless times.</p>\n<p>These are some reasons why JavaScript is my favorite. So where does Go factor in on it?</p>\n<p>Let's see!</p>\n<h1 id=\"TLDR\"><a class=\"heading-link\" href=\"#TLDR\">#</a>TLDR</h1>\n<p>Sorry, there's no TLDR for this article. It's just a documentation of my experience <img class=\"emoji\" draggable=\"false\" alt=\"🥲\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f972.svg\"></p>\n<h1 id=\"Disclaimer\"><a class=\"heading-link\" href=\"#Disclaimer\">#</a>Disclaimer</h1>\n<p>Before we start, here's something I wanna make clear: This isn't an organized technical article about pros and cons of Go or JavaScript. This is a completely Subjective article about what <strong>I like</strong> about Go and what I don't like about it. If yur here for a hardcore, informative article about Go and JavaScript, you will be disappointed <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\"></p>\n<p>But hey, if you wanna read a first hand experience, this is it!! Read on!! <img class=\"emoji\" draggable=\"false\" alt=\"🤩\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f929.svg\"></p>\n<p>So with that out of the way, let's begin!</p>\n<h1 id=\"Why-even-try-Go\"><a class=\"heading-link\" href=\"#Why-even-try-Go\">#</a>Why even try Go?</h1>\n<p>This is a valid question. You just read that I know many languages, and even on top of that, I use JavaScript for everything. So what gives? Why try to fit another language in my tiny brain?</p>\n<p>The problem was when JS was way too big!!</p>\n<p>What do I mean by that? Let's rewind a little!!</p>\n<h1 id=\"The-lazy-undergraduate\"><a class=\"heading-link\" href=\"#The-lazy-undergraduate\">#</a>The lazy undergraduate</h1>\n<blockquote>\n<p>Spoiler: I am the lazy undergraduate in question <img class=\"emoji\" draggable=\"false\" alt=\"😄\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f604.svg\">.</p>\n</blockquote>\n<p>I took admission in university a few months back. Thanks to Covid-19, our classes are fully online. It means there are a bunch of Google meet links that I had to hunt for, for every class.</p>\n<p>So the actual process was:</p>\n<ol>\n<li>Open up the timetable every hour and see which class is next.</li>\n<li>If there's a class in next hour, find out its link.</li>\n</ol>\n<p>Believe me or not, this process took 5 minutes. EVERY. SINGLE. TIME! 5 minutes isn't a lot, but you count these 5 minutes for every time I had to it, and combine it, that's around 10+ hours wasted just for finding the link.</p>\n<p>And worse than that is the repetition. As a programmer, you know how horrible it is do the same boring task again and again. And unlike non-programmers, you can't accept the situation and get used to it. You have to automate it, even if it takes hours.</p>\n<p><img src=\"\" alt=\"Can this 5 minute task be automated?\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 89.91666666666667%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/golang-as-javascripter--is-this-meme/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/golang-as-javascripter--is-this-meme/small.jpg\">\n      <img alt=\"Can this 5 minute task be automated?\" data-src=\"../media/golang-as-javascripter--is-this-meme/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>So hey, that's what I did!!</p>\n<p>I created a script that would run in the background, and open the class link in the browser 5 minutes before the class started. Just like that!!</p>\n<h1 id=\"In-comes-Deno\"><a class=\"heading-link\" href=\"#In-comes-Deno\">#</a>In comes Deno</h1>\n<p><img src=\"\" alt=\"Hold up a minute meme\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 73%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/golang-as-javascripter--hold-up/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/golang-as-javascripter--hold-up/small.jpg\">\n      <img alt=\"Hold up a minute meme\" data-src=\"../media/golang-as-javascripter--hold-up/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>If you're like, \"Hold up a minute, what's Deno doing an article about Go?\", lemme explain.</p>\n<p>Deno is platform for JavaScript/typeScript, like NodeJS, with the added benefit of compiling your code into machine level code, or an executable file.</p>\n<p>This was perfect for me. I could write code in my favorite language, and convert it over to an executable that I could configure to run on System startup, so I'd never have to run it myself ever again.</p>\n<p><img src=\"\" alt=\"Perfection meme from X Men\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/golang-as-javascripter--xmen-perfection-meme/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/golang-as-javascripter--xmen-perfection-meme.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Only it wasn't perfect <img class=\"emoji\" draggable=\"false\" alt=\"🤐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f910.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f910.svg\"></p>\n<p>The code itself was amazingly easy to write. I completed it in 3 hours, because I was so familiar with TypeScript.</p>\n<p>But where the issue was while compiling the code into an executable.</p>\n<p>The executable's size was <mark>56 MB</mark> for windows, and as high as <mark>90MB</mark> for MacOS M1.</p>\n<p>56MB isn't a lot for me. Even 90 MB is nothing. But it kept nagging at me. I try to keep the sizes of apps/websites I build as low as I can, and 56MB felt just way too big for that.</p>\n<p>And not only that. Because I had made this project public(Here it is: <a href=\"https://github.com/PuruVJ/auto-class-launcher-deno\" target=\"_blank\" rel=\"noopener\">PuruVJ/auto-class-launcher-deno</a>) and usable for everyone, my batchmates tried to use it, and well, 60-90Mb was way too big for them, due to limited internet and all.</p>\n<p>So I got a good excuse to re-write it.</p>\n<p>Node was out of question because any script in it would require NodeJS to be installed on the system and overall a more complicated process.</p>\n<p>I turned towards Rust! I had been jumping to learn Rust for quite some time, cuz of its performance and modernity and all that stuff.</p>\n<p>But oh boy, Rust was hard. Extremely hard!! I gave up after a few hours.</p>\n<p>Then, I finally turned towards Go!!</p>\n<h1 id=\"Learning-Go\"><a class=\"heading-link\" href=\"#Learning-Go\">#</a>Learning Go</h1>\n<p>I sat down at night to make it. I created the project, initialized the Go boilerplate(which is just a <code>go.mod</code> file and a <code>main.go</code> with 4 lines of code), <strong>then</strong> I opened up the Go Tutorial.</p>\n<p>Yeah, this might seem strange to you. Initialize a project, and <strong>then</strong> start learning that thing? Why would you do that?</p>\n<p>Well, I'm a huge proponent of <mark>Learning by Doing</mark>, where you learn the bare minimum upfront, and the rest you learn by trying to make a small project in it. It makes you learn the concept the hard way, but really fast, without wasting any time on trivialities.</p>\n<p>In case of Go, though, I didn't need anything upfront, cuz I had seen the syntax before a bit and it looked simple enough to me.</p>\n<blockquote>\n<p>Spoiler: Learning by Doing really works, I learnt basic Go in 3-4 hours only <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"></p>\n</blockquote>\n<h1 id=\"Results\"><a class=\"heading-link\" href=\"#Results\">#</a>Results</h1>\n<p>Before I jump into the experience, here's the straight up results <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Comparison of the binary size and memory consumption generated by Deno and Go\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 46.75%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/golang-as-javascripter--go-vs-deno-size-comparison/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/golang-as-javascripter--go-vs-deno-size-comparison/small.png\">\n      <img alt=\"Comparison of the binary size and memory consumption generated by Deno and Go\" data-src=\"../media/golang-as-javascripter--go-vs-deno-size-comparison/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p>If you're unable to read the image(Screenreader/Slow network), it's a comparison table showing Deno generated binary size to be <strong>57 - 90MB</strong> and memory consumption to be <strong>6 - 11MB</strong>, whereas with Go, the binary size is <strong>2.6 - 2.9MB</strong>, and RAM consumption is <strong>1.5 - 7MB</strong>.</p>\n</blockquote>\n<p>Mindblown right <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\">?! Such a huge difference in the binary size. The Go version is straight away <strong>22 - 31</strong> times smaller!!</p>\n<p>And even the <strong>max</strong> memory consumption of Go binary is similar to the <strong>minimum</strong> memory consumption of the <strong>Deno</strong> program.</p>\n<blockquote>\n<p>The reason the memory consumptions varies is because both these Go and Deno do garbage collection, so the objects and constructs are garbage collected <strong>eventually</strong> and memory consumption drops down, because the binary knows it need not keep those things in memory anymore.</p>\n</blockquote>\n<h1 id=\"Observations-about-migrating\"><a class=\"heading-link\" href=\"#Observations-about-migrating\">#</a>Observations about migrating</h1>\n<p>This, folks, is the part you came to read about really. Read on!</p>\n<p>So I migrated the whole app to Go, (mostly) bug free, in 1 day.</p>\n<p>And here's my observations, as an avid JavaScripter learning Go for the very first time!!</p>\n<h2 id=\"Not-very-different-(In-a-good-way-)\"><a class=\"heading-link\" href=\"#Not-very-different-(In-a-good-way-)\">#</a>Not very different (In a good way <img class=\"emoji\" draggable=\"false\" alt=\"🙂\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f642.svg\">)</h2>\n<p>Really, that's the first point I noticed about it. It isn't much different from JavaScript. There are variables, functions, <code>if</code>, <code>else</code>, <code>for</code>, <code>switch</code> blocks, Error handling system and what not.</p>\n<p>That is the main point of Go, really!! It combines all the knowledge of 60 years of programming into a very simple and wise language which doesn't invent a lot of new stuff. Rather, it focuses on problems that aren't even code related, which are just as important as the code itself, like feature creep, standard formatting, great package management system and stuff that isn't answered well enough in a majority of languages to the day. And OFC, can't forget Goroutines <img class=\"emoji\" draggable=\"false\" alt=\"😌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60c.svg\"></p>\n<p>OFC, it depends on how comfortable you're with programming languages, generally, but if you're very comfortable with TypeScript or Dart or any other statically typed language, you'll feel right at home with Go.</p>\n<p>But even then, it isn't necessary to know a Statically typed language before, as Go will infer as much of the types as it can without you needing to tell it much.</p>\n<h2 id=\"Variables-are-Pythonic-but-not-quite...\"><a class=\"heading-link\" href=\"#Variables-are-Pythonic-but-not-quite...\">#</a>Variables are Pythonic, but not quite...</h2>\n<p>Here's how JavaScript variables are defined.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Declare variable</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> someVal</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">someVal </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Set it to something later on</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">someVal </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">world</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you wanna do it explicitly in TypeScript,</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> someVal</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">someVal </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Set it to something later on</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">someVal </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">world</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>OFC, TypeScript is intelligent and you don't always need to specify types for a variable.</p>\n<p>As you can see, it's <strong>extremely clear</strong> where this variable is defined. You are scrolling through a file, there's the big <code>const</code> and <code>let</code> glaring right at you. The source is extremely clear.</p>\n<p>Now let's come to Python.</p>\n<p>The above example of declaring a variable here <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">someVal </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"># Set it to something later on</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">someVal </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">world</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Can you the declaration part and the part where we set it's value to something, later on in the program? There's no difference. No way to know where this variable was defined. It's irritating in my opinion. There needs to be some distinction between the two.</p>\n<p>Now, why I talk about Python variables? Cuz Golang variables, in their simplest form, are very much like Python variables, but they have one extra character that prevents the confusion that Python variables introduce. That character is <code>:</code></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">someVal </span><span style=\"color:#89DDFF\">:=</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">Tell me. Do you bleed?</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Set it to something later on</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">someVal </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">You will!</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>A little dialogue from Batman vs Superman <img class=\"emoji\" draggable=\"false\" alt=\"🦇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f987.svg\"></p>\n</blockquote>\n<p>1st time, I'm declaring the variable using the <code>:=</code> operator. But when setting its value later in the program, I use the regular <code>=</code> operator.</p>\n<p>This is a small thing, but it makes a huge difference!! I even actually prefer it over JavaScript's <code>let</code> variable declaration. It is cleaner, but not <strong>so clean</strong> it sacrifices developer ergonomics.</p>\n<p>And if you prefer a more verbose way, that's there too</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">var</span><span style=\"color:#BABED8\"> someVal </span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Just like JavaScript's <code>var someVal = \"hello\"</code>, but here the data type is necessary. If you're a TypeScripter, you'll feel right at home here.</p>\n<p>And ofc, you also have <code>const</code> in go, and its declaration is the exact same as doing it in JavaScript</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">const</span><span style=\"color:#BABED8\"> someVal </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I really love the fact that Go goes the extra length to keep the code clean, but doesn't shy away from providing the standard, more verbose APIs when they're needed. It's the best of both worlds.</p>\n<h2 id=\"Type-System\"><a class=\"heading-link\" href=\"#Type-System\">#</a>Type System</h2>\n<p>Go's Type system is similar to the type system of TypeScript, where most of the time, you don't even need to specify types for your variables.</p>\n<p>In TypeScript, this below:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> x </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>is inferred as <code>string</code> automatically. Same with number or boolean or just anything.</p>\n<p>Go works like this too!!</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">x </span><span style=\"color:#89DDFF\">:=</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>x</code> is inferred as <code>string</code>. Works similar to TypeScript!!</p>\n<p>This kind of type system is personally my favorite!! Having too much type information makes the code hard to scan, in my opinion! Having types only where absolutely needed is the way I roll, and I am glad Go has that same philosophy <img class=\"emoji\" draggable=\"false\" alt=\"🤩\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f929.svg\"></p>\n<p>OFC, there was one place where I found Go's system to be less convenient.</p>\n<p>You see, in the project, I input the timetable and link information from an external <code>.json</code> file. That JSON file has the following TypeScript structure <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> ClassConfig</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  link</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  times</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    day</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">mon</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">tue</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">wed</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">thu</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">fri</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">sat</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">sun</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    time</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, I have an object type inside the main object type. If you're a TypeScript developer, you wouldn't even think about it twice.</p>\n<p>But in Golang, you can't define a type with a struct inside struct <img class=\"emoji\" draggable=\"false\" alt=\"🤐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f910.svg\"></p>\n<p>So I had to do this</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">type</span><span style=\"color:#FFCB6B\"> ClassTime</span><span style=\"color:#89DDFF\"> struct</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Day  </span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">json:\"day,omitempty\"</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Time </span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">json:\"time,omitempty\"</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">type</span><span style=\"color:#FFCB6B\"> Class</span><span style=\"color:#89DDFF\"> struct</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Link  </span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\">      `</span><span style=\"color:#C3E88D\">json:\"link,omitempty\"</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Times </span><span style=\"color:#89DDFF\">[]</span><span style=\"color:#FFCB6B\">ClassTime</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">json:\"times\"</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">type</span><span style=\"color:#FFCB6B\"> ClassConfig</span><span style=\"color:#89DDFF\"> map[</span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#FFCB6B\">Class</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So yeah, I had to declare 2 more types to get the TypeScript behavior <img class=\"emoji\" draggable=\"false\" alt=\"🥲\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f972.svg\">.</p>\n<blockquote>\n<p>Those tags in structs are a way to tell go to expect this data to be a json field, and don't include a field if it is not there in the JSON itself.</p>\n</blockquote>\n<h2 id=\"Standard-library-is-the\"><a class=\"heading-link\" href=\"#Standard-library-is-the\">#</a>Standard library is the <img class=\"emoji\" draggable=\"false\" alt=\"🧑‍🍳\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f9d1-200d-1f373.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"😘\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f618.svg\"></h2>\n<blockquote>\n<p>Bonus points if you figured out the heading <img class=\"emoji\" draggable=\"false\" alt=\"😜\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f61c.svg\"></p>\n</blockquote>\n<p>JavaScript doesn't have a standard library. Sure, it has some really good global functions that you can snatch up and use directly, but they don't qualify as <strong>standard lib</strong>.</p>\n<p>Go is the opposite. By default, globally, it doesn't provide much.</p>\n<p>But you start importing stuff from the built in standard library, you can achieve a lot!!</p>\n<p>Want JSON? Import <code>json</code> package, and use it.</p>\n<p>Need to do math? Import <code>math</code> package, and use it!!</p>\n<p>But you're wondering, doesn't that add an extra step over just using the <code>Math.*</code> and <code>JSON.*</code> objects of JavaScript? Yes, it does!</p>\n<p>But that doesn't mean that Go is bad for not having global objects like these, or JS is bad for having global objects that are just lying around in the namespace. No.</p>\n<p>Go is a compiled language. It takes all the code you wrote, inlines everything you imported, and then convert it to machine level code. JS on the other hand is an interpreted language. What you write is what is executed in the browser ultimately, so no conversion required. So there, having these objects available isn't a big problem.</p>\n<p>But in Go, if you include every in-built module by default, its final output size is gonna be <strong>huge</strong>. No one likes big file sizes. So by importing only what you need, output size stays small.</p>\n<p>And the standard library has just so much more stuff than <code>Math</code> and <code>json</code> packages. It has packages that in Node/Deno world, you'd be installing from npm/pulling it with a URL.</p>\n<p>Here are some great libs <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<ul>\n<li><strong>bytes</strong> - Dealing with Byte slices</li>\n<li><strong>context</strong> - Defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</li>\n<li><strong>database</strong> - Interfaces for dealing with Databases(SQL only, at the moment)</li>\n<li><strong>embed</strong> - For embedding resources into your final binary so no need to ship many different files</li>\n<li><strong>time</strong> - For dealing with dates and times.</li>\n<li><strong>flag</strong> - Package flag implements command-line flag parsing. This is really shocking to me, cuz in Node and Deno, you always have to pull in another library for dealing with CLIs. And here, you're getting that literally built-in here <img class=\"emoji\" draggable=\"false\" alt=\"😻\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f63b.svg\"></li>\n</ul>\n<p>There's so much more great stuff in Go Standard Library!! I highly recommend you to check it out.</p>\n<h2 id=\"go:embed-is-DOPE!!\"><a class=\"heading-link\" href=\"#go:embed-is-DOPE!!\">#</a>go:embed is DOPE!! <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"></h2>\n<p>While building this script, I had a little hiccup: <em>How to store a default timetable config in the binary itself? <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\"></em></p>\n<p>In Deno, I had directly inlined the config inside a .ts file as a simple JS Object. But I didn't want to do it, as declaring nested objects in Go is more work. You have to specify object with their struct type next to them everytime. Overall, didn't feel like a good idea ultimately.</p>\n<p><code>go:embed</code> comes to rescue!!</p>\n<p>Rather than explaining what it does, I'll just show you <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8\"> _ </span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#FFCB6B\">embed</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">//go:embed sample.json</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">var</span><span style=\"color:#BABED8\"> sampleConfigStr </span><span style=\"color:#89DDFF\">[]</span><span style=\"color:#C792EA\">byte</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See the comment <code>//go:embed sample.json</code>? This is all we need actually! With this, Go will get this file, and embed it in the variables defined on the next line. Here I have specified the variable to be a <code>Byte array</code>, but it could've been a <code>string</code> too. And it would <strong>just work</strong> <img class=\"emoji\" draggable=\"false\" alt=\"🤩\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f929.svg\"></p>\n<p>I ship the <code>sample.json</code> file, which is the default timetable now, directly in the binary. No need to download the timetable separately.</p>\n<h2 id=\"VSCode-extension-is-a-gem\"><a class=\"heading-link\" href=\"#VSCode-extension-is-a-gem\">#</a>VSCode extension is a gem</h2>\n<p>Did I mention how marvelous Go's VSCode extension is <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\">?!</p>\n<p>It provides blazing fast intellisense.</p>\n<p>It allows you to auto import packages from standard library while typing. So if you're typing <code>fmt.</code>, and <code>fmt</code> hasn't been imported, it will show you the methods available on <code>fmt</code>, and when you use the autocomplete to type out the method, it will automatically import that package for you!! No need to go to the top of the file and add the package to the <code>import</code> list. This feature is really good.</p>\n<p>It creates tests for your functions automatically. Just right click inside the function, and click on <code>Generate unit tests tests</code>, and bam!! You have a tests file now!!</p>\n<p>And, remember the Class type definitions above?</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">type</span><span style=\"color:#FFCB6B\"> ClassTime</span><span style=\"color:#89DDFF\"> struct</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Day  </span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">json:\"day,omitempty\"</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Time </span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">json:\"time,omitempty\"</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">type</span><span style=\"color:#FFCB6B\"> Class</span><span style=\"color:#89DDFF\"> struct</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Link  </span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\">      `</span><span style=\"color:#C3E88D\">json:\"link,omitempty\"</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Times </span><span style=\"color:#89DDFF\">[]</span><span style=\"color:#FFCB6B\">ClassTime</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">json:\"times\"</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">type</span><span style=\"color:#FFCB6B\"> ClassConfig</span><span style=\"color:#89DDFF\"> map[</span><span style=\"color:#C792EA\">string</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#FFCB6B\">Class</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Notice all these <code>json:</code> tags in the definitions. These were added by the extension, not me. I struggled to add these myself for some time, but it didn't work, cuz I was adding spaces here and there, but you aren't supposed to add those. So I put the cursor in the struct definition, right click -&gt; Add tags to struct field. It added these tags and the code worked finally.</p>\n<p>There's a lot more this extension does. It's extremely well crafted, so much so that after you go back to a TypeScript project after this, you actually start feeling homesick for this extension(extensionsick?). And that's saying a lot, cuz TypeScript tools in VSCode is on a <strong>godly</strong> level.</p>\n<h2 id=\"No-.map-.filter-.every\"><a class=\"heading-link\" href=\"#No-.map-.filter-.every\">#</a>No .map .filter .every <img class=\"emoji\" draggable=\"false\" alt=\"😭\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f62d.svg\"></h2>\n<p>All these were the good parts of Go. But there are some things in Go that I didn't like as a JavaScripter. People may argue that Go is better for it, but that doesn't mean I have to like it.</p>\n<p>Which leads to this point: Go doesn't have <code>arr.map</code>, <code>.filter</code>, and all the superb array methods that exist on arrays in JS. Which means I have to use loops for everything.</p>\n<p>Loops aren't bad, but after using these Array methods for so long, using loops feels like going back to the stone age <img class=\"emoji\" draggable=\"false\" alt=\"🤧\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f927.svg\"></p>\n<h2 id=\"Heartsick-for-the-+\"><a class=\"heading-link\" href=\"#Heartsick-for-the-+\">#</a>Heartsick for the +</h2>\n<p>This is a <strong>super nitpick</strong> and I might as well not include it in this post, but I might as well just do <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\">.</p>\n<p>In JS, you have this little trick to convert any data type to a number, by just putting a <code>+</code> symbol before it.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">+</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // NaN</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">+</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">11.5</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // 11.5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9CAC\">true</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // 1</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9CAC\">false</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // 0</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This trick is very useful in JS. Sadly, Go doesn't have this, you have to use <code>strconv.Atoi</code> function, which you can't use in value, as it returns a tuple of value and error, so you need an extra line</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">hours</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> _ </span><span style=\"color:#89DDFF\">:=</span><span style=\"color:#BABED8\"> strconv</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">Atoi</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8\">timeArr</span><span style=\"color:#89DDFF\">[</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#89DDFF\">])</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This isn't much more code, but nothing beats the simplicity of <code>+timeArr[0]</code> <img class=\"emoji\" draggable=\"false\" alt=\"😌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60c.svg\">.</p>\n<blockquote>\n<p>I acknowledge that returning an error is probably better than returning a <code>NaN</code>, but still, it's more code.</p>\n</blockquote>\n<h2 id=\"Reinvent-the-module-system-please\"><a class=\"heading-link\" href=\"#Reinvent-the-module-system-please\">#</a>Reinvent the module system please <img class=\"emoji\" draggable=\"false\" alt=\"🙏\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f64f.svg\"></h2>\n<p>This was probably the most painful aspect. In JS, you write some reusable code in another file than your main file, say <code>math.js</code>.</p>\n<p>In <code>math.js</code> you can export the functions you need <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> square</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> **</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then import it when you need to use.</p>\n<p>Go also has ways to import and export from other packages, but that's it. Import and export from packages, not other files. Other files in your project with the same <code>package &lt;name&gt;</code> specified in them have everything shared among them, which, in my humble opinion, is not good. Globals was a <strong>huge</strong> problem in JavaScript world, and that's the reason we have modules now in JS(After 10 years of people making their own module systems. Yup, the problem was <strong>that</strong> big).</p>\n<p>Now, I have a feeling file based module system probably won't come to Go anytime soon, but still, if you can do it Golang folks... <img class=\"emoji\" draggable=\"false\" alt=\"🥲\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f972.svg\"></p>\n<h1 id=\"Final-words\"><a class=\"heading-link\" href=\"#Final-words\">#</a>Final words</h1>\n<p>Don't let the last few sections make you shy away from trying Go, moving to Go was a very positive result ultimately, and I'd recommend every single JS developer to try Go.</p>\n<p>Hope this article brought you some enthusiasm for trying Go, and some newfound respect for JS(Necessary once in a while thanks to Tech twitter <img class=\"emoji\" draggable=\"false\" alt=\"🙄\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f644.svg\">)</p>\n<p>Peace <img class=\"emoji\" draggable=\"false\" alt=\"✌️\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/270c.svg\"></p>\n",
    "id": "golang-as-javascripter",
    "reading_time": 11.11,
    "toc": [
      {
        "indent": 0,
        "id": "TLDR",
        "title": "TLDR",
        "length": 4
      },
      {
        "indent": 0,
        "id": "Disclaimer",
        "title": "Disclaimer",
        "length": 10
      },
      {
        "indent": 0,
        "id": "Why-even-try-Go",
        "title": "Why even try Go?",
        "length": 16
      },
      {
        "indent": 0,
        "id": "The-lazy-undergraduate",
        "title": "The lazy undergraduate",
        "length": 22
      },
      {
        "indent": 0,
        "id": "In-comes-Deno",
        "title": "In comes Deno",
        "length": 13
      },
      {
        "indent": 0,
        "id": "Learning-Go",
        "title": "Learning Go",
        "length": 11
      },
      {
        "indent": 0,
        "id": "Results",
        "title": "Results",
        "length": 7
      },
      {
        "indent": 0,
        "id": "Observations-about-migrating",
        "title": "Observations about migrating",
        "length": 28
      },
      {
        "indent": 1,
        "id": "Not-very-different-(In-a-good-way-)",
        "title": "Not very different (In a good way <img class=\"emoji\" draggable=\"false\" alt=\"🙂\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f642.svg\"/>)",
        "length": 37
      },
      {
        "indent": 1,
        "id": "Variables-are-Pythonic-but-not-quite...",
        "title": "Variables are Pythonic, but not quite...",
        "length": 40
      },
      {
        "indent": 1,
        "id": "Type-System",
        "title": "Type System",
        "length": 11
      },
      {
        "indent": 1,
        "id": "Standard-library-is-the",
        "title": "Standard library is the <img class=\"emoji\" draggable=\"false\" alt=\"🧑‍🍳\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f9d1-200d-1f373.svg\"/><img class=\"emoji\" draggable=\"false\" alt=\"😘\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f618.svg\"/>",
        "length": 31
      },
      {
        "indent": 1,
        "id": "go:embed-is-DOPE!!",
        "title": "go:embed is DOPE!! <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"/><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"/>",
        "length": 23
      },
      {
        "indent": 1,
        "id": "VSCode-extension-is-a-gem",
        "title": "VSCode extension is a gem",
        "length": 25
      },
      {
        "indent": 1,
        "id": "No-.map-.filter-.every",
        "title": "No .map .filter .every <img class=\"emoji\" draggable=\"false\" alt=\"😭\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f62d.svg\"/>",
        "length": 25
      },
      {
        "indent": 1,
        "id": "Heartsick-for-the-+",
        "title": "Heartsick for the +",
        "length": 19
      },
      {
        "indent": 1,
        "id": "Reinvent-the-module-system-please",
        "title": "Reinvent the module system please <img class=\"emoji\" draggable=\"false\" alt=\"🙏\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f64f.svg\"/>",
        "length": 36
      },
      {
        "indent": 0,
        "id": "Final-words",
        "title": "Final words",
        "length": 11
      }
    ],
    "series": "Go for JavaScript developers",
    "seriesIndex": 1
  },
  "css-modules-typescript-intellisense": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "Get the most out of CSS Modules with TypeScript in 5 minutes",
    "date": "2021-05-13T18:30:00.000Z",
    "description": "If you're a TypeScript Dev, here are a few things you can do to get that sweet, sweet CSS class intellisense",
    "body": "<p>Are you a TypeScript user, who's using CSS modules and ever ran into this little problem where you type <code>styles.</code> and expect the list of classes to show up in your VSCode intellisense, but it doesn't?</p>\n<p>After going through this article, you'll have this super sweet intellisense like shown below <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Demo of CSS Modules autocompletion\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/css-modules-typescript-intellisense--intellisense-demo/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/css-modules-typescript-intellisense--intellisense-demo.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>And the fun part is, you won't need to install any VSCode extensions for this.</p>\n<h1 id=\"Prerequisites\"><a class=\"heading-link\" href=\"#Prerequisites\">#</a>Prerequisites</h1>\n<ol>\n<li>\n<p><strong>VSCode</strong> - VSCode has TypeScript built in, which is what's gonna make this feature work. Not sure about Vim or Sublime though, if they'll support this <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\"></p>\n</li>\n<li>\n<p><strong>Locally installed TypeScript</strong> - There must be TypeScript locally installed and present in your <code>package.json</code> (Preferably the latest version <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</p>\n</li>\n<li>\n<p><strong>Grit and Debugging skills <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"></strong> - Well, it is a prerequisite for writing every single line of code as a dev, donchya agree?</p>\n</li>\n</ol>\n<h1 id=\"The-Best-Way\"><a class=\"heading-link\" href=\"#The-Best-Way\">#</a>The Best Way</h1>\n<p>This is the best and most optimal method here. It is really fast, feels native, as if TypeScript itself knows about your CSS Modules, and doesn't clutter your workspace with <code>d.ts</code> files. It just works!!</p>\n<p>And the best part: Because it's just an npm package, and because the tsconfig is there, anyone else(team member/collaborator) will have the same experience as you out of the box, without any config. No need for them to download any extension, just the plain old <code>npm install</code> will do it for them.</p>\n<p>Magic!!!</p>\n<p><img src=\"\" alt=\"Magic\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/css-modules-typescript-intellisense--magic/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/css-modules-typescript-intellisense--magic.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Here's how to set it up <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<h2 id=\"npm-install-typescript-plugin-css-modules\"><a class=\"heading-link\" href=\"#npm-install-typescript-plugin-css-modules\">#</a><mark>npm install typescript-plugin-css-modules</mark></h2>\n<p>Install this little npm package, preferably as a <code>devDependency</code> (-D).</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#FFCB6B\">npm</span><span style=\"color:#C3E88D\"> i</span><span style=\"color:#C3E88D\"> --save-dev</span><span style=\"color:#C3E88D\"> typescript-plugin-css-modules</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"># Or if you're a yarn person</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">yarn</span><span style=\"color:#C3E88D\"> add</span><span style=\"color:#C3E88D\"> --save-dev</span><span style=\"color:#C3E88D\"> typescript-plugin-css-modules</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>And yeah, in case you were wondering, TypeScript does have its own plugin architecture. Heck, I myself found it only a month back, <a href=\"https://puruvj.dev/blog/move-to-css-modules-from-styled-components\" target=\"_blank\" rel=\"noopener\">when I moved a project of mine to CSS Modules from Styled Components</a> <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">.</p>\n</blockquote>\n<h2 id=\"Add-to-tsconfig.json\"><a class=\"heading-link\" href=\"#Add-to-tsconfig.json\">#</a>Add to tsconfig.json</h2>\n<p>Open up your <code>tsconfig.json</code>, and add to the <code>compilerOptions</code> property this one liner:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">plugins</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">: </span><span style=\"color:#89DDFF\">[{</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C792EA\">name</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">typescript-plugin-css-modules</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> }]</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Set-VSCode-TypeScript-version\"><a class=\"heading-link\" href=\"#Set-VSCode-TypeScript-version\">#</a>Set VSCode TypeScript version</h2>\n<p>This one is superrrrrr important. The TypeScript version your VSCode uses should be the local version(The one installed in your project locally), otherwise this whole song and dance of installing plugins and setting config will be worthless.</p>\n<p>Open a <code>.ts</code> or <code>.tsx</code> file in VSCode, On bottom left you'll see this little option <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"TypeScript version number in VSCode\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 14.499999999999998%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/css-modules-typescript-intellisense--typescript-version-photo-1/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/css-modules-typescript-intellisense--typescript-version-photo-1/small.png\">\n      <img alt=\"TypeScript version number in VSCode\" data-src=\"../media/css-modules-typescript-intellisense--typescript-version-photo-1/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>This is your TypeScript version. Click on it, and a list popup will open on the very top <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"The list popup\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 27.916666666666668%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/css-modules-typescript-intellisense--typescript-version-photo-2/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/css-modules-typescript-intellisense--typescript-version-photo-2/small.png\">\n      <img alt=\"The list popup\" data-src=\"../media/css-modules-typescript-intellisense--typescript-version-photo-2/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Click on <mark>Select TypeScript Version</mark>. That will show these options <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Version choosing list\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 21.666666666666668%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/css-modules-typescript-intellisense--typescript-version-photo-3/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/css-modules-typescript-intellisense--typescript-version-photo-3/small.png\">\n      <img alt=\"Version choosing list\" data-src=\"../media/css-modules-typescript-intellisense--typescript-version-photo-3/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>As you can see, I have <mark>Use VS Code's Version</mark> selected(Look at the white dot before). Click on <mark>Use Workspace Version</mark>, and you are all set.</p>\n<p>And here's your setup. In less than 5 minutes. Super simple, right?</p>\n<p>Enjoy the amazing DX <img class=\"emoji\" draggable=\"false\" alt=\"😀\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f600.svg\">.</p>\n<blockquote>\n<p>Oh, and in case you were wondering, it works perfectly with Sass too <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"></p>\n</blockquote>\n<h1 id=\"Honorable-Mentions\"><a class=\"heading-link\" href=\"#Honorable-Mentions\">#</a>Honorable Mentions</h1>\n<p>Here are some more methods that are... OK, I guess <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">. I used these, and they weren't as good as the technique above.</p>\n<h2 id=\"VSCode-extension\"><a class=\"heading-link\" href=\"#VSCode-extension\">#</a>VSCode extension</h2>\n<p>So, there are a few VSCode extensions out there that provide similar level of intellisense. Notice I used the word <strong>similar</strong>, not same, because</p>\n<ol>\n<li>\n<p>They were a little slower - They slowed down VSCode a little bit. On my fast laptop, it negligible, but on my other older laptop, it was noticeably slow.</p>\n</li>\n<li>\n<p>Choppy Intellisense - The intellisense wasn't always accurate, and sometimes had some noise in it like units(<code>9px</code>, <code>3rem</code>) when you typed <code>styles.</code>, which was definitely a bit weird.</p>\n</li>\n<li>\n<p>I dislike extensions - I am an extreme minimalist. My hunger to reduce things and have only the things <strong>necessary</strong> is super big. I only have 7 VSCode extensions, and only 2-3 are enabled for each workspace at a time. I worked on a super old and slow computer for 4 years, so it's habit to keep these 3rd party things as low as possible(even though I'm on a super fast one now <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">)</p>\n</li>\n</ol>\n<p>But still, this extension is good enough if you can't get <mark>The Best Method</mark> above working.</p>\n<p>Oh, and as for the <strong>extension</strong> itself, I won't drop a link. There are so many coming out and some are better, some aren't, and its in constant flux. It's recommended to just do a search. The keywords: <mark>CSS Modules</mark> should give good results.</p>\n<h2 id=\"typings-for-css-modules-loader\"><a class=\"heading-link\" href=\"#typings-for-css-modules-loader\">#</a><code>typings-for-css-modules-loader</code></h2>\n<p>This is a <mark>Webpack</mark>-only loader. This will do the trick too.</p>\n<p>As I have no experience in Webpack, I can't explain the usage. I recommend you to check out the documentation @ <a href=\"https://www.npmjs.com/package/typings-for-css-modules-loader\" target=\"_blank\" rel=\"noopener\">NPM</a></p>\n<h2 id=\"The-CLI\"><a class=\"heading-link\" href=\"#The-CLI\">#</a>The CLI</h2>\n<p>There's a CLI out there that will generate <code>d.ts</code> files for your CSS modules. Check it out here: <a href=\"https://github.com/Quramy/typed-css-modules\" target=\"_blank\" rel=\"noopener\">typed-css-modules</a>.</p>\n<p>It has a watch mode, so you won't have to run it again everytime you edit your CSS files. Thats handy.</p>\n<p>Though OFC, it only works on plain CSS files, not <code>SCSS</code> or <code>SASS</code> or <code>STYL</code>. Plus there's that hiccup of remembering to run this command in a parallel terminal, or using a script to turn it on automatically along with your Web server.</p>\n<h3 id=\"For-Sass\"><a class=\"heading-link\" href=\"#For-Sass\">#</a>For Sass</h3>\n<p>Its again a CLI and inspired from <code>typed-css-modules</code> CLI: <a href=\"https://github.com/skovy/typed-scss-modules\" target=\"_blank\" rel=\"noopener\">typed-scss-modules</a>. Its a really good tool.</p>\n<blockquote>\n<p>This approach is good, but the biggest drawback I see is the d.ts files generated. it sort off clutters your workspace and Git commits.</p>\n</blockquote>\n<h2 id=\"Manually\"><a class=\"heading-link\" href=\"#Manually\">#</a>Manually</h2>\n<p>The last method is manually adding in the typings yourselves.</p>\n<p>God forbid if you have to resort to this! <img class=\"emoji\" draggable=\"false\" alt=\"😱\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f631.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"😱\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f631.svg\"></p>\n<p>It involves making a <code>d.ts</code> file next to your CSS modules file, and defining modules and putting in the class names yourselves. Its a really bad method. If you add a class to you CSS module, you have to add it to the <code>d.ts</code> too. If you change something, and the project is too big, you're basically screwed, cuz you won't remember to change it in the d.ts most probably.</p>\n<h1 id=\"Conclusion\"><a class=\"heading-link\" href=\"#Conclusion\">#</a>Conclusion</h1>\n<p>I hope you found this article to be helpful. Turning on intellisense for CSS modules has been a total gamechanger for me in terms of how my component and the CSS interact.</p>\n<p>Signing off!</p>\n",
    "id": "css-modules-typescript-intellisense",
    "reading_time": 3.3475,
    "toc": [
      {
        "indent": 0,
        "id": "Prerequisites",
        "title": "Prerequisites",
        "length": 13
      },
      {
        "indent": 0,
        "id": "The-Best-Way",
        "title": "The Best Way",
        "length": 12
      },
      {
        "indent": 1,
        "id": "npm-install-typescript-plugin-css-modules",
        "title": "npm install typescript-plugin-css-modules",
        "length": 41
      },
      {
        "indent": 1,
        "id": "Add-to-tsconfig.json",
        "title": "Add to tsconfig.json",
        "length": 20
      },
      {
        "indent": 1,
        "id": "Set-VSCode-TypeScript-version",
        "title": "Set VSCode TypeScript version",
        "length": 29
      },
      {
        "indent": 0,
        "id": "Honorable-Mentions",
        "title": "Honorable Mentions",
        "length": 18
      },
      {
        "indent": 1,
        "id": "VSCode-extension",
        "title": "VSCode extension",
        "length": 16
      },
      {
        "indent": 1,
        "id": "typings-for-css-modules-loader",
        "title": "typings-for-css-modules-loader",
        "length": 30
      },
      {
        "indent": 1,
        "id": "The-CLI",
        "title": "The CLI",
        "length": 7
      },
      {
        "indent": 2,
        "id": "For-Sass",
        "title": "For Sass",
        "length": 8
      },
      {
        "indent": 1,
        "id": "Manually",
        "title": "Manually",
        "length": 8
      },
      {
        "indent": 0,
        "id": "Conclusion",
        "title": "Conclusion",
        "length": 10
      }
    ],
    "seriesIndex": 0
  },
  "deep-dive-into-preact-source-code": {
    "cover_image": "media/deep-dive-preact-source--cover.jpg",
    "title": "The Zen of Preact's source code",
    "date": "2021-04-30T18:30:00.000Z",
    "description": "Dive into Preact's source code and explore its simplicity",
    "body": "<p><img src=\"\" alt=\"Cover image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 75%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/deep-dive-preact-source--cover/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/deep-dive-preact-source--cover/small.jpg\">\n      <img alt=\"Cover image\" data-src=\"../media/deep-dive-preact-source--cover/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p><em>Artwork by <a href=\"https://unsplash.com/photos/GxymWkdnl4Y\" target=\"_blank\" rel=\"noopener\">Fernando Jorge</a></em></p>\n</blockquote>\n<p>Preact is [web dev]household name at this point. Almost every web developer who's been in this business for longer than 2 years has heard of it and maybe even tried it themselves. And probably reached the same conclusion as me: <strong>It's awesome!! <img class=\"emoji\" draggable=\"false\" alt=\"😻\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f63b.svg\"></strong>.</p>\n<p>So today, I'm gonna do a deep dive into Preact's source code, and remark on some interesting things I find there.</p>\n<h1 id=\"What-is-Preact\"><a class=\"heading-link\" href=\"#What-is-Preact\">#</a>What is Preact?</h1>\n<p>In case you're not familiar, Preact is the <code>3KB</code> alternative to the <code>42KB</code> of React, by <a href=\"https://twitter.com/_developit\" target=\"_blank\" rel=\"noopener\">Jason Miller</a>. It's fully compatible with React's API and supports all packages that rely on React. Its awesome that way.</p>\n<h1 id=\"Observations\"><a class=\"heading-link\" href=\"#Observations\">#</a>Observations</h1>\n<p>Before we look at the code, I'll remark on some things about Preact.</p>\n<h2 id=\"Written-in-TypeScript-but-not-quite...\"><a class=\"heading-link\" href=\"#Written-in-TypeScript-but-not-quite...\">#</a>Written in TypeScript, but not quite...</h2>\n<p>Preact's source code is written in TypeScript, but the main files themselves aren't. The main files with the functionality are written in plain JavaScript, but they use <code>JSDoc</code> to pull in Types from TypeScript Definition files (.d.ts).</p>\n<p>An example:</p>\n<p>This is the <code>types.d.ts</code> file:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> type</span><span style=\"color:#FFCB6B\"> RenamedType</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> null</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And here's the JS file</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./types').RenamedType</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> a</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./types').RenamedType</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> b</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">returns</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> sum</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> b</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> b</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, the JavaScript code is just that: JavaScript. You won't see TypeScript style type specified in it. Rather all type information is specified in comments, which are ignored completely. There's a whole article about <a href=\"https://puruvj.dev/blog/get-to-know-typescript--using-typescript-without-typescript\" target=\"_blank\" rel=\"noopener\">Using TypeScript without TypeScript</a>, but the TLDR; here would be: Avoid development time tooling. If its just plain JS, you don't need to run a file watcher to transpile files as you change them. Just run what you got. And you already got a TypeScript compiler running all the time without you explicitly running it: Your VSCode.</p>\n<p>This is a very interesting approach and I see more and more libraries take it up, especially non-UI libraries(For UI libraries, you already got a web server running, so adding in TypeScript in the tooling won't change much, go ahead and add TypeScript)</p>\n<h2 id=\"Very-well-written-code\"><a class=\"heading-link\" href=\"#Very-well-written-code\">#</a>Very well written code</h2>\n<p>I don't need to say this out loud really, but Preact's source code is very very well written and commented, as you'd expect from such a paramount framework.</p>\n<h2 id=\"It-reuses-itself-a-lot\"><a class=\"heading-link\" href=\"#It-reuses-itself-a-lot\">#</a>It reuses itself a lot</h2>\n<p>Yup. One of the reasons Preact is so small is that it reuses it's own exported function in its other exported functions. A LOTT!! I'll show you some places where this happens</p>\n<h1 id=\"Disclaimer\"><a class=\"heading-link\" href=\"#Disclaimer\">#</a>Disclaimer</h1>\n<p>This is not gonna be a complete breakdown, and won't be sequential. Preact is quite a big library to cover in a blog post, so I'll just cover the interesting parts.</p>\n<p>So, let's begin!! We'll look at some interesting things in the <code>core</code> module(i.e., the one when you type <code>import {} from 'preact'</code>), then we'll get to hooks</p>\n<h1 id=\"Core-module\"><a class=\"heading-link\" href=\"#Core-module\">#</a>Core module</h1>\n<h2 id=\"index.js\"><a class=\"heading-link\" href=\"#index.js\">#</a>index.js</h2>\n<p>As is the tradition, let's start with the <code>index.js</code> file:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> render</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> hydrate</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./render</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  createElement</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  createElement</span><span style=\"color:#89DDFF;font-style:italic\"> as</span><span style=\"color:#BABED8\"> h</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Fragment</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  createRef</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  isValidElement</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./create-element</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> Component</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./component</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> cloneElement</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./clone-element</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> createContext</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./create-context</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> toChildArray</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./diff/children</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#89DDFF;font-style:italic\"> default</span><span style=\"color:#89DDFF;font-style:italic\"> as</span><span style=\"color:#BABED8\"> options</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./options</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Notable points: <code>h</code>, which is Preact's JSX factory, is actually named <code>createElement</code>. Just like <code>React.createElement</code>. But is exported as <code>h</code> because it allows you to write raw Preact(Without JSX), also because it was initially inspired from <a href=\"https://github.com/hyperhype/hyperscript\" target=\"_blank\" rel=\"noopener\">HyperScript</a> <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#82AAFF\">h</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">div</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#F07178\"> class</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">haha</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> },</span><span style=\"color:#82AAFF\"> h</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">span</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#F07178\"> key</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 34</span><span style=\"color:#89DDFF\"> },</span><span style=\"color:#82AAFF\"> h</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">h1</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {},</span><span style=\"color:#82AAFF\"> h</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">span</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {},</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Whoa</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">))))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Also it is notable that it exports <code>createElement</code> as it is too, to maintain compatibility with <code>React.createElement</code></p>\n<h2 id=\"create-element.js\"><a class=\"heading-link\" href=\"#create-element.js\">#</a>create-element.js</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#BABED8\"> options </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./options</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> createElement</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">type</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> props</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> children</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /*...*/</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> createVNode</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">type</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> props</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> key</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> ref</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> original</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /*...*/</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> createRef</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#F07178\"> current</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> Fragment</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">props</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">children</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> isValidElement </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">vnode</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> vnode </span><span style=\"color:#89DDFF\">!=</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#BABED8\"> vnode</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">constructor </span><span style=\"color:#89DDFF\">===</span><span style=\"color:#89DDFF\"> undefined;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>Omitted <code>createElement</code> and <code>createVNode</code> as they're quite big.</p>\n</blockquote>\n<h3 id=\"createRef\"><a class=\"heading-link\" href=\"#createRef\">#</a>createRef</h3>\n<p>Let me blow your mind. <code>ref</code>s in P/React are basically used to encapsulate values that shouldn't trigger re-renders and are not re-created on every re-render. Lets see how Preact defines it:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> createRef</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#F07178\"> current</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>A ref is just an object with <code>current</code> property set to <code>null</code>. It's always advertised as that, but I never thought that it's <strong>actually</strong> an object internally too.</p>\n<p>A little clip of me when I found this out <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Astonished\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/deep-dive-preact-source--astonished-cat/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/deep-dive-preact-source--astonished-cat.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h3 id=\"Fragment\"><a class=\"heading-link\" href=\"#Fragment\">#</a>Fragment</h3>\n<p>Next up, we have <code>Fragment</code>. Its also another astonishing thing.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> Fragment</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">props</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">children</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Fragment, just returns its <code>children</code>. That's all! <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"></p>\n<p>I knew that's what it's <strong>supposed</strong> to do, but I always pictured some complex code. Didn't realise that it was just this super simple thing.</p>\n<h3 id=\"isValidElement\"><a class=\"heading-link\" href=\"#isValidElement\">#</a>isValidElement</h3>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * Check if a the argument is a valid Preact VNode.</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">*</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> vnode</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">returns</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">vnode is import('./internal').VNode</span><span style=\"color:#89DDFF;font-style:italic\">}</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> isValidElement </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">vnode</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> vnode </span><span style=\"color:#89DDFF\">!=</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#BABED8\"> vnode</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">constructor </span><span style=\"color:#89DDFF\">===</span><span style=\"color:#89DDFF\"> undefined;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Simply checking if the current Virtual DOM Node passed to it is valid or not. Again, one liner, super small, but here's a pattern I found out by looking at this code only. Notice <code>@returns {vnode is import('./internal').VNode}</code> in JSDoc. The code is basically using type guards. Right in the JSDoc. I haven't seen this pattern before, which is all the more proof that reading code written by those smarter than you can make you a better dev.</p>\n<h2 id=\"render.js\"><a class=\"heading-link\" href=\"#render.js\">#</a>render.js</h2>\n<p>Remember the index.jsx file, where you initialize your <mark>Preact</mark> app</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> render</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> h</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">preact</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#BABED8\"> App </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./App</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">render</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">App</span><span style=\"color:#89DDFF\"> /&gt;,</span><span style=\"color:#BABED8\"> document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#app</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is the <code>render</code> function <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> render</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">vnode</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> parentDom</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> replaceNode</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">options</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_root</span><span style=\"color:#F07178\">) </span><span style=\"color:#BABED8\">options</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">_root</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">vnode</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> parentDom</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // hydration mode or not by passing the `hydrate` function instead of a DOM</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // element..</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> isHydrating</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> typeof</span><span style=\"color:#BABED8\"> replaceNode</span><span style=\"color:#89DDFF\"> ===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">function</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // To be able to support calling `render()` multiple times on the same</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // DOM node, we need to obtain a reference to the previous tree. We do</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // this by assigning a new `_children` property to DOM nodes which points</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // to the last rendered tree. By default this property is not present, which</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // means that we are mounting a new tree for the first time.</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> oldVNode</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> isHydrating</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#89DDFF\"> :</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">replaceNode</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#BABED8\"> replaceNode</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_children</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">||</span><span style=\"color:#BABED8\"> parentDom</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_children</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  vnode</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F07178\"> ((</span><span style=\"color:#89DDFF\">!</span><span style=\"color:#BABED8\">isHydrating</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#BABED8\"> replaceNode</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">||</span><span style=\"color:#BABED8\"> parentDom</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_children</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> createElement</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">Fragment</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> null,</span><span style=\"color:#F07178\"> [</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    vnode</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  ])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // List of effects that need to be called after diffing.</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> commitQueue</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F07178\"> []</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  diff</span><span style=\"color:#F07178\">(</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    parentDom</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Determine the new vnode tree and store it on the DOM element on</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // our custom `_children` property.</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    vnode</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    oldVNode</span><span style=\"color:#89DDFF\"> ||</span><span style=\"color:#BABED8\"> EMPTY_OBJ</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    EMPTY_OBJ</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    parentDom</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">ownerSVGElement</span><span style=\"color:#89DDFF\"> !==</span><span style=\"color:#89DDFF\"> undefined,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    !</span><span style=\"color:#BABED8\">isHydrating</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#BABED8\"> replaceNode</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      ?</span><span style=\"color:#F07178\"> [</span><span style=\"color:#BABED8\">replaceNode</span><span style=\"color:#F07178\">]</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      :</span><span style=\"color:#BABED8\"> oldVNode</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      ?</span><span style=\"color:#89DDFF\"> null</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      :</span><span style=\"color:#BABED8\"> parentDom</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">firstChild</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      ?</span><span style=\"color:#BABED8\"> EMPTY_ARR</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">slice</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">call</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">parentDom</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">childNodes</span><span style=\"color:#F07178\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      :</span><span style=\"color:#89DDFF\"> null,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    commitQueue</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    !</span><span style=\"color:#BABED8\">isHydrating</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#BABED8\"> replaceNode</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#BABED8\"> replaceNode</span><span style=\"color:#89DDFF\"> :</span><span style=\"color:#BABED8\"> oldVNode</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#BABED8\"> oldVNode</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_dom</span><span style=\"color:#89DDFF\"> :</span><span style=\"color:#BABED8\"> parentDom</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">firstChild</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    isHydrating</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Flush all queued effects</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  commitRoot</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">commitQueue</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> vnode</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> hydrate</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">vnode</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> parentDom</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  render</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">vnode</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> parentDom</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> hydrate</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>First off, <strong>very well commented</strong>.</p>\n<p>From how well I can make sense of the situation here, <code>render</code> function is basically making a <code>commitQueue</code> to store all the changes needed to be done. next, the <code>diff</code> function is taking in the old VNode and the new VNode, making sense of situation and figuring out which DOM Nodes need to be updated, and populating <code>commitQueue</code>.</p>\n<p>Then its basically <code>committing</code> these changes. Its just like how we do it in Database. We perform some operation in batch, the commit, so they all get applied one by one at the same time.</p>\n<blockquote>\n<p>I would love to cover <code>diff</code> in the blog post too, but its so big it has its own <strong>500 lines</strong> long file <img class=\"emoji\" draggable=\"false\" alt=\"😵\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f635.svg\">. All you have to know, its job is to figure out which DOM Nodes need to be updated and which to keep the same.</p>\n</blockquote>\n<h3 id=\"hydrate\"><a class=\"heading-link\" href=\"#hydrate\">#</a>hydrate</h3>\n<p>This function is very interesting, as it nothing but calling the <code>render</code> function. But something even more interesting, its passing along <strong>itself</strong> as the 3rd argument. And if you look again at <code>render</code> function, it actually has an if condition looking if the function passed to it is named <code>hydrate</code>. Heck there's even a comment about <code>abusing</code> the 3rd argument <img class=\"emoji\" draggable=\"false\" alt=\"😂\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f602.svg\">. These people are way too smart!!</p>\n<p>I'm probably exhausting my repeat limit, but darn!! Preact's reuse of itself is really, darn good!!!</p>\n<h2 id=\"create-context.js\"><a class=\"heading-link\" href=\"#create-context.js\">#</a>create-context.js</h2>\n<p>This one will probably excite you, as Context is a very, very loved API by a majority of P/React developers. This wasn't always the case, but the <code>useContext</code> hooks made it very easy to use context. Way too easy!!</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> lemonsCount</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setLemonsCount </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useContext</span><span style=\"color:#BABED8\">(lemonsContext)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> enqueueRender</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./component</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> let</span><span style=\"color:#BABED8\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> createContext</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">defaultValue</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> contextId</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  contextId</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">__cC</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> i</span><span style=\"color:#89DDFF\">++;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> context</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    _id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> contextId</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    _defaultValue</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> defaultValue</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./internal').FunctionComponent</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    Consumer</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">props</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> contextValue</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      return</span><span style=\"color:#BABED8\"> props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">children</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">contextValue</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    },</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./internal').FunctionComponent</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    Provider</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">props</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">!this.</span><span style=\"color:#BABED8\">getChildContext</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">        let</span><span style=\"color:#BABED8\"> subs</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F07178\"> []</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">        let</span><span style=\"color:#BABED8\"> ctx</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">        ctx</span><span style=\"color:#F07178\">[</span><span style=\"color:#BABED8\">contextId</span><span style=\"color:#F07178\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> this;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        this.</span><span style=\"color:#82AAFF\">getChildContext</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> ctx</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        this.</span><span style=\"color:#82AAFF\">shouldComponentUpdate</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">_props</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">          if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">this.</span><span style=\"color:#BABED8\">props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\"> !==</span><span style=\"color:#BABED8\"> _props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">            subs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">some</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">enqueueRender</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        this.</span><span style=\"color:#82AAFF\">sub</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">c</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">          subs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">push</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">c</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">          let</span><span style=\"color:#BABED8\"> old</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> c</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">componentWillUnmount</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">          c</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">componentWillUnmount</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">            subs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">splice</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">subs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">indexOf</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">c</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 1</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">            if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">old</span><span style=\"color:#F07178\">) </span><span style=\"color:#BABED8\">old</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">call</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">c</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          };</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        };</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      return</span><span style=\"color:#BABED8\"> props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">children</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    },</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Devtools needs access to the context object when it</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // encounters a Provider. This is necessary to support</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // setting `displayName` on the context object instead</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // of on the component itself. See:</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // https://reactjs.org/docs/context.html#contextdisplayname</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">context</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">Provider</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_contextRef</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> context</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">Consumer</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">contextType</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> context</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This file, this small file, is all there's to the core context API. These 42 lines do so much(Comments excluded).</p>\n<p>So, let's inspect <code>Consumer</code>. Go back a long time back and remember we used to use <code>Consumer</code> to access context data.</p>\n<p>This is how it looks</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">Consumer</span><span style=\"color:#89DDFF\">&gt;{(</span><span style=\"color:#BABED8;font-style:italic\">data</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#F07178\">div</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#BABED8\">Hello </span><span style=\"color:#89DDFF\">{</span><span style=\"color:#BABED8\">data</span><span style=\"color:#89DDFF\">}&lt;/</span><span style=\"color:#F07178\">div</span><span style=\"color:#89DDFF\">&gt;}&lt;/</span><span style=\"color:#FFCB6B\">Consumer</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This looks pretty manageable, but it could get worse when your code grew.</p>\n<p>So, if we look at the code of <code>Consumer</code>, it's just this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#82AAFF\">Consumer</span><span style=\"color:#BABED8\">(props</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> contextValue) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">children</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">contextValue</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">},</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That's it!! Its expecting its <code>children</code> to be a function, and it's simply calling it with the context data. Suddenly the <code>Consumer</code> pattern example above makes sense <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\">.</p>\n<p>As for <code>Provider</code>, what it's doing mostly is modifying its parent component's lifecycle hooks to watch for context state changes.</p>\n<p>Lastly, there's the <code>return</code> statement at the bottom. The last line is big mutation trick that is used often while coding classical languages like C, C++, Java etc, that is, returning a variable and mutating it at the same time. Here, it is mutating it for the sake of Preact devtools, so as to show the <code>displayName</code> in devtools, as React Devtools do.</p>\n<p>And now, its time for the section you probably came here for entirely: <strong>HOOKS!!</strong></p>\n<h1 id=\"Hooks\"><a class=\"heading-link\" href=\"#Hooks\">#</a>Hooks</h1>\n<p>So, first off, Hooks are located in a separate directory. Unlike React, everything is opt-in in Preact, which makes the Minimalist in me rejoice. There's intentionality in every thing you do here. I <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"> that.</p>\n<p>So, let's start off with the very, very first hook you ever encountered: <code>useState</code></p>\n<blockquote>\n<p>But Beware, a twist lies here <img class=\"emoji\" draggable=\"false\" alt=\"😈\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f608.svg\"></p>\n</blockquote>\n<h2 id=\"useState\"><a class=\"heading-link\" href=\"#useState\">#</a>useState</h2>\n<p>This, is <code>useState</code>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">initialState</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  currentHook</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#82AAFF\"> useReducer</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">invokeOrReturn</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> initialState</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><img src=\"\" alt=\"Wait, what!?!?\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/deep-dive-preact-source--wait-what/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/deep-dive-preact-source--wait-what.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Mindblown right? As you can see, useState is basically calling <code>useReducer</code>, which is another standard React hook. So basically, <code>useState</code> is just an alias of <code>useReducer</code>, you could say.</p>\n<blockquote>\n<p>The variables <code>invokeOrReturn</code> and <code>currentHook</code> are defined in the same file, in the module scope and managed by Preact.</p>\n</blockquote>\n<p>And lemme give you another nugget. See the <code>currentHook = 1</code> expression? Guess what: It's not needed in the core functionality. It exists solely for <mark>Preact Devtools</mark>. That is, if Devtools weren't a consideration, this code might as well have been:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> useState </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">initialState</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> useReducer</span><span style=\"color:#BABED8\">(invokeOrReturn</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> initialState)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Literally a one liner!! <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"></p>\n<p>Again, intense focus on the whole self-reusing thing I keep repeating.</p>\n<p>All the heavy lifting here is done by the <code>useReducer</code>, so let's look at it next.</p>\n<h2 id=\"useReducer\"><a class=\"heading-link\" href=\"#useReducer\">#</a>useReducer</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useReducer</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">reducer</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> initialState</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> init</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./internal').ReducerHookState</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> hookState</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> getHookState</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentIndex</span><span style=\"color:#89DDFF\">++,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_reducer</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> reducer</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">!</span><span style=\"color:#BABED8\">hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_component</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F07178\"> [</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      !</span><span style=\"color:#BABED8\">init</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#82AAFF\"> invokeOrReturn</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">undefined,</span><span style=\"color:#BABED8\"> initialState</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> init</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">initialState</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      (</span><span style=\"color:#BABED8;font-style:italic\">action</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">        const</span><span style=\"color:#BABED8\"> nextValue</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">_reducer</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#F07178\">[</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> action</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">        if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#F07178\">[</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#F07178\">] </span><span style=\"color:#89DDFF\">!==</span><span style=\"color:#BABED8\"> nextValue</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">          hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F07178\"> [</span><span style=\"color:#BABED8\">nextValue</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#F07178\">[</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#F07178\">]]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">          hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_component</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">setState</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">{}</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      },</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    ]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_component</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> currentComponent</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> hookState</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I'll admit I don't fully understand what's going on here <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">, but something that caught my eye here: Look at the <code>hookState._value = [</code> declaration inside the <code>if</code> block. Its an array with 2 elements. 1st element is simply a value. 2nd one is a function.</p>\n<p>Wait a sec. 1st element a value, 2nd element a function...</p>\n<p>Holy smokes!!! Its the <code>[state, setState]</code> pair returned from <code>useState</code> <img class=\"emoji\" draggable=\"false\" alt=\"😵\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f635.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"😵\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f635.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setState</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">Infinity</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // <img class=\"emoji\" draggable=\"false\" alt=\"😈\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f608.svg\"></span></span>\n<span class=\"line\"></span></code></pre>\n<p>if that didn't blow your brains apart, I dunno what will.</p>\n<p>Next up: The 2nd most famous hook!</p>\n<h2 id=\"useEffect\"><a class=\"heading-link\" href=\"#useEffect\">#</a>useEffect</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useEffect</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">callback</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> args</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./internal').EffectHookState</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> state</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> getHookState</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentIndex</span><span style=\"color:#89DDFF\">++,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">!</span><span style=\"color:#BABED8\">options</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_skipEffects</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#82AAFF\"> argsChanged</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_args</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> args</span><span style=\"color:#F07178\">)) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> callback</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_args</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> args</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    currentComponent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">__hooks</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_pendingEffects</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">push</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">state</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Aha!!! Notice the <code>if</code> block here. We're checking for 2 things.</p>\n<p><code>!options._skipEffects</code> - Preact has an options config, where you can turn off all side effects from running. So to run this <code>useEffect</code>, we have to make sure its safe to run effects.</p>\n<ol start=\"2\">\n<li><code>argsChanged(state._args, args)</code>: This one is very interesting. Remember the 2nd argument you pass to <code>useEffect</code>?</li>\n</ol>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#82AAFF\">useEffect</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /* Do epic shit */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">},</span><span style=\"color:#BABED8\"> [emojiUpdated])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Guess what, <code>argsChanged</code> is the function responsible for checking if changes were made in the dependencies passed to <code>useEffect</code>. Here, we pass it <code>state._args</code>, the argument list maintained by Preact for this specific hook, and the 2nd argument is the new set of dependencies. If any changes are detected, this function returns true, and the effect is run again.</p>\n<p>As for <code>argsChanged</code> function, its simply this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> argsChanged</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">oldArgs</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> newArgs</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#F07178\"> (</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    !</span><span style=\"color:#BABED8\">oldArgs</span><span style=\"color:#89DDFF\"> ||</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    oldArgs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">length</span><span style=\"color:#89DDFF\"> !==</span><span style=\"color:#BABED8\"> newArgs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">length</span><span style=\"color:#89DDFF\"> ||</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    newArgs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">some</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">arg</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> index</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> arg</span><span style=\"color:#89DDFF\"> !==</span><span style=\"color:#BABED8\"> oldArgs</span><span style=\"color:#F07178\">[</span><span style=\"color:#BABED8\">index</span><span style=\"color:#F07178\">])</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Its basically checking if oldArgs even exist or not at first. Why?</p>\n<p>Cuz the dependency list passed to <code>useEffect</code> itself could be a state holding an array.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">deps</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setDeps</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#BABED8\">([])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">useEffect</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /* Do epic shit */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">},</span><span style=\"color:#BABED8\"> deps)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>OFC, a simple reason could be that you didn't pass the array. That is what most people would do rather than this above method <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">.</p>\n<p>2nd, its checking if argument list length is different or not. This is a smart move, because if the array size itself is changed, you don't need to go through and check every value.</p>\n<blockquote>\n<p>The cheapest function call is the one you never make ~~ <mark>Jason Miller</mark></p>\n</blockquote>\n<p>And finally, when all these conditions are true, we finally check if the values match up using the <code>arr.some</code> method.</p>\n<p>From what I can tell, this function is written in a way to stop as soon as it can. You could've written this same function in a way that it would do all these things, <strong>and then</strong> tell the result. Here, through some clever <mark>short circuiting </mark>, they made this function pretty efficient.</p>\n<h2 id=\"useLayoutEffect\"><a class=\"heading-link\" href=\"#useLayoutEffect\">#</a>useLayoutEffect</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useLayoutEffect</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">callback</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> args</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./internal').EffectHookState</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> state</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> getHookState</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentIndex</span><span style=\"color:#89DDFF\">++,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">!</span><span style=\"color:#BABED8\">options</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_skipEffects</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#82AAFF\"> argsChanged</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_args</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> args</span><span style=\"color:#F07178\">)) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> callback</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_args</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> args</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    currentComponent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_renderCallbacks</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">push</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">state</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This hook is very, very interesting. If you read the code of <code>useEffect</code>, you'll find that they are exactly the same, except for the very last line.</p>\n<p>In <code>useEffect</code>, it is <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">currentComponent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">__hooks</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_pendingEffects</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">push</span><span style=\"color:#BABED8\">(state)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Whereas here it is <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">currentComponent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_renderCallbacks</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">push</span><span style=\"color:#BABED8\">(state)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In <code>useEffect</code>, the effects to executed are pushed to a queue that executes asynchronously.</p>\n<p>Whereas in <code>useLayoutEffect</code>, the effects are pushed to the <code>render</code> callbacks, making it execute eagerly, as the rendering is going on. That's why its called use<strong>Layout</strong>Effect.</p>\n<p>Next up, is another hook that will blow your mind and change the way you write your <code>Ref</code>s. Yepp, you guessed it right, its <code>useRef</code> <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></p>\n<h2 id=\"useRef\"><a class=\"heading-link\" href=\"#useRef\">#</a>useRef <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></h2>\n<blockquote>\n<p>This hook's implementation is so cool that I can't help but put the Sunglasses emoji in front of it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\"></p>\n</blockquote>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useRef</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">initialValue</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  currentHook</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#82AAFF\"> useMemo</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">{</span><span style=\"color:#F07178\"> current</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> initialValue</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> [])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you notice, <code>useRef</code> is just <code>useMemo</code> in disguise, with an object that has one property: <code>current</code> with value null.</p>\n<p>So, effectively, you could write your refs as memos</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> containerElementRef </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> useMemo</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> (</span><span style=\"color:#89DDFF\">{</span><span style=\"color:#F07178\"> current</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> [])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Don't take this too seriously though. Its better if element refs are assigned to proper <code>useRef</code> values only, as it is cleaner, the syntax is built around it.</p>\n<p>What I wanna point at is, is that a lot of people, especially beginners, equate <code>Ref</code> as the thing that holds DOM references, and that's all it do. Which is not a good thing really.</p>\n<p>But when you look at this code and realise that the Ref is just a value that's cached for the lifecycle of the component, clarity sinks in. The mental block and the sense of magic goes away, and you feel fully in control.</p>\n<h2 id=\"useCallback\"><a class=\"heading-link\" href=\"#useCallback\">#</a>useCallback</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useCallback</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">callback</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> args</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  currentHook</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 8</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#82AAFF\"> useMemo</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> callback</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> args</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And here's another hook that's just <code>useMemo</code> under the hood. This gives me the lols <img class=\"emoji\" draggable=\"false\" alt=\"😂\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f602.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"😂\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f602.svg\">. At this point, I'm simply giggling silently seeing that everything in Preact hooks is just <code>useMemo</code>.</p>\n<p><img src=\"\" alt=\"Astronaut at gunpoint: So its all just useMemo...? Astronaut with gun: Always has been\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.166666666666664%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/deep-dive-preact-source--always-has-been-meme/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/deep-dive-preact-source--always-has-been-meme/small.jpg\">\n      <img alt=\"Astronaut at gunpoint: So its all just useMemo...? Astronaut with gun: Always has been\" data-src=\"../media/deep-dive-preact-source--always-has-been-meme/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<h2 id=\"useMemo\"><a class=\"heading-link\" href=\"#useMemo\">#</a>useMemo</h2>\n<p>Ahh, the star of the show, <code>useMemo</code>!!<img class=\"emoji\" draggable=\"false\" alt=\"🤩\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f929.svg\"> Finally!</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useMemo</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">factory</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> args</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./internal').MemoHookState</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> state</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> getHookState</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentIndex</span><span style=\"color:#89DDFF\">++,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#82AAFF\">argsChanged</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_args</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> args</span><span style=\"color:#F07178\">)) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> factory</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_args</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> args</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_factory</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> factory</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This one is pretty simple. Get the state for this specific hook, compare the previous dependencies to the new and update values and factory function passed to it if anything changes.</p>\n<p>And this again is so small, it makes me laugh as well as cry. Seriously, going through this codebase gives me huge imposter syndrome everytime. The architecture is so damn well done that code duplication isn't needed anywhere here, so everything is super small. Well done Preacters <img class=\"emoji\" draggable=\"false\" alt=\"🥲\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f972.svg\"></p>\n<h2 id=\"useContext\"><a class=\"heading-link\" href=\"#useContext\">#</a>useContext</h2>\n<p>One of the most favorite hooks of all time, <code>useContext</code> <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useContext</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">context</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> provider</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> currentComponent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">context</span><span style=\"color:#F07178\">[</span><span style=\"color:#BABED8\">context</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_id</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // We could skip this call here, but than we'd not call</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // `options._hook`. We need to do that in order to make</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // the devtools aware of this hook.</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./internal').ContextHookState</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> state</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> getHookState</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentIndex</span><span style=\"color:#89DDFF\">++,</span><span style=\"color:#F78C6C\"> 9</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // The devtools needs access to the context object to</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // be able to pull of the default value when no provider</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // is present in the tree.</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_context</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> context</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">!</span><span style=\"color:#BABED8\">provider</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">return</span><span style=\"color:#BABED8\"> context</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_defaultValue</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // This is probably not safe to convert to \"!\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> ==</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9CAC\"> true</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    provider</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">sub</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentComponent</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> provider</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Lots of comments here. If I remove all of them</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useContext</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">context</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> provider</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> currentComponent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">context</span><span style=\"color:#F07178\">[</span><span style=\"color:#BABED8\">context</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_id</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> state</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> getHookState</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentIndex</span><span style=\"color:#89DDFF\">++,</span><span style=\"color:#F78C6C\"> 9</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_context</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> context</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">!</span><span style=\"color:#BABED8\">provider</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">return</span><span style=\"color:#BABED8\"> context</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_defaultValue</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> ==</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9CAC\"> true</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    provider</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">sub</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentComponent</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> provider</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">props</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Are you kidding me!?!? Just 7 lines in the body, and you have the biggest simplification that came when React hooks launched. What sorcery is this!! <img class=\"emoji\" draggable=\"false\" alt=\"😑\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f611.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"😑\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f611.svg\"></p>\n<p>Notable points here: If no provider is detected, it returns a default value, thanks to that 1 liner if statement. And if no value is found here, preact subscribes the current component to the context.</p>\n<h2 id=\"useErrorBoundary\"><a class=\"heading-link\" href=\"#useErrorBoundary\">#</a>useErrorBoundary</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useErrorBoundary</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">cb</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./internal').ErrorBoundaryHookState</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> state</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> getHookState</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">currentIndex</span><span style=\"color:#89DDFF\">++,</span><span style=\"color:#F78C6C\"> 10</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> errState</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> cb</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#89DDFF\">!</span><span style=\"color:#BABED8\">currentComponent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">componentDidCatch</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    currentComponent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">componentDidCatch</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">_value</span><span style=\"color:#F07178\">) </span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">_value</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">      errState</span><span style=\"color:#F07178\">[</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#F07178\">](</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    };</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#F07178\"> [</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    errState</span><span style=\"color:#F07178\">[</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">      errState</span><span style=\"color:#F07178\">[</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#F07178\">](</span><span style=\"color:#89DDFF\">undefined</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    },</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  ]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I'm a huge, huge fan of <mark>Preact</mark> for providing a <code>useErrorBoundary</code> hook. In React, if you want error boundaries, you have to create a class component yourself and set at the root of your component tree. Whereas it ships by default in Preact, which makes my heart flutter <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\"></p>\n<p>Notable points here: This hook mostly sets the <code>componentDidCatch</code> lifecycle to catch the errors and do what you tell this hook to do. Its more or less same as you yourself making a class component, only you don't have to nest anything here, just drop this hook in any component thats on top of the component tree.</p>\n<p>That's it for hooks. I didn't cover <code>useDebugValue</code> and <code>useImperativeHandle</code>, as I have never had to use <code>useDebugValue</code>, and <code>useImperativeHandle</code> is deemed unsafe to use ¯\\_(ツ)_/¯</p>\n<h1 id=\"A-note-on-simplicity\"><a class=\"heading-link\" href=\"#A-note-on-simplicity\">#</a>A note on simplicity</h1>\n<p>Notice how I've been saying the code is super simple. Well, it is super easy to read, because that's how simple it is, but writing it is hard. Simplicity is rarely easy, its always harder to achieve. Writing a good, emotional rollercoaster in 100 words is hard. Throwing out excessive clothes is hard. Having a clean desk is harder than a cluttered desk.</p>\n<p>And making 3KB code for what was originally 42KB is hard.</p>\n<blockquote>\n<p>Subtraction is harder than addition, division is harder than multiplication.</p>\n</blockquote>\n<p>Making Preact by no means would've been an easy task, but Jason did it amazingly, and all the contributors that jumped in later made it even greater, while still keeping everything small and simpler. This is a monumental task. Hats off to the Preact team for this effort</p>\n<p><img src=\"\" alt=\"Hats off!!\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/deep-dive-preact-source--katniss-salute/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/deep-dive-preact-source--katniss-salute.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>This is it for today!</p>\n<p>Signing off!!</p>\n",
    "id": "deep-dive-into-preact-source-code",
    "reading_time": 15.67,
    "toc": [
      {
        "indent": 0,
        "id": "What-is-Preact",
        "title": "What is Preact?",
        "length": 15
      },
      {
        "indent": 0,
        "id": "Observations",
        "title": "Observations",
        "length": 12
      },
      {
        "indent": 1,
        "id": "Written-in-TypeScript-but-not-quite...",
        "title": "Written in TypeScript, but not quite...",
        "length": 39
      },
      {
        "indent": 1,
        "id": "Very-well-written-code",
        "title": "Very well written code",
        "length": 22
      },
      {
        "indent": 1,
        "id": "It-reuses-itself-a-lot",
        "title": "It reuses itself a lot",
        "length": 22
      },
      {
        "indent": 0,
        "id": "Disclaimer",
        "title": "Disclaimer",
        "length": 10
      },
      {
        "indent": 0,
        "id": "Core-module",
        "title": "Core module",
        "length": 11
      },
      {
        "indent": 1,
        "id": "index.js",
        "title": "index.js",
        "length": 8
      },
      {
        "indent": 1,
        "id": "create-element.js",
        "title": "create-element.js",
        "length": 17
      },
      {
        "indent": 2,
        "id": "createRef",
        "title": "createRef",
        "length": 9
      },
      {
        "indent": 2,
        "id": "Fragment",
        "title": "Fragment",
        "length": 8
      },
      {
        "indent": 2,
        "id": "isValidElement",
        "title": "isValidElement",
        "length": 14
      },
      {
        "indent": 1,
        "id": "render.js",
        "title": "render.js",
        "length": 9
      },
      {
        "indent": 2,
        "id": "hydrate",
        "title": "hydrate",
        "length": 7
      },
      {
        "indent": 1,
        "id": "create-context.js",
        "title": "create-context.js",
        "length": 17
      },
      {
        "indent": 0,
        "id": "Hooks",
        "title": "Hooks",
        "length": 5
      },
      {
        "indent": 1,
        "id": "useState",
        "title": "useState",
        "length": 8
      },
      {
        "indent": 1,
        "id": "useReducer",
        "title": "useReducer",
        "length": 10
      },
      {
        "indent": 1,
        "id": "useEffect",
        "title": "useEffect",
        "length": 9
      },
      {
        "indent": 1,
        "id": "useLayoutEffect",
        "title": "useLayoutEffect",
        "length": 15
      },
      {
        "indent": 1,
        "id": "useRef",
        "title": "useRef <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"/>",
        "length": 9
      },
      {
        "indent": 1,
        "id": "useCallback",
        "title": "useCallback",
        "length": 11
      },
      {
        "indent": 1,
        "id": "useMemo",
        "title": "useMemo",
        "length": 7
      },
      {
        "indent": 1,
        "id": "useContext",
        "title": "useContext",
        "length": 10
      },
      {
        "indent": 1,
        "id": "useErrorBoundary",
        "title": "useErrorBoundary",
        "length": 16
      },
      {
        "indent": 0,
        "id": "A-note-on-simplicity",
        "title": "A note on simplicity",
        "length": 20
      }
    ],
    "seriesIndex": 0
  },
  "move-to-css-modules-from-styled-components": {
    "cover_image": "media/why-move-styled-to-css-modules--cover.jpg",
    "title": "Why I moved from Styled Components to (S)CSS modules",
    "date": "2021-04-15T18:30:00.000Z",
    "description": "A little writeup of my reasons behind moving from Styled Components to SCSS modules, and the benefits I got out of this.",
    "body": "<p><img src=\"\" alt=\"Cover image - random colors splashing\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/why-move-styled-to-css-modules--cover/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/why-move-styled-to-css-modules--cover/small.jpg\">\n      <img alt=\"Cover image - random colors splashing\" data-src=\"../media/why-move-styled-to-css-modules--cover/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p>Artwork by <a href=\"https://unsplash.com/photos/wQLAGv4_OYs\" target=\"_blank\" rel=\"noopener\">Lucas Benjamin</a></p>\n</blockquote>\n<p>This blog post will be about my reasons to move from Styled Components to SCSS Modules. Its gonna be a raw and non-technical one (i.e., you probably won't learn anything new from it).</p>\n<h1 id=\"What-is-styled-components\"><a class=\"heading-link\" href=\"#What-is-styled-components\">#</a>What is styled-components?</h1>\n<p>Styled Components is a radical, new way of writing CSS for your React components. You can simply create components out of your styles</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> Main </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#FFCB6B\">HelloWorld</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#BABED8\">Hello World</span><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#FFCB6B\">HelloWorld</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> HelloWorld </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> styled</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">h1</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  font-weight: 700;</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  line-height: 1.618;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is a very, very convenient way of writing CSS. All your CSS lives in the same file as your main logic. It's ultimate <a href=\"https://kentcdodds.com/blog/colocation/\" target=\"_blank\" rel=\"noopener\">Colocation</a>. Plus if you're a freak about small components, this really enforces you to write small components, cuz the components grow large very quickly thanks to all 3 techs in a single file: HTML + CSS + TS(Yes, I'm one of those people who breath TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\">). So you kinda feel obligated to break your components into smaller pieces, which is ultimately good. Modularity is paramount.</p>\n<p><img src=\"\" alt=\"Hail modularity\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 41.41666666666667%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/why-move-styled-to-css-modules--hail-modules/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/why-move-styled-to-css-modules--hail-modules/small.jpg\">\n      <img alt=\"Hail modularity\" data-src=\"../media/why-move-styled-to-css-modules--hail-modules/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Its just like Svelte and Vue's SFCs. They figured it out correctly, while this makes me mad about React.</p>\n<p>Anyways, rant aside, this way of writing styles is really good, I can't insist enough. Need dynamic prop based styles? No worries, just pass props over to your styled component, and use it in there</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> Main </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#FFCB6B\">HelloWorld</span><span style=\"color:#C792EA\"> weight</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#F78C6C\">600</span><span style=\"color:#89DDFF\">}&gt;</span><span style=\"color:#BABED8\">Hello World</span><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#FFCB6B\">HelloWorld</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> HelloWorld </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> styled</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">h1</span><span style=\"color:#89DDFF\">&lt;{</span><span style=\"color:#F07178\"> weight</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> }&gt;</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  font-weight: </span><span style=\"color:#89DDFF\">${</span><span style=\"color:#89DDFF\">({</span><span style=\"color:#BABED8;font-style:italic\"> weight</span><span style=\"color:#89DDFF\"> })</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> weight</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">;</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  line-height: 1.618;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>Pardon the TypeScript code if you're not familiar with it or hate it. It can't be helped. Its part of my very being now <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f607.svg\">.</p>\n</blockquote>\n<p>And yes, it automatically does the scoping and vendor prefixing. vendor prefixing is runtime generated, that is it determines if the browser needs vendor prefixes, then it will churn out styles with vendor prefixes. Its like a sweet runtime PostCSS and Autoprefixer running in the browser.</p>\n<p>It makes stuff very very easy. But this is where it starts to go wrong if you don't fully understand how React and its rendering processes work.</p>\n<p><img src=\"\" alt=\"Here be dragons\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/why-move-styled-to-css-modules--here-be-dragons/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/why-move-styled-to-css-modules--here-be-dragons.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h1 id=\"What-are-CSS-Modules\"><a class=\"heading-link\" href=\"#What-are-CSS-Modules\">#</a>What are CSS Modules?</h1>\n<p>CSS Modules are a slightly-less radical way of writing CSS. Its basically separate CSS files, but only modular. Syntax remains the same mostly, but it's scoped to the components where it is used (By mangling class names). The general pattern of these is this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span>|-HelloWorld</span></span>\n<span class=\"line\"><span>  |-HelloWorld.tsx</span></span>\n<span class=\"line\"><span>  |-HelloWorld.module.css</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<blockquote>\n<p>Notice I use <code>.css</code> at the end. It could be <code>.scss</code> or <code>.less</code> or <code>.styl</code> too, you name it. I personally use SCSS modules.</p>\n</blockquote>\n<p>Notice that our CSS Module has in the name itself that its a module, <code>*.module.*</code>. Its a <mark>Convention over Configuration</mark> approach, very prevalent in futuristic bundlers like <a href=\"https://esbuild.github.io/\" target=\"_blank\" rel=\"noopener\">ESBuild</a>, <a href=\"https://vitejs.dev/\" target=\"_blank\" rel=\"noopener\">Vite</a>, <a href=\"https://www.snowpack.dev/\" target=\"_blank\" rel=\"noopener\">Snowpack</a>, etc.</p>\n<p>And to use them, you import the css file in JS, and refer to it like this.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#BABED8\"> css </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./HelloWorld.module.css</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> Main </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#F07178\">h1</span><span style=\"color:#C792EA\"> className</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">css</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">helloWorld</span><span style=\"color:#89DDFF\">}&gt;</span><span style=\"color:#BABED8\">Hello World</span><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">h1</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Meanwhile our CSS file:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/* HelloWorld.module.css */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">.</span><span style=\"color:#FFCB6B\">helloWorld</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  font-weight</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 700</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  line-height</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 1.618</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The generated CSS is something like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/* HelloWorld.module.css */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">.</span><span style=\"color:#FFCB6B\">__B56BLAH_helloWorld_4269BRUHBRUH</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  font-weight</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 700</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  line-height</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 1.618</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The className is mangled, and the value is substituted in place of <code>css.helloWorld</code> in our component.</p>\n<blockquote>\n<p>Alright I took some artistic liberty and added some weird Elon Musk-y stuff there. The actual mangled output would be much smaller and sane <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">.</p>\n</blockquote>\n<p>CSS modules are very handy for this. Plus you can add tooling like <code>autoprefixer</code> to add vendor prefixes, compile stuff back to old CSS for browser compatibility.</p>\n<h1 id=\"The-app-in-question\"><a class=\"heading-link\" href=\"#The-app-in-question\">#</a>The app in question</h1>\n<p>Now the intro is over, let's look at the app which I moved from Styled components to CSS modules. Let me introduce you to my baby, <a href=\"https://macos.now.sh\" target=\"_blank\" rel=\"noopener\">macos.now.sh</a>, a macOS Big Sur clone written In Preact, TypeScript and uses Vite as the bundler. Check it out, I think you'll like it (Tip: Just hover over the app dock at the bottom).</p>\n<p>Anyways, this whole app was written in Styled Components, until I threw it out of the 30+ components in favour of CSS Modules.</p>\n<h1 id=\"Why\"><a class=\"heading-link\" href=\"#Why\">#</a>Why? <img class=\"emoji\" draggable=\"false\" alt=\"🧐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f9d0.svg\"></h1>\n<p>The simple answer <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Why? Why shouldn't I not use CSS Modules\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 99.83333333333333%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/why-move-styled-to-css-modules--bilbo-keep-it-meme/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/why-move-styled-to-css-modules--bilbo-keep-it-meme/small.jpg\">\n      <img alt=\"Why? Why shouldn't I not use CSS Modules\" data-src=\"../media/why-move-styled-to-css-modules--bilbo-keep-it-meme/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Just kidding <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">. Here's a full technical explantion <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<h2 id=\"CSS-not-minified\"><a class=\"heading-link\" href=\"#CSS-not-minified\">#</a>CSS not minified</h2>\n<p>Take a look at this image <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Unmodified Styled Components\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.25%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/why-move-styled-to-css-modules--unmin-styled-comps-code/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/why-move-styled-to-css-modules--unmin-styled-comps-code/small.png\">\n      <img alt=\"Unmodified Styled Components\" data-src=\"../media/why-move-styled-to-css-modules--unmin-styled-comps-code/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>This the main production bundle of the app. As you can see, it's minified in some place, and not, in other places. You can see the unminified part is the <code>CSS</code> part. These are the styles I wrote as template literals(Or string literals, I mix both up <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">). As these aren't CSS to bundler's internal CSS minifier, it stays as it is, which is kinda bummer. I am a die-hard performance freak, and the 1st rule of performance on Web: Bundle and minify your resources. Make them as small as possible, then make them even smaller ¯\\_(ツ)_/¯.</p>\n<p>Seriously, you can check this file out right here: <a href=\"https://macos-web-fwyxhwxry-puruvj.vercel.app/assets/index.da0c587c.js\" target=\"_blank\" rel=\"noopener\">https://macos-web-fwyxhwxry-puruvj.vercel.app/assets/index.da0c587c.js</a></p>\n<h3 id=\"Why-not-use-the-babel-plugin\"><a class=\"heading-link\" href=\"#Why-not-use-the-babel-plugin\">#</a>Why not use the babel plugin? <img class=\"emoji\" draggable=\"false\" alt=\"🤨\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f928.svg\"></h3>\n<p>If you don't know, Styled Components has a Babel plugin for this purpose exactly, minifying the CSS inside the template literals, and its pretty decent.</p>\n<p>But it wasn't working for me.</p>\n<p>No literally, it wasn't <strong>working</strong> for me, as in I set up the babel plugin and did the correct config, installed the plugin, but no it wasn't working. Something was going wrong with Vite's plugin running. The plugin was working, as build times had increased a lot from before, but the output was still not minified. The same plugin worked perfectly in a <code>create-react-app</code> reproduction I created to check this.</p>\n<p>But anyways, even if this problem was solved, there's a bigger Elephant in the room</p>\n<h2 id=\"CSS-injected-by-JS\"><a class=\"heading-link\" href=\"#CSS-injected-by-JS\">#</a>CSS injected by JS</h2>\n<p>All of this CSS still lives in the JavaScript, and is only applied when JS is evaluated by the browser, and I'm pretty sure you know of this, <mark>JavaScript is HEAVY!!!</mark>. It takes quite some CPU power to parse it, and it's heavy on main thread. Our HTML being rendered by JS itself is pushing the limit, but rendering CSS using JS too? That's way too much load on the browser.</p>\n<p>Browsers have become amazingly efficient at parsing JS as well as rendering HTML and CSS, all in parallel. But JavaScript doing all the work, well, browsers still aren't that efficient at it(For good reason).</p>\n<p>If you want ultimate performance, CSS in separate files or inlined in style tag is the way too go. It doesn't get better than that.</p>\n<h2 id=\"Performance-had-become-important\"><a class=\"heading-link\" href=\"#Performance-had-become-important\">#</a>Performance had become important</h2>\n<p>When I started this project almost 6 months ago (November 2020), I made myself a little deal: Do not stress about the performance. Off course, at that time, Performance meant just lower bundle sizes, not runtime performance, cuz I really had never run into any runtime perf issues before. But this project is different in the sense that there's a lot going on. There are loads of <code>requestAnimationFrame</code>s, tons of component, lot of global state, and what not going on. And all of it is on the screen at once. You can't really lazy load much stuff, cuz almost everything is eagerly loaded.</p>\n<p>All of it was weighing down the runtime perf of the app. The dock animation was janky, the menus took a while to open up, theme switching was also noticeably janky. So I had to finally consider the runtime performance. And the most obvious choice was to start throwing out fancy stuff and move back to basics again.</p>\n<h1 id=\"Did-it-work\"><a class=\"heading-link\" href=\"#Did-it-work\">#</a>Did it work?</h1>\n<p>Absolutely!! The performance increased like crazy. Both runtime as well as bundle size.</p>\n<p>This is the compressed CSS file output. Its run through Autoprefixer for vendor styles, and Vite automatically puts it into a single CSS file, super compressed. Take a look yourself <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Optimized CSS Module file\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.25%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/why-move-styled-to-css-modules--optimised-css-modules/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/why-move-styled-to-css-modules--optimised-css-modules/small.png\">\n      <img alt=\"Optimized CSS Module file\" data-src=\"../media/why-move-styled-to-css-modules--optimised-css-modules/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>And here's the <code>index.js</code> <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Optimised JavaScript\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 52.583333333333336%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/why-move-styled-to-css-modules--optimised-js/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/why-move-styled-to-css-modules--optimised-js/small.png\">\n      <img alt=\"Optimised JavaScript\" data-src=\"../media/why-move-styled-to-css-modules--optimised-js/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Completely minified, JS lives in js files, CSS lives in its own file, and its all processed parallelly by the browser, styles aren't generated for every prop change like in styled components. Only the classes are applied, and the styles for that are already present in the CSS file. Just like the old times, simply and fast.</p>\n<p><img src=\"\" alt=\"Perfection\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/why-move-styled-to-css-modules--perfection/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/why-move-styled-to-css-modules--perfection.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h2 id=\"Reduced-Bundle-Size\"><a class=\"heading-link\" href=\"#Reduced-Bundle-Size\">#</a>Reduced Bundle Size</h2>\n<p>This total maneuver took away 60KB from my bundles, which is just huge. I removed <code>styled-components</code>, <code>react-is</code>(Styled components require it for some reason), <code>styled-reset</code> and <code>color2k</code>(For color manipulation).</p>\n<p>If you have been coding for some time, you'll know how incredibly satisfying deleting old stuff is. <img class=\"emoji\" draggable=\"false\" alt=\"😌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60c.svg\"></p>\n<h1 id=\"What-did-it-cost\"><a class=\"heading-link\" href=\"#What-did-it-cost\">#</a>What did it cost?</h1>\n<p><img src=\"\" alt=\"Gamora: What did it cost?; Thanos: Everything\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/why-move-styled-to-css-modules--thanos-gamora-everything/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/why-move-styled-to-css-modules--thanos-gamora-everything.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Yup. I lost something: A great API design.</p>\n<p>Writing styles in Styled Components is a pleasure. The API design is amazing, and I prefer it over CSS modules in terms of writing the code.</p>\n<p>If you aren't using a style, means you aren't using a component, so the component will be called out by VSCode as not being used, so you can easily remove it. No more dead styles!!</p>\n<p>Plus, compare the component below in Styled Components:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">interface</span><span style=\"color:#FFCB6B\"> ActionCenterSurfaceProps</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  grid</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [[</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  children</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> ComponentChildren</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> ActionCenterSurface </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> ({</span><span style=\"color:#BABED8;font-style:italic\"> grid</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> children</span><span style=\"color:#89DDFF\"> }:</span><span style=\"color:#FFCB6B\"> ActionCenterSurfaceProps</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> [[</span><span style=\"color:#BABED8\">columnStart</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> columnSpan</span><span style=\"color:#89DDFF\">],</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">rowStart</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> rowSpan</span><span style=\"color:#89DDFF\">]]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> grid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useTheme</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#F07178\"> (</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#FFCB6B\">Container</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      columnSpan</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">columnSpan</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      columnStart</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">columnStart</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      rowSpan</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">rowSpan</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      rowStart</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">rowStart</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      theme</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      {</span><span style=\"color:#BABED8\">children</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;/</span><span style=\"color:#FFCB6B\">Container</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> ContainerProps</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  columnStart</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  columnSpan</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F07178\">  rowStart</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  rowSpan</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F07178\">  theme</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> TTheme</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> Container </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> styled</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">section</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">ContainerProps</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  display: grid;</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  grid-auto-rows: 1fr;</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  gap: 0.25rem;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  position: relative;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  padding: 0.5rem;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  border-radius: 0.75rem;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  background-color: hsla(</span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">colors</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">light</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">hsl</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">, 0.5);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  ${</span><span style=\"color:#89DDFF\">({</span><span style=\"color:#BABED8;font-style:italic\"> columnStart</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> columnSpan</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> rowSpan</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> rowStart</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> theme</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8;font-style:italic\"> localTheme</span><span style=\"color:#89DDFF\"> })</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> css</span><span style=\"color:#89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">    grid-column: </span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">columnStart</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\"> / span </span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">columnSpan</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">;</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">    grid-row: </span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">rowStart</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\"> / span </span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">rowSpan</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">    box-shadow: hsla(0, 0%, 0%, 0.3) 0px 1px 4px -1px, 0 0 0 </span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">localTheme </span><span style=\"color:#89DDFF\">===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">dark</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#F78C6C\"> 0.4</span><span style=\"color:#89DDFF\"> :</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">px hsla(</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          ${</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">colors</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">dark</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">hsl</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">,</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">          0.3</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">        );</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  `}</span><span style=\"color:#C3E88D\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is one of my components in Styled Components before. As you can see, it accepts values that are numbers. If there were booleans, it would've been easy to make a class and apply the styles then. But here, the value can be anything.</p>\n<p>And now look at the new CSS Module version:</p>\n<p>Component:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">interface</span><span style=\"color:#FFCB6B\"> ActionCenterSurfaceProps</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  grid</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [[</span><span style=\"color:#FFCB6B\">columnStart</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> columnSpan</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">rowStart</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> rowSpan</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  children</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> ComponentChildren</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> ActionCenterSurface </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> ({</span><span style=\"color:#BABED8;font-style:italic\"> grid</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> children</span><span style=\"color:#89DDFF\"> }:</span><span style=\"color:#FFCB6B\"> ActionCenterSurfaceProps</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> [[</span><span style=\"color:#BABED8\">columnStart</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> columnSpan</span><span style=\"color:#89DDFF\">],</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">rowStart</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> rowSpan</span><span style=\"color:#89DDFF\">]]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> grid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useTheme</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#F07178\"> (</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">section</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      className</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">css</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">container</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      style</span><span style=\"color:#89DDFF\">={</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          '</span><span style=\"color:#F07178\">--column-start</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> columnStart</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          '</span><span style=\"color:#F07178\">--column-span</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> columnSpan</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          '</span><span style=\"color:#F07178\">--row-start</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> rowStart</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          '</span><span style=\"color:#F07178\">--row-span</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> rowSpan</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          '</span><span style=\"color:#F07178\">--border-size</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> `${</span><span style=\"color:#BABED8\">theme </span><span style=\"color:#89DDFF\">===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">dark</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#F78C6C\"> 0.4</span><span style=\"color:#89DDFF\"> :</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">px</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        }</span><span style=\"color:#89DDFF;font-style:italic\"> as</span><span style=\"color:#FFCB6B\"> React</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#FFCB6B\">CSSProperties</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      {</span><span style=\"color:#BABED8\">children</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;/</span><span style=\"color:#F07178\">section</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And the CSS for this component:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">.</span><span style=\"color:#FFCB6B\">container</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  display</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> grid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  grid-auto-rows</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 1fr</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  gap</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.25rem</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  position</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> relative</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  padding</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.5rem</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  border-radius</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.75rem</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  box-shadow</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> hsla</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 0%</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 0%</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 0.3</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#F78C6C\"> 0px</span><span style=\"color:#F78C6C\"> 1px</span><span style=\"color:#F78C6C\"> 4px</span><span style=\"color:#F78C6C\"> -1px</span><span style=\"color:#BABED8\">, </span><span style=\"color:#F78C6C\">0</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#82AAFF\"> var</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8\">--border-size</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#82AAFF\"> hsla</span><span style=\"color:#89DDFF\">(</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">        var</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8\">--app-color-dark-hsl</span><span style=\"color:#89DDFF\">),</span></span>\n<span class=\"line\"><span style=\"color:#F78C6C\">        0.3</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  background-color</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> hsla</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#82AAFF\">var</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8\">--app-color-light-hsl</span><span style=\"color:#89DDFF\">),</span><span style=\"color:#F78C6C\"> 0.5</span><span style=\"color:#89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  grid-column</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> var</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8\">--column-start</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#B2CCD6\"> span</span><span style=\"color:#82AAFF\"> var</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8\">--column-span</span><span style=\"color:#89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">  grid-row</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> var</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8\">--row-start</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#B2CCD6\"> span</span><span style=\"color:#82AAFF\"> var</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8\">--row-span</span><span style=\"color:#89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, the prop values are passed to the CSS using CSS variables. This method is good too, but the Styled Components method is cleaner in my opinion.</p>\n<p>In future, I might try out libraries like <a href=\"https://linaria.dev/\" target=\"_blank\" rel=\"noopener\">Linaria</a> which, during coding have the exact same API as <code>styled-components</code>, but the runtime is completely removed on build and the CSS is extracted into separate CSS files, which is super DOPE!!! <img class=\"emoji\" draggable=\"false\" alt=\"🤓\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f913.svg\"></p>\n<p>Alright, that's it for today.</p>\n<p>Signing off!! <img class=\"emoji\" draggable=\"false\" alt=\"👋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f44b.svg\"></p>\n",
    "id": "move-to-css-modules-from-styled-components",
    "reading_time": 7.8775,
    "toc": [
      {
        "indent": 0,
        "id": "What-is-styled-components",
        "title": "What is styled-components?",
        "length": 26
      },
      {
        "indent": 0,
        "id": "What-are-CSS-Modules",
        "title": "What are CSS Modules?",
        "length": 21
      },
      {
        "indent": 0,
        "id": "The-app-in-question",
        "title": "The app in question",
        "length": 19
      },
      {
        "indent": 0,
        "id": "Why",
        "title": "Why? <img class=\"emoji\" draggable=\"false\" alt=\"🧐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f9d0.svg\"/>",
        "length": 7
      },
      {
        "indent": 1,
        "id": "CSS-not-minified",
        "title": "CSS not minified",
        "length": 16
      },
      {
        "indent": 2,
        "id": "Why-not-use-the-babel-plugin",
        "title": "Why not use the babel plugin? <img class=\"emoji\" draggable=\"false\" alt=\"🤨\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f928.svg\"/>",
        "length": 32
      },
      {
        "indent": 1,
        "id": "CSS-injected-by-JS",
        "title": "CSS injected by JS",
        "length": 18
      },
      {
        "indent": 1,
        "id": "Performance-had-become-important",
        "title": "Performance had become important",
        "length": 32
      },
      {
        "indent": 0,
        "id": "Did-it-work",
        "title": "Did it work?",
        "length": 12
      },
      {
        "indent": 1,
        "id": "Reduced-Bundle-Size",
        "title": "Reduced Bundle Size",
        "length": 19
      },
      {
        "indent": 0,
        "id": "What-did-it-cost",
        "title": "What did it cost?",
        "length": 17
      }
    ],
    "seriesIndex": 0
  },
  "macos-dock-animation-svelte": {
    "cover_image": "media/macos-dock-animation-svelte--cover.png",
    "title": "Amazing macOS Dock animation in Svelte",
    "date": "2021-04-01T18:30:00.000Z",
    "description": "Let's make the beautiful macOS Dock animation using Svelte",
    "body": "<p><img src=\"\" alt=\"MacOS Big Sur dock when being animated\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 50%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/macos-dock-animation-svelte--cover/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/macos-dock-animation-svelte--cover/small.png\">\n      <img alt=\"MacOS Big Sur dock when being animated\" data-src=\"../media/macos-dock-animation-svelte--cover/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>macOS Dock, when you hover over it, has such a good feedback animation. The current icon your cursor is over becomes big, and the nearby icons become bigger too, but as you move your cursor, the icons' size changes based on distance from your cursor, kinda like this below <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Dock animation preview as GIF\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/macos-dock-animation-svelte--animation-preview/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/macos-dock-animation-svelte--animation-preview.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Pardon the bad quality <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">. Pretty slick, right? So interactive, so playful, its just freaking good <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"></p>\n<p>But here's a twist. <strong>That isn't macOS</strong>. There are no tooltips, no desktop icons, even the animation looks bouncier.</p>\n<p>Ladies and Gentlemen, what you see above is the final product we're gonna make in this blog post using Svelte. <strong>In less than 100 lines of logic <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></strong></p>\n<h2 id=\"That-looks-way-too-good-for-just-100-lines\"><a class=\"heading-link\" href=\"#That-looks-way-too-good-for-just-100-lines\">#</a>That looks way too good for just 100 lines <img class=\"emoji\" draggable=\"false\" alt=\"🧐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f9d0.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🧐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f9d0.svg\"></h2>\n<p>I know!! That's the beauty of Svelte <img class=\"emoji\" draggable=\"false\" alt=\"😌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60c.svg\"></p>\n<p>Don't believe me? You can check it out right here: <a href=\"https://macos-web-svelte-dock-puruvj.vercel.app/\" target=\"_blank\" rel=\"noopener\">Demo</a>. <br>\nAnd here's the original source code @ Github: <a href=\"https://github.com/PuruVJ/macos-web-svelte-dock\" target=\"_blank\" rel=\"noopener\">Source</a></p>\n<p>Feel free to read the source code directly, if you feel like you can understand what is going on just from reading the source. And if you can't, no problem, that's what this article is for <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></p>\n<p>Let's dive into it!!</p>\n<h1 id=\"Tech-Stack\"><a class=\"heading-link\" href=\"#Tech-Stack\">#</a>Tech Stack</h1>\n<p>Here's what the tech stack is gonna be for this little demo:</p>\n<ul>\n<li>Svelte</li>\n<li>popmotion library</li>\n<li>Typescript 4</li>\n<li>Vite</li>\n</ul>\n<h2 id=\"What's-with-Vite\"><a class=\"heading-link\" href=\"#What's-with-Vite\">#</a>What's with Vite? <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\"></h2>\n<p>Vite is the new cool kid in the block <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\">. Its basically a bundler and dev server like Webpack(With the Dev Server plugin), only it comes with everything pre-built and pre-configured, so you can jump into the code directly.</p>\n<p>It won't change how we write the code, only the way we refer to our assets changes a bit, so you don't have to worry about it much.</p>\n<h2 id=\"Popmotion\"><a class=\"heading-link\" href=\"#Popmotion\">#</a>Popmotion?</h2>\n<p>Yeah, this is an animation library on which the utterly awesome <mark>Framer Motion</mark> library is build. We don't really need the animation related stuff from this library, only a small helper function that is essential for this demo. Install it beforehand</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#FFCB6B\">npm</span><span style=\"color:#C3E88D\"> i</span><span style=\"color:#C3E88D\"> popmotion</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or if you're a <code>Yarn</code> person</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#FFCB6B\">yarn</span><span style=\"color:#C3E88D\"> add</span><span style=\"color:#C3E88D\"> popmotion</span></span>\n<span class=\"line\"></span></code></pre>\n<h1 id=\"Preliminary-setup\"><a class=\"heading-link\" href=\"#Preliminary-setup\">#</a>Preliminary setup</h1>\n<p>Our demo won't look good without that slick background and the great CSS everywhere. So let's set up the basic shell of our application.</p>\n<p>So let's start with the root component.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">&lt;!-- App.svelte --&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">script</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  import</span><span style=\"color:#BABED8\"> Dock </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./lib/Dock.svelte</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">script</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">main</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">Dock</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">main</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">style</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  main</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    max-width</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 100vw</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    height</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 100vh</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    background</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> url</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">/wallpaper.jpg</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    background-size</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> cover</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    background-position</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> center center</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">style</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Let's break it down</p>\n<ol>\n<li>\n<p>We're importing the <code>Dock</code> component. It's not declared yet, so there will be red squiggles in there. We'll declare it in a moment.</p>\n</li>\n<li>\n<p>We have a <code>main</code> tag enclosing the <code>Dock</code> element.</p>\n</li>\n<li>\n<p>We have our styles here. These are simply set so that the beautiful macOS Big Sur wallpaper takes up all the space and adjusts to different viewport sizes gracefully.</p>\n</li>\n</ol>\n<p>So we end with this beautiful view <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Basic MacOS colorful wallpaper\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.25%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/macos-dock-animation-svelte--scaffold-wallpaper/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/macos-dock-animation-svelte--scaffold-wallpaper/small.png\">\n      <img alt=\"Basic MacOS colorful wallpaper\" data-src=\"../media/macos-dock-animation-svelte--scaffold-wallpaper/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p>Notice we're referencing <code>wallpaper.jpg</code> as if its next to our current file, but it isn't. It's inside Vite's <code>public</code> folder. You can refer to those files as if you're current component in inside the <code>public</code> folder. This holds for <code>&lt;link&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;a&gt;</code> tags and what not. Go crazy <img class=\"emoji\" draggable=\"false\" alt=\"🤪\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92a.svg\">!</p>\n</blockquote>\n<h1 id=\"The-Dock\"><a class=\"heading-link\" href=\"#The-Dock\">#</a>The Dock</h1>\n<p>So let's set up the actual <code>Dock.svelte</code> component.</p>\n<p>Here it is <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">script</span><span style=\"color:#C792EA\"> lang</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">ts</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  import</span><span style=\"color:#BABED8\"> DockItem </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./DockItem.svelte</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> apps</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#BABED8\">[] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">calendar</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">facetime</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">finder</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">launchpad</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">mail</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">maps</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">messages</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">photos</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">scared-cat</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">safari</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">system-preferences</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#C3E88D\">view-source</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> mouseX</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> null</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> null;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">script</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">section</span><span style=\"color:#C792EA\"> class</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">dock-container</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">div</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    class</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">dock-el</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    on:mousemove</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">{(event) =&gt; (mouseX = event.x)}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    on:mouseleave</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">{() =&gt; (mouseX = null)}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    {#each apps as appID}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">DockItem</span><span style=\"color:#C792EA\"> {mouseX}</span><span style=\"color:#C792EA\"> {appID}</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    {/each}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;/</span><span style=\"color:#F07178\">div</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">section</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">style</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#FFCB6B\">dock-container</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    margin-bottom</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.3rem</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    left</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    bottom</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    z-index</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 9900</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    position</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> fixed</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    width</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 100%</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    height</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 5rem</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    padding</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.4rem</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    display</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> flex</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    justify-content</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> center</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#FFCB6B\">dock-el</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    backdrop-filter</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> blur</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#F78C6C\">5px</span><span style=\"color:#89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    background-color</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> hsla</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#F78C6C\">240</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3%</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 11%</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 0.4</span><span style=\"color:#89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    box-shadow</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> inset </span><span style=\"color:#F78C6C\">0</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#F78C6C\"> 0.2px</span><span style=\"color:#82AAFF\"> rgb</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#F78C6C\">245</span><span style=\"color:#F78C6C\"> 245</span><span style=\"color:#F78C6C\"> 245</span><span style=\"color:#BABED8\"> / </span><span style=\"color:#F78C6C\">70%</span><span style=\"color:#89DDFF\">),</span><span style=\"color:#82AAFF\"> hsla</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 0%</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 0%</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 0.3</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#F78C6C\"> 2px</span><span style=\"color:#F78C6C\"> 5px</span><span style=\"color:#F78C6C\"> 19px</span><span style=\"color:#F78C6C\"> 7px</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    padding</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.3rem</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    border-radius</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 1.2rem</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    height</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 100%</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    display</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> flex</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    align-items</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> flex-end</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">style</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Ooh, there's a lot going on here!! Let's break it down.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#BABED8\"> DockItem </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./DockItem.svelte</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> apps</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#BABED8\">[] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">calendar</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">facetime</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">finder</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">launchpad</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">mail</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">maps</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">messages</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">photos</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">scared-cat</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">safari</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">system-preferences</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#C3E88D\">view-source</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> mouseX</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> null</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> null;</span></span>\n<span class=\"line\"></span></code></pre>\n<ol>\n<li>\n<p>We're importing the <code>DockItem</code> component. It is the heart of the whole demo, as all the animation is handled within it. I'll show you how to write it soon.</p>\n</li>\n<li>\n<p>Next up we have a list of all app IDs. Why are these needed? Because our app icons are stored by these names only, so we can easily <code>&lt;img src=</code> them.</p>\n</li>\n<li>\n<p>And here we have a <code>mouseX</code> variable, which we're gonna be tracking the current x-coordinate of our mouse (Distance of mouse from the left side of the screen). Notice we have defined its type as <code>number</code> or <code>null</code>. It will be <code>null</code> when the mouse isn't on the dock, so as to prevent any unintended resizing of elements. So we initialize it as <code>null</code>.</p>\n</li>\n</ol>\n<p>Now, analyzing the html part:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">section</span><span style=\"color:#C792EA\"> class</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">dock-container</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">div</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    class</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">dock-el</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    on:mousemove</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">{(event) =&gt; (mouseX = event.x)}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    on:mouseleave</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">{() =&gt; (mouseX = null)}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    {#each apps as appID}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">DockItem</span><span style=\"color:#C792EA\"> {mouseX}</span><span style=\"color:#C792EA\"> {appID}</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    {/each}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;/</span><span style=\"color:#F07178\">div</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">section</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We have a <code>section.dock-container</code> as the container for the whole dock. This itself isn't the dock, it <strong>contains</strong> the dock. Its just an invisible container to center the dock.</p>\n<p>Next here we have the <code>div.dock-el</code>, which is the dock itself.</p>\n<p><img src=\"\" alt=\"The Dock itself\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 10.333333333333334%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/macos-dock-animation-svelte--the-dock-itself/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/macos-dock-animation-svelte--the-dock-itself/small.png\">\n      <img alt=\"The Dock itself\" data-src=\"../media/macos-dock-animation-svelte--the-dock-itself/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Notice the event handlers we have put on this element.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">on:mousemove=\"{(event) =&gt; (mouseX = event.x)}\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This simply sets the value of the <code>mouseX</code> variable to the value of mouse's x-coordinate, or simply the distance from the left side of the screen.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">on:mouseleave=\"{() =&gt; (mouseX = null)}\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This simply sets the value of <code>mouseX</code> back to null, as a way of telling our components that dock isn;t being hovered over, so it can disable the animation.</p>\n<p>How does this tie into the whole thing? I'll explain soon.</p>\n<p>Next up we have this little section:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">{#each apps as appID}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">DockItem</span><span style=\"color:#C792EA\"> {mouseX}</span><span style=\"color:#C792EA\"> {appID}</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">{/each}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We're looping through all the <code>apps</code>, which if you remember is the array of IDs of apps, by which name the app icons are stored in the <code>public</code> folder.</p>\n<p>Next up is the <code>DockItem</code> taking in <code>mouseX</code> and current <code>appID</code> as props. We'll see how these are used within the component.</p>\n<h1 id=\"The-juicy-stuff\"><a class=\"heading-link\" href=\"#The-juicy-stuff\">#</a>The juicy stuff <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\"></h1>\n<p>Let's do the <code>DockItem</code> element now.</p>\n<p>I'll drop the whole code here. Its quite big. Try reading it before the explanation, then the explanation will make more sense.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">script</span><span style=\"color:#C792EA\"> lang</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">ts</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> interpolate</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">popmotion</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> spring</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">svelte/motion</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  import</span><span style=\"color:#BABED8\"> ButtonBase </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./ButtonBase.svelte</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** Block 1 */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  export</span><span style=\"color:#C792EA\"> let</span><span style=\"color:#BABED8\"> appID</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  export</span><span style=\"color:#C792EA\"> let</span><span style=\"color:#BABED8\"> mouseX</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> null</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> el</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> HTMLImageElement</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** Block 2 */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> baseWidth </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#F78C6C\"> 57.6</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> distanceLimit </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 6</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> beyondTheDistanceLimit </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> distanceLimit </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#F78C6C\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> distanceInput </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    -</span><span style=\"color:#BABED8\">distanceLimit</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    -</span><span style=\"color:#BABED8\">distanceLimit </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 1.25</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    -</span><span style=\"color:#BABED8\">distanceLimit </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F78C6C\">    0</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    distanceLimit </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    distanceLimit </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 1.25</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    distanceLimit</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> widthOutput </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    baseWidth</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 1.1</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 1.618</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 2.618</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 1.618</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 1.1</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    baseWidth</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> distance </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> beyondTheDistanceLimit</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> widthPX </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> spring</span><span style=\"color:#BABED8\">(baseWidth</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    damping</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.38</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    stiffness</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.1</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  $</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> $widthPX </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> interpolate</span><span style=\"color:#BABED8\">(distanceInput</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> widthOutput)(distance)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> width</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  $</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> width </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> `${</span><span style=\"color:#BABED8\">$widthPX </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 16</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">rem</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** Block 3 */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> raf</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  function</span><span style=\"color:#82AAFF\"> animate</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">mouseX</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> null</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">el</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#BABED8\"> mouseX</span><span style=\"color:#89DDFF\"> !==</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      const</span><span style=\"color:#BABED8\"> rect</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> el</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">getBoundingClientRect</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">      // get the x coordinate of the img DOMElement's center</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">      // the left x coordinate plus the half of the width</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      const</span><span style=\"color:#BABED8\"> imgCenterX</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> rect</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">left</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> rect</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">width</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">      // difference between the x coordinate value of the mouse pointer</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">      // and the img center x coordinate value</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      const</span><span style=\"color:#BABED8\"> distanceDelta</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> mouseX</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#BABED8\"> imgCenterX</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">      distance</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> distanceDelta</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      return</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    distance</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> beyondTheDistanceLimit</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  $</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> raf </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> requestAnimationFrame</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> animate</span><span style=\"color:#BABED8\">(mouseX))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">script</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">section</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">ButtonBase</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">img</span><span style=\"color:#C792EA\"> bind:this</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">{el}</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> src</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">/app-icons/{appID}/256.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> alt</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"\"</span><span style=\"color:#C792EA\"> style</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">width: {width};</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;/</span><span style=\"color:#F07178\">ButtonBase</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">section</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So let's break down the JS part of it. Notice there are <code>blocks</code> in the JS code. As in <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** Block 1 */</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There are blocks in the code. So let's break them down block by block.</p>\n<h2 id=\"Block-1\"><a class=\"heading-link\" href=\"#Block-1\">#</a>Block 1</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** Block 1 */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> let</span><span style=\"color:#BABED8\"> appID</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> let</span><span style=\"color:#BABED8\"> mouseX</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> null</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> el</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> HTMLImageElement</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Nothing much here. We're exporting the 2 props we passed to this element in the <code>Dock</code> component above</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">DockItem</span><span style=\"color:#C792EA\"> {mouseX}</span><span style=\"color:#C792EA\"> {appID}</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have an <code>el</code>. This is going to hold the reference to the main image element. This image element is the one whose width would be animated. We have to refer it so as to compute the correct width during the animation.</p>\n<h2 id=\"Block-2\"><a class=\"heading-link\" href=\"#Block-2\">#</a>Block 2</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** Block 2 */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> baseWidth </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#F78C6C\"> 57.6</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> distanceLimit </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 6</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> beyondTheDistanceLimit </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> distanceLimit </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#F78C6C\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> distanceInput </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  -</span><span style=\"color:#BABED8\">distanceLimit</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  -</span><span style=\"color:#BABED8\">distanceLimit </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 1.25</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  -</span><span style=\"color:#BABED8\">distanceLimit </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F78C6C\">  0</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  distanceLimit </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  distanceLimit </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 1.25</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  distanceLimit</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> widthOutput </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  baseWidth</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 1.1</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 1.618</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 2.618</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 1.618</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  baseWidth </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#F78C6C\"> 1.1</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  baseWidth</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> distance </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> beyondTheDistanceLimit</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> widthPX </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> spring</span><span style=\"color:#BABED8\">(baseWidth</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  damping</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.38</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  stiffness</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.1</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">$</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> $widthPX </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> interpolate</span><span style=\"color:#BABED8\">(distanceInput</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> widthOutput)(distance)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> width</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">$</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> width </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> `${</span><span style=\"color:#BABED8\">$widthPX </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 16</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">rem</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Let's break it down.</p>\n<p>First off we have <code>baseWidth</code> variable. As the name suggests, it is gonna be the width of the images when they're not being hovered. But there's more. We're gonna build our whole animation calculations based on this variable.</p>\n<p><code>distanceLimit</code> and <code>beyondTheDistanceLimit</code> variables are used to setup how far from the cursor's position items should be scaled up</p>\n<p>Next up we got an array <code>distanceInput</code>. To explain it, let's take a look at the photo below <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Boundaries\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 52.83333333333333%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/macos-dock-animation-svelte--marked-dock-positions/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/macos-dock-animation-svelte--marked-dock-positions/small.jpg\">\n      <img alt=\"Boundaries\" data-src=\"../media/macos-dock-animation-svelte--marked-dock-positions/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>As you can see, we are hovering over the messages app, so it's the biggest right now. The vertical green line is where the cursor would be lying at the moment. The arrows extend out to 3 icons, on each side of the currently hovered over icon. Notice, that the farther you go, the smaller the icons become.</p>\n<p>We can assert from this that the size of the icon is a function of its distance from the cursor. But what is the function?</p>\n<blockquote>\n<p>By function I refer to <code>mathematical functions</code>, as in <code>y = x + 1</code>, or <code>y = x^2 + x + 1</code>.</p>\n</blockquote>\n<p>Don't worry, we won't go into any math here. We'll let a helper function figure out the relationship between the distance and the size. I'll explain that in a moment.</p>\n<p>And next we have a <code>widthOutput</code> array. Notice the pattern in here. First element is small, 2nd is bigger. 3rd is even bigger. 4th is the biggest! 5th is as small as the 3rd. 6th as same as 2nd, and 7th is the smallest, same as the first.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span>1</span></span>\n<span class=\"line\"><span>  2</span></span>\n<span class=\"line\"><span>    3</span></span>\n<span class=\"line\"><span>      4</span></span>\n<span class=\"line\"><span>    5</span></span>\n<span class=\"line\"><span>  6</span></span>\n<span class=\"line\"><span>7</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>You can see this symmetricity in the <code>distanceInput</code> too. 7 items, following a similar pattern to <code>widthOutput</code>. So these arrays are related.Now all we need to do is find out how to relate them, so we can calculate the width for every icon based on its distance from mouse.</p>\n<p>This is where the helper function to generate that relationship comes in. We're gonna use the <code>popmotion</code> library finally. It has a function <code>interpolate</code> that does that for you.</p>\n<p>Before that, let's create our spring animation first.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> distance </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> beyondTheDistanceLimit</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> widthPX </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> spring</span><span style=\"color:#BABED8\">(baseWidth</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  damping</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.38</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  stiffness</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.1</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>distance</code> here is the variable in which we're gonna track, you got it, the distance of current item's center point from cursor. For now we'll initialize with the value of <code>beyondTheDistanceLimit</code>, so we don't get any accidental animations when user just hovers over dock.</p>\n<p><code>widthPX</code> is the actual spring animation, imported from <code>svelte/motion</code>. For an initial value, we simply pass it the <code>baseWidth</code>, which we want the icon to have when we aren't hovering over it or when it is far away.</p>\n<p>We also have a config for this spring animation, in which I have put some sensible values to make the animation look natural. Feel free to play around with these.</p>\n<p>Now we have this little snippet:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#FFCB6B\">$</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> $widthPX </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> interpolate</span><span style=\"color:#BABED8\">(distanceInput</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> widthOutput)(distance)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We're using Svelte's reactive statements to watch <code>distance</code>, and when it changes, our <code>interpolate</code> function will basically figure out the width for the current app icon, and set the value of <code>widthPX</code> to it. As <code>widthPX</code> is a spring timed store, it will simply keep changing bit by bit after we have set its value, just like a spring.</p>\n<p>Next up, we have some unit conversion:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> width</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">$</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> width </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> `${</span><span style=\"color:#BABED8\">$widthPX </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#F78C6C\"> 16</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">rem</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>widthPX is in pixels. Pixels will work too, but I'm a <code>rem</code> and <code>em</code> guy. I like all my units to be in <code>rems</code>. So I will declare a value to hold the value in <code>rem</code></p>\n<p>As <code>$widthPX</code> will be constantly changing, we need to put a reactive statement here to make sure <code>width</code> is always synchronized.</p>\n<h2 id=\"Block-3\"><a class=\"heading-link\" href=\"#Block-3\">#</a>Block 3</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** Block 3 */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> raf</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> animate</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">mouseX</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> null</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">el</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#BABED8\"> mouseX</span><span style=\"color:#89DDFF\"> !==</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> rect</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> el</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">getBoundingClientRect</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // get the x coordinate of the img DOMElement's center</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // the left x coordinate plus the half of the width</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> imgCenterX</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> rect</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">left</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> rect</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">width</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // difference between the x coordinate value of the mouse pointer</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // and the img center x coordinate value</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> distanceDelta</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> mouseX</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#BABED8\"> imgCenterX</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    distance</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> distanceDelta</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  distance</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> beyondTheDistanceLimit</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">$</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> raf </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> requestAnimationFrame</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> animate</span><span style=\"color:#BABED8\">(mouseX))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Next up, we have the block 3 here.</p>\n<p>We first declare a variable <code>raf</code>. This will hold a <code>requestAnimationFrame</code> instance. It's not needed, but not having it resulted in some bugs for me, so better keep it.</p>\n<p>Next up, we have the <code>animate</code> function. We're passing in <code>mouseX</code>, the cursor's current position passed to it by the array element.</p>\n<p>Inside the function, we got a condition checking if <code>el</code>, the image element exists, and the <code>mouseX</code> isn't null. This is the explanation folks, why mouseX value is either <code>number</code> or <code>null</code>. When it's set to <code>null</code> by the <code>Dock</code> component, the animation is simply ignored thanks to the <code>if</code> statement here.</p>\n<p>Next up, in the <code>if</code> statement, we're simply doing some calculations to calculate distance of the center of the image from the cursor, adn finally setting the <code>distance</code> variable to the distance.</p>\n<p>If any of the conditions fail, we simply set <code>distance</code> to be <code>beyondTheDistanceLimit</code>, so it falls out of the <code>widthOutput</code> range, and isn't animated</p>\n<blockquote>\n<p>Remember how we have a reactive statement watching <code>distance</code>?\n<code>$: $widthPX = interpolate(distanceInput, widthOutput)(distance);</code>\nWhen the <code>distance</code> changes, <code>widthPX</code> will be updated. This in turn will update <code>width</code> to take on the value in <code>rem</code>s.</p>\n</blockquote>\n<p>Next up, we have a very important line here. A reactive statement requesting a <code>requestAnimationFrame</code> when running this function.</p>\n<blockquote>\n<p>Note: Not assigning the RequestAnimationFrame to a variable(<code>raf</code> in this case) results in some bugs.</p>\n</blockquote>\n<p>This is the end of the logic. Most of the work is over now. All we need to do now is set up the markup</p>\n<h2 id=\"Markup\"><a class=\"heading-link\" href=\"#Markup\">#</a>Markup</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">section</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">ButtonBase</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">img</span><span style=\"color:#C792EA\"> bind:this</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">{el}</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> src</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">/app-icons/{appID}/256.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> alt</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"\"</span><span style=\"color:#C792EA\"> style</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">width: {width};</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;/</span><span style=\"color:#F07178\">ButtonBase</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">section</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Just a <code>section</code> wrapping our image element for semantics, then we got a custom <code>ButtonBase</code> Svelte component. This is an unstyled button component that I created for general use. I'll drop the component code below. Not much to see here.</p>\n<p>next up we have the star of the show: The <code>img</code> element.</p>\n<ol>\n<li>\n<p>We're doing a <code>bind:this</code> to set element reference to <code>el</code> variable.</p>\n</li>\n<li>\n<p><code>src</code> is requesting the icon from the <code>public</code> folder. In Vite, if something is in <code>public</code> folder, you can refer to it as if it was in the same directory as the file you're writing code in. We're injecting the <code>appID</code> prop in the string.</p>\n</li>\n<li>\n<p>Lastly, <code>style=\"width: {width}\"</code> is the one doing all the magic here. Simply setting <code>width</code> property to the <code>width</code> variable will do all we need it to do.</p>\n</li>\n</ol>\n<p>Lastly, this is the <code>ButtonBase</code> code:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">button</span><span style=\"color:#C792EA\"> {...$$props}</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">slot</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">button</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">style</span><span style=\"color:#C792EA\"> lang</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">scss</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  button</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    color</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> inherit</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    text-decoration</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> none</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    vertical-align</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> middle</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    border</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    border-radius</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    outline</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    margin</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    padding</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    display</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> inline-flex</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    align-items</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> center</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    justify-content</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> center</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    position</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> relative</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    user-select</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> none</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    appearance</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> none</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">    background-color</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> transparent</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">    -webkit-tap-highlight-color</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> transparent</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    &amp;</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\">not(:disabled) {</span></span>\n<span class=\"line\"><span style=\"color:#B2CCD6\">      cursor</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> pointer</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">style</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And the animation is done.</p>\n<p><a href=\"https://macos-web-svelte-dock-puruvj.vercel.app/\" target=\"_blank\" rel=\"noopener\">Demo</a>. <br>\n<a href=\"https://github.com/PuruVJ/macos-web-svelte-dock\" target=\"_blank\" rel=\"noopener\">Source</a></p>\n<p>Hope you got something good out of it</p>\n<p>Signing off <img class=\"emoji\" draggable=\"false\" alt=\"🖖\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f596.svg\"></p>\n",
    "id": "macos-dock-animation-svelte",
    "reading_time": 12.225,
    "toc": [
      {
        "indent": 1,
        "id": "That-looks-way-too-good-for-just-100-lines",
        "title": "That looks way too good for just 100 lines <img class=\"emoji\" draggable=\"false\" alt=\"🧐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f9d0.svg\"/><img class=\"emoji\" draggable=\"false\" alt=\"🧐\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f9d0.svg\"/>",
        "length": 47
      },
      {
        "indent": 0,
        "id": "Tech-Stack",
        "title": "Tech Stack",
        "length": 10
      },
      {
        "indent": 1,
        "id": "What's-with-Vite",
        "title": "What's with Vite? <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\"/>",
        "length": 20
      },
      {
        "indent": 1,
        "id": "Popmotion",
        "title": "Popmotion?",
        "length": 10
      },
      {
        "indent": 0,
        "id": "Preliminary-setup",
        "title": "Preliminary setup",
        "length": 17
      },
      {
        "indent": 0,
        "id": "The-Dock",
        "title": "The Dock",
        "length": 8
      },
      {
        "indent": 0,
        "id": "The-juicy-stuff",
        "title": "The juicy stuff <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\"/>",
        "length": 18
      },
      {
        "indent": 1,
        "id": "Block-1",
        "title": "Block 1",
        "length": 7
      },
      {
        "indent": 1,
        "id": "Block-2",
        "title": "Block 2",
        "length": 7
      },
      {
        "indent": 1,
        "id": "Block-3",
        "title": "Block 3",
        "length": 7
      },
      {
        "indent": 1,
        "id": "Markup",
        "title": "Markup",
        "length": 6
      }
    ],
    "seriesIndex": 0
  },
  "get-to-know-typescript--mindblowing-typescript-tricks": {
    "cover_image": "media/mindblowing-typescript-tricks--cover.jpg",
    "title": "Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"/> TypeScript tricks",
    "date": "2021-03-18T18:30:00.000Z",
    "description": "There's a lot about TypeScript that most people don't know. I'll surface some of the \"unknown\" stuff in this blog post.",
    "body": "<p><img src=\"\" alt=\"Colorful\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/mindblowing-typescript-tricks--cover/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/mindblowing-typescript-tricks--cover/small.jpg\">\n      <img alt=\"Colorful\" data-src=\"../media/mindblowing-typescript-tricks--cover/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript </a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--react-hooks-return-array-issue\">Part 3 - React TypeScript Hooks issue when returning array</a><br><a> Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"> TypeScript tricks (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br>\n      </p>\n    </blockquote><p></p>\n<p>Apologies for the clickbaity title <img class=\"emoji\" draggable=\"false\" alt=\"🙃\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f643.svg\">. But it is in good faith, cuz I'm gonna introduce you to some TypeScript related tricks that are bound to blow your mind to pieces. And if you can read the whole post without feeling wonder at any trick, great for you!! You're TypeScript pro already <img class=\"emoji\" draggable=\"false\" alt=\"🥳\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f973.svg\"></p>\n<p>So let's cut to the chase.</p>\n<h1 id=\"A-little-note...\"><a class=\"heading-link\" href=\"#A-little-note...\">#</a>A little note...</h1>\n<p>The level of this article is <strong>Advanced</strong>. You may not understand how things work. However, you don't have to. You only have to copy paste the snippet, and understand how to use it, as these will make your life easy, and overtime, you'll get the know-how of how these actually work.</p>\n<h1 id=\"In-built-types\"><a class=\"heading-link\" href=\"#In-built-types\">#</a>In-built types <img class=\"emoji\" draggable=\"false\" alt=\"🥱\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f971.svg\"></h1>\n<p>These are some of the built-in helper types in TypeScript. I'll keep this section short, as you can read about these anywhere. A good starting point would be <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\" target=\"_blank\" rel=\"noopener\">TypeScript Docs</a> Then we'll get to the juicy stuff <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\"></p>\n<h2 id=\"Pick\"><a class=\"heading-link\" href=\"#Pick\">#</a>Pick</h2>\n<p>It allows to pick specific fields from a type/interface, along with their types and create a brand new type. Let's take a look at this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> UserFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  gender</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">male</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">female</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">non-binary</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">prefer-not-to-say</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  dob</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Date</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> NameAndGenderOnly</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> Pick</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">UserFields</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">name</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">gender</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// This is equal to <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> NameAndGenderOnly</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  gender</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">male</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">female</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">non-binary</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">prefer-not-to-say</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See!?! The same types, without any duplication.</p>\n<h2 id=\"Partial\"><a class=\"heading-link\" href=\"#Partial\">#</a>Partial</h2>\n<p>This is the most used type of mine. If you have a type/interface, and for some reason, you wanna make <strong>all</strong> its fields optional, this is it <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> UserFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  gender</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">male</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">female</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">non-binary</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">prefer-not-to-say</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  dob</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Date</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> OptionalUserFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> Partial</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">UserFields</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// This is equal to <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> OptionalUserFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  gender</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">male</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">female</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">non-binary</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">prefer-not-to-say</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  dob</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> Date</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Readonly\"><a class=\"heading-link\" href=\"#Readonly\">#</a>Readonly</h2>\n<p>This is very useful, when you wanna make sure that an object's properties can't be changed in your code. Think of it as a <code>const</code> for your object properties.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> UserFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  gender</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">male</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">female</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">non-binary</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">prefer-not-to-say</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  dob</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Date</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> userData</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Readonly</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">UserFields</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 100</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Puru Vijay</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  gender</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">male</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  dob</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> new</span><span style=\"color:#82AAFF\"> Date</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">12 Nov, 2001</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Trying to modify any property like <code>userData.name = 'Hoolalala'</code> will result in error.</p>\n<h2 id=\"Record\"><a class=\"heading-link\" href=\"#Record\">#</a>Record</h2>\n<p>Now we are getting to the good stuff. I've had a new-found respect for <code>Record</code> recently, while working on my current project <a href=\"https://macos.now.sh\" target=\"_blank\" rel=\"noopener\">macos.now.sh</a> (<strong>Shameless Plug</strong>, It's basically a macOS Big Sur clone written in Preact and Vite).</p>\n<p>Take a look at this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> type</span><span style=\"color:#FFCB6B\"> AppName</span><span style=\"color:#89DDFF\"> =</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">finder</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">launchpad</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">safari</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">messages</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">mail</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">maps</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">photos</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">facetime</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">calendar</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** Which apps are currently open */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#BABED8\"> openApps</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Record</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">AppName</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> boolean</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  finder</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  launchpad</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  safari</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  messages</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  mail</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  maps</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  photos</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  facetime</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  calendar</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, this is just a simple key-value pair. But I wanted to enforce that this object contains all the apps listed in the <code>AppName</code> union type, and that all the values are boolean only. I also wanted to be presented with an error if I add a new app to the list, which would make me add that app's key value pair to this <code>openApps</code> object.</p>\n<p>This is where <code>Record</code> comes in. It's simply a way to enforce the types of the keys as well as values. Another layer of safety that TypeScript adds.</p>\n<h1 id=\"Juicy-stuff\"><a class=\"heading-link\" href=\"#Juicy-stuff\">#</a>Juicy stuff <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\"></h1>\n<p>Now the fun part begins.</p>\n<h2 id=\"Retrieve-element-type-from-Array\"><a class=\"heading-link\" href=\"#Retrieve-element-type-from-Array\">#</a>Retrieve element type from Array</h2>\n<p>Suppose you have an Array, and you wanna extract the type of each Element from an array</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> ArrayElement</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">ArrayType</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#C792EA\"> readonly</span><span style=\"color:#FFCB6B\"> unknown</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> =</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  ArrayType</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#C792EA\"> readonly</span><span style=\"color:#BABED8\"> (</span><span style=\"color:#89DDFF\">infer</span><span style=\"color:#FFCB6B\"> ElementType</span><span style=\"color:#BABED8\">)[] </span><span style=\"color:#89DDFF\">?</span><span style=\"color:#FFCB6B\"> ElementType</span><span style=\"color:#89DDFF\"> :</span><span style=\"color:#FFCB6B\"> never</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We're using TypeScript's <code>infer</code> here, which helps pick out specific types from a complex type.</p>\n<p>Here's how to use it:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> A</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> ArrayElement</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">string</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">&gt;;</span><span style=\"color:#676E95;font-style:italic\"> // string</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> B</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> ArrayElement</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#C792EA\">readonly</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">&gt;;</span><span style=\"color:#676E95;font-style:italic\"> // string</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> C</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> ArrayElement</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#BABED8\">[</span><span style=\"color:#FFCB6B\">string</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">&gt;;</span><span style=\"color:#676E95;font-style:italic\"> // string | number</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> D</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> ArrayElement</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#BABED8\">[</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">foo</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">bar</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">&gt;;</span><span style=\"color:#676E95;font-style:italic\"> // \"foo\" | \"bar\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> E</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> ArrayElement</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#BABED8\">(</span><span style=\"color:#FFCB6B\">P</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> Q</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> R</span><span style=\"color:#BABED8\">)[]</span><span style=\"color:#89DDFF\">&gt;;</span><span style=\"color:#676E95;font-style:italic\"> // P | Q | R</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> Error1</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> ArrayElement</span><span style=\"color:#89DDFF\">&lt;{</span><span style=\"color:#F07178\"> name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\"> }&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">//                         ^^^^^^^^^^^^^^^^</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Error: Type '{ name: string; }' does not satisfy the constraint 'readonly unknown[]'.</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There's a bit simpler version to get the element type.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> ArrayElement</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">ArrayType</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#C792EA\"> readonly</span><span style=\"color:#FFCB6B\"> unknown</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> ArrayType</span><span style=\"color:#BABED8\">[</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Retrieve-type-from-a-promise\"><a class=\"heading-link\" href=\"#Retrieve-type-from-a-promise\">#</a>Retrieve type from a promise</h2>\n<p>Ever wanted to retrieve type from a function that returns a promise? You might've tried this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> returnsPromise</span><span style=\"color:#89DDFF\">():</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> num</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> typeof</span><span style=\"color:#BABED8\"> returnsPromise</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">//       ^^^^^^^^^^^^^^^^^^^^^</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// num: () =&gt; Promise&lt;number&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We want <code>num</code>'s type to be the returned type of the promise(in this case <code>number</code>), and the above solution definitely didn't work.</p>\n<p>The solution is to once again use <code>infer</code> to retrieve the type from the promise:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> UnwrapPromise</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">T</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> T</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">props</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> any</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#FFCB6B\"> PromiseLike</span><span style=\"color:#89DDFF\">&lt;infer</span><span style=\"color:#FFCB6B\"> U</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  ?</span><span style=\"color:#FFCB6B\"> U</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  :</span><span style=\"color:#FFCB6B\"> T</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#FFCB6B\"> PromiseLike</span><span style=\"color:#89DDFF\">&lt;infer</span><span style=\"color:#FFCB6B\"> K</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  ?</span><span style=\"color:#FFCB6B\"> K</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  :</span><span style=\"color:#FFCB6B\"> T</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>usage:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> returnsPromise</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">props</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> any</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">resolve</span><span style=\"color:#F07178\">(</span><span style=\"color:#F78C6C\">6</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> num</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> UnwrapPromise</span><span style=\"color:#89DDFF\">&lt;typeof</span><span style=\"color:#BABED8\"> returnsPromise</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 8</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">//    num: number</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we wrapped a function that returns a promise into this type. This works directly with a regular <code>Promise&lt;unknown&gt;</code> type too.</p>\n<blockquote>\n<p><strong>Why <code>PromiseLike</code> instead of <code>Promise</code>?</strong> <br>\n<br></p>\n<p><code>Promise</code> interface comes with lot of pre-built methods exclusive to promises. But sometimes, you wanna create functions that return a <code>.then</code> just like Promises, but not have all the properties that <code>Promise</code>s do. In that case, we use <code>PromiseLike</code></p>\n</blockquote>\n<p>Aside: You could rename <code>UnwrapPromise</code> to be <code>BreakPromise</code>. Doesn't affect the code, but its good for laughs <img class=\"emoji\" draggable=\"false\" alt=\"🤣\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f923.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤣\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f923.svg\"></p>\n<h2 id=\"Turning-a-tuple-into-union-types\"><a class=\"heading-link\" href=\"#Turning-a-tuple-into-union-types\">#</a>Turning a tuple into union types</h2>\n<p>This is a tuple:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> alphabets </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">a</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">b</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">c</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">d</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">] </span><span style=\"color:#89DDFF;font-style:italic\">as</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>Note: Without <code>as const</code> at the end, typescript will interpret the type as <code>string[]</code>, not as a tuple</p>\n</blockquote>\n<p>Now we want to use these specific strings as union types. Easy peasy.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> Alphabet</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">a</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">b</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">c</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">d</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will do. But let's assume that this type and the array above are gonna end up in different files, and the project grows quite big, then you come back a few months later, and add another value <code>e</code> to the <code>alphabets</code> variable, and BOOM!!! The whole codebase breaks, because you forgot to add <code>e</code> in the <code>Alphabet</code> union type.</p>\n<p>We can automate the <code>Alphabet</code> union type generation, in such a way that it pulls its members directly from <code>alphabets</code> variable.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> Alphabet</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> typeof</span><span style=\"color:#BABED8\"> alphabets[number]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And here's the universal type safe helper:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> UnionFromTuple</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">Tuple</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#C792EA\"> readonly</span><span style=\"color:#BABED8\"> (</span><span style=\"color:#FFCB6B\">string</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> boolean</span><span style=\"color:#BABED8\">)[]</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> Tuple</span><span style=\"color:#BABED8\">[</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Usage:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> alphabets </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">a</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">b</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">c</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">d</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">] </span><span style=\"color:#89DDFF;font-style:italic\">as</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> Alphabet</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> UnionFromTuple</span><span style=\"color:#89DDFF\">&lt;typeof</span><span style=\"color:#BABED8\"> alphabets</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">//  type Alphabet = 'a' | 'b' | 'c' | 'd'</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p><strong>Why <code>readonly array</code>?</strong> <br>\n<br>\nThis section is about Tuple to Union types, but in the code itself we haven't used the word <code>tuple</code>. The reason is that tuple isn't a keyword. As far as TypeScript is concerned, a <code>readonly Array</code> is a tuple. There's no <code>Tuple</code> type or anything. That's why I'm making sure the type passed to <code>UnionFromTuple</code> is a tuple, not an array. If its an array, its basically the same as the section above where we retrieved the element type from an array</p>\n</blockquote>\n<h2 id=\"Union-types-from-object\"><a class=\"heading-link\" href=\"#Union-types-from-object\">#</a>Union types from object</h2>\n<p>Let's say we have this object:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> openApps </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  finder</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  launchpad</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  safari</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  messages</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  mail</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  maps</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  photos</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  facetime</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  calendar</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And I want to create a union type that's based on the keys specified here. If I add an extra key-value pair to this object, I want the union type to include that too.</p>\n<p>Here's the solution:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> KeysOfObject</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">T</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">K</span><span style=\"color:#89DDFF\"> in</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> unknown</span><span style=\"color:#89DDFF\"> }&gt;</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> keyof</span><span style=\"color:#FFCB6B\"> T</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Usage<img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> App</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> KeysOfObject</span><span style=\"color:#89DDFF\">&lt;typeof</span><span style=\"color:#BABED8\"> openApps</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will be equal to <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> App</span><span style=\"color:#89DDFF\"> =</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">finder</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">launchpad</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">safari</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">messages</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">mail</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">maps</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">photos</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">facetime</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">calendar</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"A-better-Object.Keys\"><a class=\"heading-link\" href=\"#A-better-Object.Keys\">#</a>A better Object.Keys</h2>\n<p>Looking the article, it seems like its a compilation of Helper Types, which is the case. But in this one, I'm gonna share a tip which isn't the most mind-blowing or the coolest. Its pretty boring, but the important thing is that it's the most MOST useful tip in this whole article. If you have to take something away from this article, take this. Ignore the whole article except for this part.</p>\n<p>Let's look the object from before:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> openApps </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  finder</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  launchpad</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  safari</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  messages</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  mail</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  maps</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  photos</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  facetime</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  calendar</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> false</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Say I wanna apply <code>Object.keys</code> to get an array of the keys of this object.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> apps </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> Object</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">keys</span><span style=\"color:#BABED8\">(openApps)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// &nbsp;[\"finder\", \"launchpad\", \"safari\", \"messages\", \"mail\", \"maps\", \"photos\", \"facetime\", \"calendar\"]</span></span>\n<span class=\"line\"></span></code></pre>\n<p>But there's bit of a problem here. If you hover over <code>apps</code>, its type will be <code>string</code>[]. Not <code>(\"finder\" | \"launchpad\" | \"safari\" | \"messages\" | \"mail\" | \"maps\" | \"photos\" | \"facetime\" | \"calendar\")[]</code>.</p>\n<p>Its not exactly a <strong>problem</strong>, per se, but it would be great to have <code>Object.keys</code> return the union types array of the keys.</p>\n<p>So let's investigate the issue. We'll start with <code>Object.keys</code> definition in pre-built <code>lib.d.ts</code>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">interface</span><span style=\"color:#FFCB6B\"> ObjectConstructor</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  //...</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  keys</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">o</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> object</span><span style=\"color:#89DDFF\">):</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  keys</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">o</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {}):</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>If you find it weird that <code>keys</code> is defined twice, its called <mark>Function/Method overloading</mark>. You can basically define multiple function declarations for flexible usage.</p>\n</blockquote>\n<p>As you can see, its hard coded to always return <code>string[]</code>. I'm sure its there for good reasons, but its quite inconvenient for me, so I'm gonna override this method to infer the keys correctly from what it is passed.</p>\n<p>If you have a root <code>.d.ts</code> file in your project, put the snippet below right in it.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> ObjectKeys</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">Obj</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> Obj</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#FFCB6B\"> object</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  ?</span><span style=\"color:#BABED8\"> (</span><span style=\"color:#89DDFF\">keyof</span><span style=\"color:#FFCB6B\"> Obj</span><span style=\"color:#BABED8\">)[]</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  :</span><span style=\"color:#FFCB6B\"> Obj</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#FFCB6B\"> number</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  ?</span><span style=\"color:#BABED8\"> []</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  :</span><span style=\"color:#FFCB6B\"> Obj</span><span style=\"color:#C792EA\"> extends</span><span style=\"color:#FFCB6B\"> Array</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">any</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#FFCB6B\"> string</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  ?</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#BABED8\">[]</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  :</span><span style=\"color:#FFCB6B\"> never</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">interface</span><span style=\"color:#FFCB6B\"> ObjectConstructor</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  keys</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">ObjectType</span><span style=\"color:#89DDFF\">&gt;(</span><span style=\"color:#BABED8;font-style:italic\">o</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> ObjectType</span><span style=\"color:#89DDFF\">):</span><span style=\"color:#FFCB6B\"> ObjectKeys</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">ObjectType</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now let's try the code above with the new <code>Object.keys</code>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> apps </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> Object</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">keys</span><span style=\"color:#BABED8\">(openApps)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// const apps: (\"finder\" | \"launchpad\" | \"safari\" | \"messages\" | \"mail\" | \"maps\" | \"photos\" | \"facetime\" | \"calendar\")[]</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Don't trust me? Check it out yourself @ <a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBA8gRgKwgY2AaQiAzgHnggPigF5ZEoIAPYCAOwBMsoB7RFYAKCigH4oAKANaZmAMzIIAlAG0AulygAuCRWp1GUWgFcAtnAgAnBXzkLl+VTQZMAggYMBDEDge0QRAD5QswAwEtaAHNjb18AwNNuZVoIADdDAG4ODgCaA1EHZGh8dgBhZlofAy1UZgMoAG8FYWw8NlQAFXAIAn5mc3rgJshJDqRUDFqcxuaCJIBfZOQCnxZIWhswMCZSKu5RAPpDZQyAGywIABoFXYctWmQACzAHeh2HfaOFLAcM-3vH4+4dCCwXwN+HwOXygOgcfl2QKe3wcyyhILAl2YwGYWHhCgyWWAfh+6O4yAe6gcBnR4ySHGmhWAUFhyxIEnYADoalg2vNFstJEkgA\" target=\"_blank\" rel=\"noopener\">TypeScript Playground</a></p>\n<blockquote>\n<p>Note: All the credit goes to Steven Baumgeitner's blog post about this exact same thing. I just ripped it off <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">. You can read more about fixing <code>Object.keys</code> on his <a href=\"https://fettblog.eu/typescript-better-object-keys/\" target=\"_blank\" rel=\"noopener\">blog post</a>.</p>\n</blockquote>\n<p>So, this is it!! Hope you got something out of this blog post!</p>\n<p>Signing off!!</p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript </a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--react-hooks-return-array-issue\">Part 3 - React TypeScript Hooks issue when returning array</a><br><a> Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"> TypeScript tricks (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br>\n      </p>\n    </blockquote><p></p>\n",
    "id": "get-to-know-typescript--mindblowing-typescript-tricks",
    "reading_time": 8.175,
    "toc": [
      {
        "indent": 0,
        "id": "A-little-note...",
        "title": "A little note...",
        "length": 16
      },
      {
        "indent": 0,
        "id": "In-built-types",
        "title": "In-built types <img class=\"emoji\" draggable=\"false\" alt=\"🥱\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f971.svg\"/>",
        "length": 17
      },
      {
        "indent": 1,
        "id": "Pick",
        "title": "Pick",
        "length": 4
      },
      {
        "indent": 1,
        "id": "Partial",
        "title": "Partial",
        "length": 7
      },
      {
        "indent": 1,
        "id": "Readonly",
        "title": "Readonly",
        "length": 8
      },
      {
        "indent": 1,
        "id": "Record",
        "title": "Record",
        "length": 6
      },
      {
        "indent": 0,
        "id": "Juicy-stuff",
        "title": "Juicy stuff <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\"/>",
        "length": 14
      },
      {
        "indent": 1,
        "id": "Retrieve-element-type-from-Array",
        "title": "Retrieve element type from Array",
        "length": 32
      },
      {
        "indent": 1,
        "id": "Retrieve-type-from-a-promise",
        "title": "Retrieve type from a promise",
        "length": 28
      },
      {
        "indent": 1,
        "id": "Turning-a-tuple-into-union-types",
        "title": "Turning a tuple into union types",
        "length": 32
      },
      {
        "indent": 1,
        "id": "Union-types-from-object",
        "title": "Union types from object",
        "length": 23
      },
      {
        "indent": 1,
        "id": "A-better-Object.Keys",
        "title": "A better Object.Keys",
        "length": 20
      }
    ],
    "series": "Get to know TypeScript",
    "seriesIndex": 4
  },
  "moving-macos-from-react-to-preact-vite": {
    "cover_image": "media/moving-from-react-to-preact-vite--always-has-been-meme.jpg",
    "title": "Moving React app to Preact <img class=\"emoji\" draggable=\"false\" alt=\"⚛\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/269b.svg\"/> in 10 minutes with Vite",
    "date": "2021-03-08T18:30:00.000Z",
    "description": "How I moved my 40+ components app from React to Preact in under 10 minutes",
    "body": "<p><img src=\"\" alt=\"Cable car\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/moving-from-react-to-preact-vite--cover/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/moving-from-react-to-preact-vite--cover/small.jpg\">\n      <img alt=\"Cable car\" data-src=\"../media/moving-from-react-to-preact-vite--cover/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Heya you awesome dev!!Glad to see ya here <img class=\"emoji\" draggable=\"false\" alt=\"🙂\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f642.svg\">. This post is just a recount of my experience when I moved a medium size React app(30+ components) to use Preact, in just <mark>10 minutes</mark>.</p>\n<h2 id=\"Is-it-true\"><a class=\"heading-link\" href=\"#Is-it-true\">#</a>Is it true?</h2>\n<p>In case you are wondering if my claim of moving an app this big from one framework to other in just 10 minutes is true or just some clickbaity hoax, I assure you it isn't true. It didn't take 10 minutes for this.</p>\n<p>It took somewhere around <mark>8-9</mark> <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\"></p>\n<p>Yup. It took <strong>less than 10 minutes</strong> to move it. I put 10 minutes in the title b'coz humans love multiples of 10 a lot <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"></p>\n<h1 id=\"What-is-this-app\"><a class=\"heading-link\" href=\"#What-is-this-app\">#</a>What is this app?</h1>\n<p>Alright, so the app in question is a fun side project I'm working on, <a href=\"https://macos.now.sh\" target=\"_blank\" rel=\"noopener\">macOS Web</a>, which is basically a MacOS Big Sur clone for Web(Don't tell Apple <img class=\"emoji\" draggable=\"false\" alt=\"🤫\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92b.svg\">). As you can see in the screenshot below, it looks like MacOS Big Sur, just running in the browser.</p>\n<p><img src=\"\" alt=\"MacOS Web screenshot\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.25%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/moving-from-react-to-preact-vite--macos-screenshot/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/moving-from-react-to-preact-vite--macos-screenshot/small.png\">\n      <img alt=\"MacOS Web screenshot\" data-src=\"../media/moving-from-react-to-preact-vite--macos-screenshot/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>I started making it in <mark>React</mark> and <mark>Snowpack</mark> (Think of it as Webpack that does everything you want it do, without telling it anything) boilerplate, then around 2 weeks back, I moved it from <mark>Snowpack</mark> to <mark>Vite</mark> (Similar to Snowpack, just more refined and with more features.), and got some really cool features out of it.</p>\n<p>Then just a few days ago, I tried an experiment to move it to Preact. I treat this project as a playground of sorts and am constantly stirring things up in it. I just made a new branch, and started fooling around. And surprisingly, this whole moving took less than 10 minutes.</p>\n<h1 id=\"Process\"><a class=\"heading-link\" href=\"#Process\">#</a>Process</h1>\n<p>Here's a brief breakdown of the whole process.</p>\n<h2 id=\"Installing-right-dependencies\"><a class=\"heading-link\" href=\"#Installing-right-dependencies\">#</a>Installing right dependencies</h2>\n<p>This is parts of my <code>package.json</code> file before the transfer:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">dependencies</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">react</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^17.0.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">react-dom</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^17.0.0</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">devDependencies</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">@types/react</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^17.0.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">@types/react-dom</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^17.0.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">@vitejs/plugin-react-refresh</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^1.3.1</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">vite</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^2.0.5</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, we have <code>react</code> and <code>react-dom</code> as dependencies, their respective TypeScript Typings as <code>devDependencies</code>, along with <code>vite</code> itself, and lastly the special package <code>@vitejs/plugin-react-refresh</code>. This last package is responsible for the <mark>Hot Module Reload</mark> magic of Vite with React.</p>\n<blockquote>\n<p>Note: The package.json above contains only the relevant code for this article. There are over 20 dependencies in the actual project.</p>\n</blockquote>\n<p>So how do we move to Preact then? The answer lies in looking at the <mark>preact-ts</mark>(Preact starter with TypeScript) starter template of vite, and the only content here was <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">dependencies</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">preact</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^10.5.9</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">devDependencies</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">@prefresh/vite</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^2.0.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">vite</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">^2.0.5</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Whoa!! That was drastic!! Notice that there's no <code>preact-dom</code> here, as <code>preact</code> has all the DOM stuff built in. Plus we have a different package <mark>@prefresh/vite</mark>. This I gathered was the HMR module for Preact with Vite.</p>\n<p>So all I did was delete the <code>react</code> related packages, and installed these 2 packages(<code>preact</code> and <code>@prefresh/vite</code>).</p>\n<blockquote>\n<p>Why no <code>@types/preact</code>?</p>\n<p>Well, We needed <code>@types/react</code> because React doesn't ship its own Typings, which can make DX feel like shooting in the dark, so the community has kindly provided types themselves for it. <br>\nBut preact is a different story. It ships its own TypeScript typings, so we don't need any extra packages. It's just awesome that way <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\">.</p>\n</blockquote>\n<h2 id=\"Modifying-vite.config.ts\"><a class=\"heading-link\" href=\"#Modifying-vite.config.ts\">#</a>Modifying vite.config.ts</h2>\n<p>The <code>vite.config.ts</code> with React <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> defineConfig</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">vite</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#BABED8\"> reactRefresh </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">@vitejs/plugin-react-refresh</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// https://vitejs.dev/config/</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF;font-style:italic\"> default</span><span style=\"color:#82AAFF\"> defineConfig</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  plugins</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#82AAFF\">reactRefresh</span><span style=\"color:#BABED8\">()]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  esbuild</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    jsxInject</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">import React from 'react'</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And the new config is:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> defineConfig</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">vite</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#BABED8\"> prefresh </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">@prefresh/vite</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// https://vitejs.dev/config/</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#89DDFF;font-style:italic\"> default</span><span style=\"color:#82AAFF\"> defineConfig</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  esbuild</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    jsxFactory</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">h</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    jsxFragment</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Fragment</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    jsxInject</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">import { h, Fragment } from 'preact'</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  plugins</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#82AAFF\">prefresh</span><span style=\"color:#BABED8\">()]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  alias</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    react</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">preact/compat</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<ol>\n<li>\n<p>Notice the <code>esbuild</code> property. Vite is built on top this super fast ES module bundler <code>esbuild</code>, here we are passing some options to it. <code>jsxFactory</code> and <code>jsxFragment</code> are exactly what they look like. The <code>jsxInject</code> here is a very <img class=\"emoji\" draggable=\"false\" alt=\"✨\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2728.svg\">magical<img class=\"emoji\" draggable=\"false\" alt=\"✨\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2728.svg\"> property, that automatically puts the statement passed to it in every single file, so it saves you the trouble of importing <code>h</code> from preact in every single file, or <code>React</code> for a <code>react</code> app. And during the production build, vite strips out unnecessary imports, so files not needing preact will end up with no preact at all. So no harm is done ultimately.</p>\n</li>\n<li>\n<p>In the <code>plugins</code> property, I have replaced <code>reactRefresh</code> with <code>prefresh</code>, and now our app supports HMR for preact.</p>\n</li>\n<li>\n<p>Lastly, <code>alias</code> is the most, <strong>MOST</strong> important property here. In this project, I'm using 15+ packages that import directly from <code>React</code>, and moving to preact would have broken them completely. So the alias property accepts a key value pair. In this case, I'm pointing <code>react</code> to <code>preact/compat</code>, which is <code>preact</code>'s compatibility layer to work with existing react apps.</p>\n</li>\n</ol>\n<h2 id=\"Fix-tsconfig.json\"><a class=\"heading-link\" href=\"#Fix-tsconfig.json\">#</a>Fix tsconfig.json</h2>\n<p>We are using TypeScript with React, and we have to tell it that the JSX factory and fragments are now different, so let's do that small change.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">jsx</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">preserve</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">jsxFactory</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">h</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">jsxFragmentFactory</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">Fragment</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Modify-index.tsx\"><a class=\"heading-link\" href=\"#Modify-index.tsx\">#</a>Modify index.tsx</h2>\n<p>The entrypoint of our app is the <code>index.tsx</code> app, which would need some modification to work with preact. Luckily the changes needed are <strong>tiny</strong>.</p>\n<p>The code before <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#BABED8\"> ReactDOM </span><span style=\"color:#89DDFF;font-style:italic\">from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">react-dom</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> Desktop</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./views/desktop/Desktop</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">ReactDOM</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">render</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">Desktop</span><span style=\"color:#89DDFF\"> /&gt;,</span><span style=\"color:#BABED8\"> document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">getElementById</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">root</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we are doing a <code>ReactDOM.render</code>. But preact itself has a <code>render</code> method. SO let's swap it out with.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> render</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">preact</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> Desktop</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">./views/desktop/Desktop</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">render</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">Desktop</span><span style=\"color:#89DDFF\"> /&gt;,</span><span style=\"color:#BABED8\"> document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">getElementById</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">root</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And BAM!! That's it. Only these 4 files needed to be changed. And this is how it all happened in less than 10 minutes.</p>\n<h1 id=\"Results\"><a class=\"heading-link\" href=\"#Results\">#</a>Results</h1>\n<p>Let's talk business. What benefits did I get out of this weird, eccentric wish to move a whole codebase from one framework to another?</p>\n<h2 id=\"No-need-to-change-imports\"><a class=\"heading-link\" href=\"#No-need-to-change-imports\">#</a>No need to change imports</h2>\n<p>There are over 30+ files that import something from <code>react</code>. And even now, they're importing from <code>react</code>. Only difference is that its actually <code>preact/compat</code> underneath. I didn't have to go and change every single import.</p>\n<p><img src=\"\" alt=\"It's preact underneath? Always has been\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.166666666666664%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/moving-from-react-to-preact-vite--always-has-been-meme/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/moving-from-react-to-preact-vite--always-has-been-meme/small.jpg\">\n      <img alt=\"It's preact underneath? Always has been\" data-src=\"../media/moving-from-react-to-preact-vite--always-has-been-meme/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<h2 id=\"Reduced-bundle-size\"><a class=\"heading-link\" href=\"#Reduced-bundle-size\">#</a>Reduced bundle size</h2>\n<p><code>react</code> alone isn't everything. It needs to be paired up with <code>react-dom</code>, to actually render stuff on web. Both of these combined weigh <mark>129KB</mark> minified, and <mark>42.4KB</mark> min+gzip. That's not much really, but I'm a bundle size freak. I want as less size as possible.</p>\n<p>Moving to preact did that for me. <code>preact</code> is just <mark>4KB</mark> min+gzip. 90% smaller!<img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\">. Quite miraculous, right?</p>\n<h2 id=\"Runtime-performance\"><a class=\"heading-link\" href=\"#Runtime-performance\">#</a>Runtime performance</h2>\n<p>Oh boy, this one is very very interesting.</p>\n<p>You see, first I heard of preact was 3 years ago. I found out this 3KB alternative to React, and I quite liked the concept. I also read in some article that its runtime performance was much better. I didn't care at the time, because really, browsers are amazingly fast, and runtime perf didn't matter to me much. So I never cared about it.</p>\n<p>But in macOS Web, I realized I desperately needed better runtime performance because of some very janky animations in it. The whole app was very laggy. This was one of the motivations of switching to preact.</p>\n<p>So when I was done moving the app, and fired up the dev server, my jaw dropped to the floor.</p>\n<p><img src=\"\" alt=\"Jaw drop\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/moving-from-react-to-preact-vite--jaw-drop/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/moving-from-react-to-preact-vite--jaw-drop.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>All the jank was gone!! Literally <strong>GONE</strong>. Just vanished in thin air. When I hovered over the dock, perfectly smooth. When I open menus, perfectly smooth. When I switched between light and dark themes, perfectly smooth.</p>\n<p>You can try it out yourself. (Better you view them on desktop)</p>\n<p>React version <img class=\"emoji\" draggable=\"false\" alt=\"👉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f449.svg\"> <a href=\"https://macos-web-fyri0fstj-puruvj.vercel.app/\" target=\"_blank\" rel=\"noopener\">macos-web-fyri0fstj-puruvj.vercel.app</a> <br>\nPreact version <img class=\"emoji\" draggable=\"false\" alt=\"👉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f449.svg\"> <a href=\"https://macos.now.sh\" target=\"_blank\" rel=\"noopener\">macos.now.sh</a></p>\n<p>See for yourself which is smoother.</p>\n<h1 id=\"Unsung-hero\"><a class=\"heading-link\" href=\"#Unsung-hero\">#</a>Unsung hero</h1>\n<p>Until now I've been singing about Preact, but the true hero of the story is <mark>Vite</mark>. Look back into the section where I'm installing the dependencies. There's only 1 needed devDependency needed there, <code>vite</code>. <code>vite</code> does everything for you under the hood. It transpiles typescript without any unneeded packages, it transforms JSX into JS readable format, it minifies the crap out of the bundles, it supports all kind of pre-processors, and it does all that without you telling it to do that.</p>\n<p>If I had initialized this app with <code>create-react-app</code>, which is kind of the standard, this migration wouldn't have been possible, as it would take a lot of time and lots of banging your head against the wall.</p>\n<p><img src=\"\" alt=\"Banging head against window\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/moving-from-react-to-preact-vite--banging-head/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/moving-from-react-to-preact-vite--banging-head.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>But with vite, it was easy as <code>npm install preact</code> and changing <code>index.tsx</code> to use <code>preact</code> instead of <code>react</code>.</p>\n<p>Vite is very amazing, and very versatile. I'm very much in love with it and have no intention of moving away from it anytime soon.</p>\n<p>And if you're skeptical about it, Vite is created by the creator of VueJS, <a href=\"https://twitter.com/youyuxi\" target=\"_blank\" rel=\"noopener\">Evan You</a>. And its not just for Vue, it's very much framework agnostic. You can use it with any framework(React, Preact, Vue, lit-element, and more. Heck even the next version of svelte is going to be based on Vite itself).</p>\n<p>So I really invite you to check Vite out sometime. It's like a breath of fresh air. <a href=\"https://vitejs.dev/\" target=\"_blank\" rel=\"noopener\">Vite Homepage</a></p>\n<p>I hope you got something good out of this article <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\">.</p>\n<p>Signing off!</p>\n",
    "id": "moving-macos-from-react-to-preact-vite",
    "reading_time": 5.5925,
    "toc": [
      {
        "indent": 1,
        "id": "Is-it-true",
        "title": "Is it true?",
        "length": 11
      },
      {
        "indent": 0,
        "id": "What-is-this-app",
        "title": "What is this app?",
        "length": 17
      },
      {
        "indent": 0,
        "id": "Process",
        "title": "Process",
        "length": 7
      },
      {
        "indent": 1,
        "id": "Installing-right-dependencies",
        "title": "Installing right dependencies",
        "length": 29
      },
      {
        "indent": 1,
        "id": "Modifying-vite.config.ts",
        "title": "Modifying vite.config.ts",
        "length": 24
      },
      {
        "indent": 1,
        "id": "Fix-tsconfig.json",
        "title": "Fix tsconfig.json",
        "length": 17
      },
      {
        "indent": 1,
        "id": "Modify-index.tsx",
        "title": "Modify index.tsx",
        "length": 16
      },
      {
        "indent": 0,
        "id": "Results",
        "title": "Results",
        "length": 7
      },
      {
        "indent": 1,
        "id": "No-need-to-change-imports",
        "title": "No need to change imports",
        "length": 25
      },
      {
        "indent": 1,
        "id": "Reduced-bundle-size",
        "title": "Reduced bundle size",
        "length": 19
      },
      {
        "indent": 1,
        "id": "Runtime-performance",
        "title": "Runtime performance",
        "length": 19
      },
      {
        "indent": 0,
        "id": "Unsung-hero",
        "title": "Unsung hero",
        "length": 11
      }
    ],
    "seriesIndex": 0
  },
  "get-to-know-typescript--react-hooks-return-array-issue": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "React TypeScript Hooks issue when returning array",
    "date": "2021-02-18T18:30:00.000Z",
    "description": "React and TypeScript make up a great pair. But when you're trying to make your own hooks, and returning an array, TypeScript yells at your. Find out why.",
    "body": "<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript </a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></a><br><a> Part 3 - React TypeScript Hooks issue when returning array (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--mindblowing-typescript-tricks\">Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"> TypeScript tricks</a><br>\n      </p>\n    </blockquote><p></p>\n<p><img src=\"\" alt=\"Batman and Robin's dance\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/segregate-array-return-types-react-batman-robin/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/segregate-array-return-types-react-batman-robin.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>React and TypeScript make for a mean pair. Combined, they can rule the whole world together. But sometimes, these two can get off on a tangent about some small details, and we the devs have to be the scapegoat in their battle of egos. One such problem is when we're making our own custom hooks, which return an array of a value and a function, just like <code>useState</code>.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">state</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setState</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">null</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It's clearly visible that <code>state</code> is a value, and <code>setState</code> is a function. When you use this hook, everything works out fine, and these 2 have their own types on them.</p>\n<p>But the issue happens when you're trying to make your own hook that returns an array, very similar in structure to <code>useState</code>. Let's see an example:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> useState</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">react</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useTheme</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setTheme</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useState</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">light</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Do epic stuff here</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Return the 2 state variables</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#F07178\"> [</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setTheme</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we have a <code>useTheme</code> hook, which manages our theme switching magic. Here, we declare state variables, <code>theme</code>, with its setter <code>useTheme</code>. Then we do some Web dev kung fu in using these 2 variables. Lastly we're returning an array of <code>[theme, setTheme]</code>, so we can utilise the theme and change it from anywhere. All fine.</p>\n<p><strong>Until you try to use this hook <img class=\"emoji\" draggable=\"false\" alt=\"😈\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f608.svg\"></strong></p>\n<p>Let's say you're writing a component whose job is to switch the theme, and it uses our <code>useTheme</code> hook to do it.</p>\n<p>You create a function to change the theme using <code>setTheme</code> exported from this hook:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setTheme</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> useTheme</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> toggleTheme </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> setTheme</span><span style=\"color:#BABED8\">(theme </span><span style=\"color:#89DDFF\">===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">light</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">dark</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> :</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">light</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And you run into a weird error:</p>\n<p><img src=\"\" alt=\"Array type weird error\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/segregate-array-return-types-react-error-array-type/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/segregate-array-return-types-react-error-array-type.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>The error according to TypeScript is:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span>This expression is not callable.</span></span>\n<span class=\"line\"><span>Not all constituents of type 'string | Dispatch&lt;SetStateAction&lt;string&gt;&gt;' are callable.</span></span>\n<span class=\"line\"><span>Type 'string' has no call signatures.ts(2349)</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>That's weird. Why is that happening?</p>\n<h1 id=\"(TLDR)-Solution\"><a class=\"heading-link\" href=\"#(TLDR)-Solution\">#</a>(TLDR) Solution</h1>\n<p>Before I jump into the explanation, here's the final solution directly.</p>\n<h2 id=\"Option-1\"><a class=\"heading-link\" href=\"#Option-1\">#</a>Option 1</h2>\n<p>Make this function's return type a <mark>Tuple</mark>(See the section below for the explanation).</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> useState</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> useEffect</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">react</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> TTheme</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">light</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">dark</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useTheme</span><span style=\"color:#89DDFF\">():</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">string</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> React</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#FFCB6B\">Dispatch</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">React</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#FFCB6B\">SetStateAction</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">string</span><span style=\"color:#89DDFF\">&gt;&gt;</span><span style=\"color:#BABED8\">] </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">...</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will return a Tuple instead of an Array, so every element will have its own separate type. The error will be resolved</p>\n<h2 id=\"Option-2\"><a class=\"heading-link\" href=\"#Option-2\">#</a>Option 2</h2>\n<p>This is the less verbose way, and I prefer this one over the 1st one.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> useState</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> useEffect</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">react</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> TTheme</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">light</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">dark</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> useTheme</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#F07178\"> [</span><span style=\"color:#BABED8\">theme</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> setTheme</span><span style=\"color:#F07178\">] </span><span style=\"color:#89DDFF;font-style:italic\">as</span><span style=\"color:#C792EA\"> const</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>as const</code> here might look weird, but it's perfectly valid. In this case, it makes TypeScript infer the array being returned as a <code>readonly</code> tuple. This will work perfectly.</p>\n<h1 id=\"Explanation\"><a class=\"heading-link\" href=\"#Explanation\">#</a>Explanation</h1>\n<p>If you see closely, the type of <code>setTheme</code> here is showed as</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">string </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> React</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">Dispatch</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#BABED8\">React</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">SetStateAction</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#BABED8\">string</span><span style=\"color:#89DDFF\">&gt;&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>But that's weird. We clearly know that <code>setTheme</code> is a function. If you hover over it in your editor, you can confirm it's type is <code>React.Dispatch&lt;React.SetStateAction&lt;string&gt;&gt;</code>, it doesn't have any <code>string</code> type as a constituent.</p>\n<p>But wait, that's not it. If you hover over <code>theme</code>, it's type is the same as <code>setState</code> above.</p>\n<p>And when you hover over <code>useTheme</code>, you find that it returns an Array of the type above <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">(string </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> React</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">Dispatch</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#BABED8\">React</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">SetStateAction</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#BABED8\">string</span><span style=\"color:#89DDFF\">&gt;&gt;</span><span style=\"color:#BABED8\">)[]</span></span>\n<span class=\"line\"></span></code></pre>\n<p><img src=\"\" alt=\"What the hell is going on\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/segregate-array-return-types-react-confusion/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/segregate-array-return-types-react-confusion.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>This is weird. How can we have TypeScript separate the types for each item?</p>\n<p>Answer here is tuples.</p>\n<h2 id=\"Tuples-in-TypeScript\"><a class=\"heading-link\" href=\"#Tuples-in-TypeScript\">#</a>Tuples in TypeScript</h2>\n<p>Tuples look exactly like Arrays. Here's an Array:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">[</span><span style=\"color:#F78C6C\">2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9CAC\"> true</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And here's a tuple:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">[</span><span style=\"color:#F78C6C\">2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9CAC\"> true</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The difference between the two? 1st one's type, as inferred by TypeScript, is <code>(number | string | boolean)[]</code>, while second one's type inference is <code>[number, string, boolean]</code>. In the Array example, TypeScript is assigning the same type to every single item, because technically, that's the definition of an Array.</p>\n<blockquote>\n<p>An array is a data structure that contains a group of elements. <strong>Typically these elements are all of the same data type, such as an integer or string.</strong></p>\n</blockquote>\n<p>All are of same types. That's why TypeScript assigns same type to every single element, by combining all possible types from the array elements using union type operator(<code>|</code>).</p>\n<p>Tuples, on the other hand, are ordered pair. That means, in the order you define the types, that's the order you enter them into a tuple. So TypeScript infers them correctly, based on the array index.</p>\n<h2 id=\"Defining-a-tuple-type\"><a class=\"heading-link\" href=\"#Defining-a-tuple-type\">#</a>Defining a tuple type</h2>\n<p>This is simple. Just specify the types in the order they appear.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> coordinates</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">23.4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 43.67</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Simple, right :)</p>\n<h1 id=\"Conclusion\"><a class=\"heading-link\" href=\"#Conclusion\">#</a>Conclusion</h1>\n<p>So this is the end of this article. Hope you got something good away from it.</p>\n<p>Signing off.</p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript </a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></a><br><a> Part 3 - React TypeScript Hooks issue when returning array (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--mindblowing-typescript-tricks\">Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"> TypeScript tricks</a><br>\n      </p>\n    </blockquote><p></p>\n",
    "id": "get-to-know-typescript--react-hooks-return-array-issue",
    "reading_time": 3.4875,
    "toc": [
      {
        "indent": 0,
        "id": "(TLDR)-Solution",
        "title": "(TLDR) Solution",
        "length": 15
      },
      {
        "indent": 1,
        "id": "Option-1",
        "title": "Option 1",
        "length": 8
      },
      {
        "indent": 1,
        "id": "Option-2",
        "title": "Option 2",
        "length": 8
      },
      {
        "indent": 0,
        "id": "Explanation",
        "title": "Explanation",
        "length": 11
      },
      {
        "indent": 1,
        "id": "Tuples-in-TypeScript",
        "title": "Tuples in TypeScript",
        "length": 20
      },
      {
        "indent": 1,
        "id": "Defining-a-tuple-type",
        "title": "Defining a tuple type",
        "length": 21
      },
      {
        "indent": 0,
        "id": "Conclusion",
        "title": "Conclusion",
        "length": 10
      }
    ],
    "series": "Get to know TypeScript",
    "seriesIndex": 3
  },
  "get-to-know-typescript--using-typescript-without-typescript": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"/>",
    "date": "2021-02-11T18:30:00.000Z",
    "description": "Wanna use TypeScript but don't want all the compiler and tooling overhead? Read on to know how.",
    "body": "<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript </a><br><a> Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"> (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--react-hooks-return-array-issue\">Part 3 - React TypeScript Hooks issue when returning array</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--mindblowing-typescript-tricks\">Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"> TypeScript tricks</a><br>\n      </p>\n    </blockquote><p></p>\n<p>Before starting, I wanna get this outta the way: If your reaction on reading the title was anywhere close to Hermione's <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Hermione losing her mind\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/using-ts-without-ts-hermione-goes-crazy/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/using-ts-without-ts-hermione-goes-crazy.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Don't worry. I haven't gone crazy, and neither will you after reading this <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"></p>\n<h1 id=\"Why-is-this-so-long\"><a class=\"heading-link\" href=\"#Why-is-this-so-long\">#</a>Why is this so long? <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\"></h1>\n<p>This article is around 20 minutes long. The reason it's so long is because it delves deep into why you should consider this approach, and has explanations for a lot of broad topics.</p>\n<p>With that out of the way, let's begin.</p>\n<p>Lemme break it down</p>\n<h1 id=\"Best-things-about-TypeScript\"><a class=\"heading-link\" href=\"#Best-things-about-TypeScript\">#</a>Best things about TypeScript</h1>\n<p>What are the best things about TypeScript. Some things that can be listed here:</p>\n<ul>\n<li>Static type Checking</li>\n<li>Seamless integration with <mark>VSCode</mark></li>\n<li>Futuristic. Use any syntax that isn't even in JS and TS will convert it to something backwards-compatible.</li>\n<li>JS files can be converted to TS files seamlessly.</li>\n<li>Catches silly bugs in your code.</li>\n<li>Strict about code.</li>\n</ul>\n<p>There can be more,</p>\n<h1 id=\"Think-again!\"><a class=\"heading-link\" href=\"#Think-again!\">#</a>Think again!</h1>\n<p>Are all of these really the best things about TypeScript? Sure these are all really good. But the problem that comes with them is the fact that you need an additional compile step. Also, you need tooling to watch your project as the files change. That adds a boatload of configuration, dependencies, and just more and more complexity.</p>\n<h1 id=\"Duh-just-use-a-boilerplate\"><a class=\"heading-link\" href=\"#Duh-just-use-a-boilerplate\">#</a>Duh, just use a boilerplate <img class=\"emoji\" draggable=\"false\" alt=\"🙄\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f644.svg\"></h1>\n<p>Yeah, I got it dude/tte, I can use a boilerplate from npm that will set up the right config, and all I have to do is <code>npm start</code> for watching and <code>npm run build</code> for final bundle.</p>\n<p>But it doesn't get rid of the added complexity that is the dependencies, watch step and build step.</p>\n<p>For modern Web App development, it's all fine. You already have a dev server running. Throwing in a few more plugins won't make much difference. And tools like <a href=\"https://www.snowpack.dev/\" target=\"_blank\" rel=\"noopener\">Snowpack</a> and <a href=\"https://vitejs.dev/\" target=\"_blank\" rel=\"noopener\">Vite</a> completely get rid of complexities by collapsing layers(That is, they come with all the right <strong>batteries included</strong>, so you don't have to do any config work yourselves. If that piqued your interest, check out this amazing article by <a href=\"https://twitter.com/swyx\" target=\"_blank\" rel=\"noopener\">Shawn \"swyx\" Wang</a> about <a href=\"https://www.swyx.io/collapsing-layers/\" target=\"_blank\" rel=\"noopener\">Collapsing Layers</a>)</p>\n<p>The problem comes when you're trying to build your own library to be published on npm. And by library here, I refer to a <strong>non-UI library</strong>(Not Component libraries, for example).</p>\n<p>Why non-UI library? Because you aren't running any dev server on them by default. You have to test them everytime by reloading the page, or worse, again and again run <code>node index.js</code> if it's a NodeJS related library.</p>\n<p>With libraries like these, if you include TypeScript in development process, there are some <strong>heavy</strong> drawbacks:</p>\n<h2 id=\"Watch-step\"><a class=\"heading-link\" href=\"#Watch-step\">#</a>Watch step</h2>\n<p>You have to keep a watcher running in one terminal, and use another one to test your code. You end up with a situation where you have 2 terminals open:</p>\n<p><img src=\"\" alt=\"Double terminals\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.25%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/using-ts-without-ts-double-terminals/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/using-ts-without-ts-double-terminals/small.png\">\n      <img alt=\"Double terminals\" data-src=\"../media/using-ts-without-ts-double-terminals/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Split terminals. And good luck dealing with 2 terminal windows if your terminal doesn't split up.</p>\n<h2 id=\"Build-step\"><a class=\"heading-link\" href=\"#Build-step\">#</a>Build step</h2>\n<p>This one is probably worse than the watch step, for frontend libraries. In frontend, one of the most important thing is the bundle size you're sending to the user. The bundle size has to be kept as low as possible, so the site can load fast enough.</p>\n<p>And this where one of TypeScript's best feature actually becomes a handicap: <strong>TRANSPILING FOR OLDER BROWSERS</strong></p>\n<p>Look at this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> arr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> newArr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#89DDFF\">...</span><span style=\"color:#BABED8\">arr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 6</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Looks simple enough. We're just trying to create a new array from an existing array and add some items to it using the <mark>Spread operator</mark>. But if your TSConfig's target is specified as less than <code>es2015</code>, you're gonna get a very weird result:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">use strict</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">var</span><span style=\"color:#BABED8\"> __spreadArrays </span><span style=\"color:#89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  (</span><span style=\"color:#89DDFF\">this</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#89DDFF\"> this.</span><span style=\"color:#BABED8\">__spreadArrays) </span><span style=\"color:#89DDFF\">||</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  function</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    for</span><span style=\"color:#F07178\"> (</span><span style=\"color:#C792EA\">var</span><span style=\"color:#BABED8\"> s</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> i</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> il</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> arguments</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">length</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#BABED8\"> i</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#BABED8\"> il</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#BABED8\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#F07178\">) </span><span style=\"color:#BABED8\">s</span><span style=\"color:#89DDFF\"> +=</span><span style=\"color:#BABED8\"> arguments</span><span style=\"color:#F07178\">[</span><span style=\"color:#BABED8\">i</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">length</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    for</span><span style=\"color:#F07178\"> (</span><span style=\"color:#C792EA\">var</span><span style=\"color:#BABED8\"> r</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> Array</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">s</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> k</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> i</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#BABED8\"> i</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#BABED8\"> il</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#BABED8\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#F07178\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      for</span><span style=\"color:#F07178\"> (</span><span style=\"color:#C792EA\">var</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> arguments</span><span style=\"color:#F07178\">[</span><span style=\"color:#BABED8\">i</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> j</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> jl</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">length</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#BABED8\"> j</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#BABED8\"> jl</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#BABED8\"> j</span><span style=\"color:#89DDFF\">++,</span><span style=\"color:#BABED8\"> k</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#F07178\">) </span><span style=\"color:#BABED8\">r</span><span style=\"color:#F07178\">[</span><span style=\"color:#BABED8\">k</span><span style=\"color:#F07178\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#F07178\">[</span><span style=\"color:#BABED8\">j</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#BABED8\"> r</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">var</span><span style=\"color:#BABED8\"> arr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">var</span><span style=\"color:#BABED8\"> newArr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> __spreadArrays</span><span style=\"color:#BABED8\">(arr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">6</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#BABED8\">])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Wohkay!! That's a tad too much. All we wanted to do was just concat an array with another. Effectively this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> arr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> newArr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> arr</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">concat</span><span style=\"color:#BABED8\">([</span><span style=\"color:#F78C6C\">6</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#BABED8\">])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>TypeScript injected a huge function for spreading purposes. Makes sense. Spread is meant to work on not just Arrays, but more structures, and has much more complexity than the simple concat function. It makes sense for TypeScript to do so.</p>\n<p>If you're a library author, and targeting modern workflows, it doesn't make sense for all this polyfilling. The target workflow, if modern enough, would already have it's own polyfilling system, and your library sending off its own polyfills will only make things worse, due to polyfill duplication. And forget polyfilling, what if the final user is targeting modern browsers? You'll still be sending polyfills to it.</p>\n<p>Similar is the case with using <mark>async/await</mark>:</p>\n<p>Look at this code sample <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">async</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> main</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> req</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">url</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#BABED8\"> req</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">json</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The main logic is just 2 lines. And when you compile it using TypeScript for targets before <code>es2017</code>, you get this ginormous result:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">use strict</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">var</span><span style=\"color:#BABED8\"> __awaiter </span><span style=\"color:#89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  (</span><span style=\"color:#89DDFF\">this</span><span style=\"color:#89DDFF\"> &amp;&amp;</span><span style=\"color:#89DDFF\"> this.</span><span style=\"color:#BABED8\">__awaiter) </span><span style=\"color:#89DDFF\">||</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">thisArg</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> _arguments</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> P</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> generator</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    function</span><span style=\"color:#82AAFF\"> adopt</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">value</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      return</span><span style=\"color:#BABED8\"> value</span><span style=\"color:#89DDFF\"> instanceof</span><span style=\"color:#FFCB6B\"> P</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        ?</span><span style=\"color:#BABED8\"> value</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        :</span><span style=\"color:#89DDFF\"> new</span><span style=\"color:#82AAFF\"> P</span><span style=\"color:#F07178\">(</span><span style=\"color:#C792EA\">function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">            resolve</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">value</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#89DDFF\"> new</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">P</span><span style=\"color:#89DDFF\"> ||</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">P</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#F07178\">))(</span><span style=\"color:#C792EA\">function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> reject</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      function</span><span style=\"color:#82AAFF\"> fulfilled</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">value</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">        try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">          step</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">generator</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">next</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">value</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        }</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">          reject</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      function</span><span style=\"color:#82AAFF\"> rejected</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">value</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">        try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">          step</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">generator</span><span style=\"color:#F07178\">[</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">throw</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">](</span><span style=\"color:#BABED8\">value</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        }</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">          reject</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      }</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      function</span><span style=\"color:#82AAFF\"> step</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">result</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">        result</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">done</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#82AAFF\"> resolve</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">result</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> adopt</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">result</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">then</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">fulfilled</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> rejected</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      }</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">      step</span><span style=\"color:#F07178\">((</span><span style=\"color:#BABED8\">generator</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> generator</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">apply</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">thisArg</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> _arguments</span><span style=\"color:#89DDFF\"> ||</span><span style=\"color:#F07178\"> []))</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">next</span><span style=\"color:#F07178\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> main</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#82AAFF\"> __awaiter</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">this,</span><span style=\"color:#89DDFF\"> void</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> void</span><span style=\"color:#F78C6C\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#89DDFF\">*</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> req</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> yield</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">url</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> yield</span><span style=\"color:#BABED8\"> req</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">json</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It creates this huge function to interop with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" target=\"_blank\" rel=\"noopener\">generators</a>. The function generated alone is <mark>1KB</mark>. 1KB mayn't be huge, but it makes all the difference for a library like Preact, which takes pride in it being only <mark>10kb</mark> minified.</p>\n<p>This is a big problem.</p>\n<blockquote>\n<p>Again, this is not a problem when you're developing a Web App. It's a problem when it's a library that ships polyfills that are not needed by your project.</p>\n</blockquote>\n<h1 id=\"Solution\"><a class=\"heading-link\" href=\"#Solution\">#</a>Solution</h1>\n<p>What I'm gonna say will be quite radical. Stay with me for a while.</p>\n<p><strong>DON'T WRITE CODE IN TYPESCRIPT FILES</strong></p>\n<h2 id=\"WHAT!!!\"><a class=\"heading-link\" href=\"#WHAT!!!\">#</a>WHAT?!?!?!</h2>\n<p>Yup. If you wanna drastically decrease the complexity in your tooling, don't write <code>.ts</code> files. <strong>Instead use TypeScript inside your .JS files</strong></p>\n<h2 id=\"You-lost-me-there-mate!\"><a class=\"heading-link\" href=\"#You-lost-me-there-mate!\">#</a>You lost me there, mate!</h2>\n<p>There's a way to use TypeScript within JavaScript files. And the only tooling it requires is:</p>\n<ul>\n<li>VSCode as the editor</li>\n<li>ESLint extension for VSCode</li>\n</ul>\n<p>That's it. And there's a very high probability that you, the reader have both of these already installed, if you're reading this blog post.</p>\n<h2 id=\"But-still-why-How-credible-is-it\"><a class=\"heading-link\" href=\"#But-still-why-How-credible-is-it\">#</a>But still, why? How credible is it?</h2>\n<p>I'll answer that with <a href=\"https://twitter.com/Rich_Harris/\" target=\"_blank\" rel=\"noopener\">Rich Harris</a>, creator of <mark>Svelte</mark> and <mark>Rollup</mark>'s tweet about this exact thing:</p>\n<p><img src=\"\" alt=\"Rich Harris's tweet\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 50.33333333333333%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/using-ts-without-ts-rich-harris-tweet/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/using-ts-without-ts-rich-harris-tweet/small.png\">\n      <img alt=\"Rich Harris's tweet\" data-src=\"../media/using-ts-without-ts-rich-harris-tweet/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p><a href=\"https://twitter.com/Rich_Harris/status/1323758415504646144\" target=\"_blank\" rel=\"noopener\">Source</a></p>\n</blockquote>\n<p>And let's have Preact's creator <a href=\"https://twitter.com/_developit\" target=\"_blank\" rel=\"noopener\">Jason Miller's</a> opinion too:</p>\n<p><img src=\"\" alt=\"Jason Miller's tweet\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 50.66666666666667%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/using-ts-without-ts-developit-tweet/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/using-ts-without-ts-developit-tweet/small.png\">\n      <img alt=\"Jason Miller's tweet\" data-src=\"../media/using-ts-without-ts-developit-tweet/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p><a href=\"https://twitter.com/_developit/status/1323790213597061120\" target=\"_blank\" rel=\"noopener\">Source</a></p>\n</blockquote>\n<p>With these 2 tech giants endorsing it, and me having had a good experience with this technique, I think it's credible enough.</p>\n<h1 id=\"Using-TypeScript-in-JavaScript-files\"><a class=\"heading-link\" href=\"#Using-TypeScript-in-JavaScript-files\">#</a>Using TypeScript in JavaScript files</h1>\n<p>VSCode has JSDoc built right into it.</p>\n<blockquote>\n<p>JSDoc is a way to document your code right in there, in comments. It was initially created to generate these huge documentation sites, but later VSCode adopted it for use in intellisense.</p>\n</blockquote>\n<p>You can get same level of intellisense by using JSDoc as you get in directly using TypeScript</p>\n<h2 id=\"Refresher-on-JSDoc\"><a class=\"heading-link\" href=\"#Refresher-on-JSDoc\">#</a>Refresher on JSDoc</h2>\n<p>You write JSDoc like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * Square a number</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">number</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> a</span><span style=\"color:#676E95;font-style:italic\"> Number to be squared</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> square</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> **</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>JSDoc starts with a double star(<code>/**</code>), not <code>/*</code>. VSCode will only recognize the comments as JSDoc if there are 2 stars.</p>\n<p>On next line, we are describing what the function does. It's a simple description.</p>\n<p>On the next line, <code>@param {number} a Number to be squared</code> is used to specify that the function parameter <code>a</code> is of type <code>number</code>. The text <code>Number to be squared</code> is just a description of this parameter.</p>\n<p>Let's see it in action <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"JSDoc demo function square\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/using-ts-without-ts-jsdoc-starting/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/using-ts-without-ts-jsdoc-starting.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>VSCode inferred parameter and function return type from JSDoc itself.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> square</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">):</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And you get this additional description whenever you use this function.</p>\n<p>If you wanna type a variable rather than a parameter, that's possible too.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">string</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> name </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Hello</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Let's-convert-a-TS-program-to-JS\"><a class=\"heading-link\" href=\"#Let's-convert-a-TS-program-to-JS\">#</a>Let's convert a TS program to JS</h2>\n<p>So let's take a look at this small TypeScript program. This is the same one I used in the predecessor of this blog post, <a href=\"https://puruvj.dev/blog/get-to-know-typescript-an-ode-to-typescript\" target=\"_blank\" rel=\"noopener\">An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript</a></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> sum</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> b</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> b</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#submit</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">addEventListener</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">click</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> val1</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input1</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">as</span><span style=\"color:#FFCB6B\"> HTMLInputElement</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> val2</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input2</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">as</span><span style=\"color:#FFCB6B\"> HTMLInputElement</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#82AAFF\">sum</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">val1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> val2</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So let's convert it into its JSDoc equivalent.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">number</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> a</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">number</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> b</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> sum</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> b</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> b</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#submit</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">addEventListener</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">click</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">HTMLInputElement</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> el1</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input1</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">HTMLInputElement</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> el2</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input2</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> val1</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> el1</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> val2</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> el2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#82AAFF\">sum</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">val1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> val2</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<ol>\n<li>\n<p><code>sum</code> function is simple enough. It has two parameters of type <code>number</code>, so we use <code>@param {number}</code></p>\n</li>\n<li>\n<p>In TS, we can simply wrap a value in parenthesis and assert its type, like <code>(document.querySelector('#input1') as HTMLInputElement)</code>. But there's no way to do that in JSDoc. We'd have to break that value as a separate variable and type it using <code>@type</code>. Look at variable <code>el1</code> and <code>el2</code>. I have broke down these elements from the <code>val1</code> and <code>val2</code> variables, so I could type them.</p>\n</li>\n<li>\n<p><code>val1</code> and <code>val2</code> are simply <code>el1.value</code> and <code>el2.value</code>. VSCode's in-built TypeScript now knows its dealing with an Input element selector, so it will provide us the right autocompletion.</p>\n</li>\n</ol>\n<h2 id=\"Something's-missing...\"><a class=\"heading-link\" href=\"#Something's-missing...\">#</a>Something's missing...</h2>\n<p>If you copy the above code and paste it into your own VSCode, you'll notice it'll not show any errors.</p>\n<p>It should show errors, because unlike the original(TypeScript) version, <code>val1</code> and <code>val2</code> are not preceded by <code>+</code>, the operator to convert these values to numbers. So if these are still strings, why aren't we getting any error?</p>\n<p>JavaScript is a very relaxed language. It will allow anything to slip by. That's its strength for a beginner, but a huge pain for an expert trying to build real apps. VSCode has to respect that lax nature for JS files, because in that case, a lot of working code will be seen as incorrect by TypeScript. So VSCode is very lax about JS files. Using JSDoc, it will provide you the intellisense, but it won't perform any hard checking.</p>\n<p>You can do something like this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#F07178\"> name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Puru</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\"><img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"></span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is a crime in TypeScript, but valid in JavaScript.</p>\n<h2 id=\"Enable-TypeScript-level-strict-checking-in-JS-files\"><a class=\"heading-link\" href=\"#Enable-TypeScript-level-strict-checking-in-JS-files\">#</a>Enable TypeScript level strict checking in JS files</h2>\n<p>You can enable strict checking in JS files by simply adding one comment at the top of the JS file</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// @ts-check</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That's it. This is our signal to VSCode to bring all of TypeScript into the battle. Now your code will be type checked as if it was TypeScript itself.</p>\n<p>But without any extra tooling/compile step <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\">.</p>\n<h1 id=\"Serious-TypeScript-stuff\"><a class=\"heading-link\" href=\"#Serious-TypeScript-stuff\">#</a>Serious TypeScript stuff</h1>\n<p>TypeScript is much more than just <code>number</code> and <code>string</code> and <code>boolean</code>. It has interfaces, Union Types, intersection types, helper types, declarations, and just so much more. How can we take full advantage of all these robust practices, while in JS files?</p>\n<p>Declare <code>d.ts</code> files.</p>\n<h2 id=\"d.ts-rocks!!\"><a class=\"heading-link\" href=\"#d.ts-rocks!!\">#</a>d.ts rocks!!</h2>\n<p>In case you're not familiar with them, <code>d.ts</code> are <mark>TypeScript Declaration files</mark>, and their sole purpose is to keep Declarations in them. For example, you have a function in a JS file.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> sum</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> b</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> b</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You can Type this function's parameters' types and return types inside a <code>d.ts</code> file:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> sum</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> b</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">):</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There!! Now whenever you import and use <code>sum</code> function, you'll automatically get intellisense as if the original function was written in TypeScript itself.</p>\n<p>But sometimes this isn't enough. Just typing the parameters and return type just isn't enough. For a great Developer Experience, you'd wanna type the internal variables of your functions too, because if even one variable is missing typing, all the other variables depending on it become useless for TypeScript.</p>\n<p>And you also wanna use advanced TypeScript features too.</p>\n<p>So here's a best-of-both-worlds alternative.</p>\n<h1 id=\"Declare-types-in-d.ts-import-in-JSDoc\"><a class=\"heading-link\" href=\"#Declare-types-in-d.ts-import-in-JSDoc\">#</a>Declare types in d.ts, import in JSDoc</h1>\n<p>Yup. You can import TypeScript types/interfaces from a d.ts file. Into your JSDoc. See how:</p>\n<p>So let's say we're building an app that uses <mark>Twitter API</mark> to get data. But Twitter API response is so huge, that you can get lost in debugging errors, if you don't have a set structure of what data can come back.</p>\n<p>So let's declare the return type of data that might come back:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> IncludesMedia</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  height</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  width</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  type</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">photo</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">video</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">animated_gif</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  preview_image_url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  media_key</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> ConversationIncludes</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  media</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> IncludesMedia</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  users</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> User</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> Mention</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  start</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  end</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  username</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> Hashtag</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  start</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  end</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  tag</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> EntityUrl</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  start</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  end</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** format: `https://t.co/[REST]` */</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  expanded_url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** The possibly truncated URL */</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  display_url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  status</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  title</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  description</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  unwound_url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  images</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    height</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    width</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> Attachments</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  poll_id</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  media_keys</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> User</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  username</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  description</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  profile_image_url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  verified</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> boolean</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  location</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  created_at</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  protected</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> boolean</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  url</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  public_metrics</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    followers_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    following_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    tweet_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    listed_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  };</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  entities</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    url</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">      urls</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> EntityUrl</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    };</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    description</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">      urls</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> EntityUrl</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">      mentions</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> Mention</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">      hashtags</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> Hashtag</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    };</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  };</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> ConversationResponseData</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  conversation_id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  text</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  author_id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  created_at</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  in_reply_to_user_id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  public_metrics</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    retweet_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    reply_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    like_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    quote_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  };</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  entities</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    mentions</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> Mention</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    hashtags</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> Hashtag</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    urls</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> EntityUrl</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  };</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  referenced_tweets</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    type</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">retweeted</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">quoted</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">replied_to</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  attachments</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> Attachments</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * Types from response after cleanup</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> interface</span><span style=\"color:#FFCB6B\"> ConversationResponse</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  data</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> ConversationResponseData</span><span style=\"color:#BABED8\">[]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  includes</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> ConversationIncludes</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  meta</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    newest_id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    oldest_id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    result_count</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  };</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  errors</span><span style=\"color:#89DDFF\">?:</span><span style=\"color:#FFCB6B\"> any</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>These types I actually wrote, from scratch, for an open source project I work on, <a href=\"https://github.com/twindle-co/twindle\" target=\"_blank\" rel=\"noopener\">Twindle</a>. It's an awesome project, do check it out sometime.</p>\n</blockquote>\n<p>Don't worry, you don't have to wrap your head around these types completely. Just notice 2 facts here:</p>\n<ol>\n<li>We're declaring interfaces</li>\n<li>We're exporting them all</li>\n</ol>\n<p>Now we're gonna use these types directly in JSDoc.</p>\n<p>So let's open up <code>index.js</code>, and start typing:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// @ts-check</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> req </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">TWITTER_API_URL</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import('./twitter.d').ConversationResponse</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#BABED8\"> req</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">json</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>What is that <code>import</code> doing in a comment, you may ask? That import works very similarly to a dynamic <code>import</code>, only difference is that here it's importing all the exported types from our declaration file, assuming that file lies in the same directory as index.js file.</p>\n<p>Next, we're using the <code>ConversationResponse</code> interface from the imported file. Now our <code>data</code> variable has perfect types, and will offer autocompletion and errors during typing.</p>\n<p>And all this is happening in VSCode. VSCode's built-in TypeScript is making a typings map from the comments and offering an experience similar akin to using TypeScript itself.</p>\n<p>And the best part, VSCode will show you autocomplete for the exported types from the module you imported. What are we devs without that hot autocomplete <img class=\"emoji\" draggable=\"false\" alt=\"🤓\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f913.svg\">?</p>\n<h1 id=\"Mix-n-Match\"><a class=\"heading-link\" href=\"#Mix-n-Match\">#</a>Mix n Match</h1>\n<p>You're not just limited to interfaces. You can use type aliases, classes, all imported from the d.ts file. And not just that, you can use all kinds of type helpers and operators in JSDoc.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Partial of imported type</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">Partial&lt;import('./twitter.d').ConversationResponse&gt;</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Pick types</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">Pick&lt;import('./twitter.d').ConversationResponse&gt;, 'data' | 'includes'&gt;</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Union types</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">number | string</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Tuple types</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">[[number, number], [number, number]]</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And a lot more!</p>\n<h1 id=\"Clean-comments\"><a class=\"heading-link\" href=\"#Clean-comments\">#</a>Clean comments</h1>\n<p>You can keep your JSDoc <code>@type</code>s clean by not having those <code>import</code> statements everywhere. You can create a JSDoc alias for these types at the top level of your apps, and directly use them(And the autocomplete will work in recommending those too). We'll use JSDoc's <code>@typedef</code> syntax here.</p>\n<blockquote>\n<p><code>@typedef</code> is used to declare complex types under a single alias. Think of it as a toned down version of <code>type</code> or <code>interface</code>.</p>\n</blockquote>\n<p>Let's a create a <code>types.js</code> file in top level directory of project, and the code follows:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">typedef</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">import(../../twitter.d).ConversationResponse</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#FFCB6B;font-style:italic\"> ConversationResponse</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That's it. Using it is now very clean. The above code of fetching from twitter API becomes simpler:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// @ts-check</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> req </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">TWITTER_API_URL</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/** </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">type</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">ConversationResponse</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#BABED8\"> req</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">json</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We got entirely rid of the <code>import</code> here. Much cleaner.</p>\n<p>And yes, <strong>VSCode shows autocomplete for this type alias, so you don't have to remember the complete word.</strong></p>\n<h1 id=\"Lastly-Generics\"><a class=\"heading-link\" href=\"#Lastly-Generics\">#</a>Lastly, <mark>Generics</mark></h1>\n<p>This topic might be the most searched for topic, because not many answers are there for using Generics in JSDoc. So let's see how to do this.</p>\n<p>So let's say we have a generic function <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> getDataFromServer</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">T</span><span style=\"color:#89DDFF\">&gt;(</span><span style=\"color:#BABED8;font-style:italic\">url</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> responseType</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> T</span><span style=\"color:#89DDFF\">):</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">T</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Do epic shit</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To convert this to JSDoc, lemme introduce you to anew JSDoc thing, <code>@template</code>. We'll use this to define the generic type <code>T</code>, then use it around.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">template</span><span style=\"color:#BABED8;font-style:italic\"> T</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">string</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> url</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">T</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> responseType</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">returns</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">Promise&lt;T&gt;</span><span style=\"color:#89DDFF;font-style:italic\">}</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> getDataFromServer</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">url</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> responseType</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Do epic shit</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This works. But there are 2 caveats.</p>\n<ol>\n<li>\n<p><code>@template</code> is non-standard. It's not specified on JSDoc's own <a href=\"https://jsdoc.app/\" target=\"_blank\" rel=\"noopener\">documentation</a>. It's used internally in Google's <mark>Closure Compiler</mark>'s source code. Apparently VSCode supports it for now, so its not a problem for us.</p>\n</li>\n<li>\n<p>No type Narrowing. You can't specify a generic type as <code>T extends Array</code> or something. No narrowing possible in JSDoc.</p>\n</li>\n</ol>\n<p>That's it folks!! Hope you got something out of it!</p>\n<p>Signing off!!</p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript </a><br><a> Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"> (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--react-hooks-return-array-issue\">Part 3 - React TypeScript Hooks issue when returning array</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--mindblowing-typescript-tricks\">Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"> TypeScript tricks</a><br>\n      </p>\n    </blockquote><p></p>\n",
    "id": "get-to-know-typescript--using-typescript-without-typescript",
    "reading_time": 13.54,
    "toc": [
      {
        "indent": 0,
        "id": "Why-is-this-so-long",
        "title": "Why is this so long? <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\"/>",
        "length": 23
      },
      {
        "indent": 0,
        "id": "Best-things-about-TypeScript",
        "title": "Best things about TypeScript",
        "length": 28
      },
      {
        "indent": 0,
        "id": "Think-again!",
        "title": "Think again!",
        "length": 12
      },
      {
        "indent": 0,
        "id": "Duh-just-use-a-boilerplate",
        "title": "Duh, just use a boilerplate <img class=\"emoji\" draggable=\"false\" alt=\"🙄\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f644.svg\"/>",
        "length": 30
      },
      {
        "indent": 1,
        "id": "Watch-step",
        "title": "Watch step",
        "length": 10
      },
      {
        "indent": 1,
        "id": "Build-step",
        "title": "Build step",
        "length": 10
      },
      {
        "indent": 0,
        "id": "Solution",
        "title": "Solution",
        "length": 8
      },
      {
        "indent": 1,
        "id": "WHAT!!!",
        "title": "WHAT?!?!?!",
        "length": 10
      },
      {
        "indent": 1,
        "id": "You-lost-me-there-mate!",
        "title": "You lost me there, mate!",
        "length": 24
      },
      {
        "indent": 1,
        "id": "But-still-why-How-credible-is-it",
        "title": "But still, why? How credible is it?",
        "length": 35
      },
      {
        "indent": 0,
        "id": "Using-TypeScript-in-JavaScript-files",
        "title": "Using TypeScript in JavaScript files",
        "length": 36
      },
      {
        "indent": 1,
        "id": "Refresher-on-JSDoc",
        "title": "Refresher on JSDoc",
        "length": 18
      },
      {
        "indent": 1,
        "id": "Let's-convert-a-TS-program-to-JS",
        "title": "Let's convert a TS program to JS",
        "length": 32
      },
      {
        "indent": 1,
        "id": "Something's-missing...",
        "title": "Something's missing...",
        "length": 22
      },
      {
        "indent": 1,
        "id": "Enable-TypeScript-level-strict-checking-in-JS-files",
        "title": "Enable TypeScript level strict checking in JS files",
        "length": 51
      },
      {
        "indent": 0,
        "id": "Serious-TypeScript-stuff",
        "title": "Serious TypeScript stuff",
        "length": 24
      },
      {
        "indent": 1,
        "id": "d.ts-rocks!!",
        "title": "d.ts rocks!!",
        "length": 12
      },
      {
        "indent": 0,
        "id": "Declare-types-in-d.ts-import-in-JSDoc",
        "title": "Declare types in d.ts, import in JSDoc",
        "length": 38
      },
      {
        "indent": 0,
        "id": "Mix-n-Match",
        "title": "Mix n Match",
        "length": 11
      },
      {
        "indent": 0,
        "id": "Clean-comments",
        "title": "Clean comments",
        "length": 14
      },
      {
        "indent": 0,
        "id": "Lastly-Generics",
        "title": "Lastly, Generics",
        "length": 16
      }
    ],
    "series": "Get to know TypeScript",
    "seriesIndex": 2
  },
  "get-to-know-typescript-an-ode-to-typescript": {
    "cover_image": "media/declaring-my-undying-love-for-typescript-sun-love.jpg",
    "title": "An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"/> to TypeScript ",
    "date": "2021-01-31T18:30:00.000Z",
    "description": "TypeScript is cool. Super cool. It's made us Web Dev's life super easy. Read me being a total fanboy about it.",
    "body": "<p><img src=\"\" alt=\"Love sunset\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/declaring-my-undying-love-for-typescript-sun-love/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/declaring-my-undying-love-for-typescript-sun-love/small.jpg\">\n      <img alt=\"Love sunset\" data-src=\"../media/declaring-my-undying-love-for-typescript-sun-love/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a> Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript  (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--react-hooks-return-array-issue\">Part 3 - React TypeScript Hooks issue when returning array</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--mindblowing-typescript-tricks\">Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"> TypeScript tricks</a><br>\n      </p>\n    </blockquote><p></p>\n<p>Alrighty! So, a fair warning before you jump on to the rest of the article: This is not an extensive article about TypeScript or a Getting Started guide. It assumes you already know some TypeScript or JavaScript at least.</p>\n<p>What I can say is that you are gonna enjoy the hell out of this article. Me being a huge fanboy about TypeScript might just make your day.</p>\n<h1 id=\"Disclaimer\"><a class=\"heading-link\" href=\"#Disclaimer\">#</a>Disclaimer</h1>\n<p>I come from a JavaScript and PHP background, so I don't have any statically typed language experience from before like C, Java, or C++. Some things that I might find great or magical about TypeScript, might be super normal or even a bit irritating if you're coming from one of these classic typed languages. This article is just a huge opinion. Opinions differ. So I implore you to just ignore that part and move on.</p>\n<h1 id=\"What-is-TypeScript\"><a class=\"heading-link\" href=\"#What-is-TypeScript\">#</a>What is TypeScript?</h1>\n<p>In case you aren't familiar with TypeScript, it simply adds <mark>static type checking</mark> to your code, and that's what makes all the difference in the world.</p>\n<p>Official Definition:</p>\n<blockquote>\n<p>TypeScript is a superset developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. TypeScript is designed for the development of large applications and transcompiles to JavaScript.</p>\n</blockquote>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> sum</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> b</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> b</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#submit</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">addEventListener</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">click</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> val1</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input1</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> val2</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input2</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#82AAFF\">sum</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">val1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> val2</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we have a <code>sum</code> function declared, which will take two variables and return their sum. Then we have 2 inputs where you enter numbers. Then there's a submit button, which <code>onclick</code>, gets values of these 2 inputs and pass those values to our <code>sum</code> functions, and <code>console.log</code> that value.</p>\n<p>So let's consider this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Weird input sum values\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/declaring-my-undying-love-for-typescript-code-sample-1/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/declaring-my-undying-love-for-typescript-code-sample-1.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>So when inputs are <code>2</code> and <code>8</code>, their sum is <code>28</code>. When values are <code>89</code> and <code>1</code>, we get <code>891</code>. Weird huh?</p>\n<p>So here's what's happening. Instead of actually summing those numbers, javascript is actually concatenating those 2 numbers as if they are strings</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">2</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">8</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">28</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Well, this happens because <code>input.value</code> always returns a string, no matter if it is input <code>type=\"number\"</code>.</p>\n<p>It's easy to fix it. We just have to put a <code>+</code> sign in our values:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> val1 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input1</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p><strong>Refresher</strong>: If the above code seems weird to you because of adding the <code>+</code>, the reason is that <code>+</code> forces JavaScript to convert the string attached to it to a number. Why? Because +<em>EXPRESSION</em> is interpreted as <code>0 +EXPRESSION</code>. JS tries to add 0 to the <code>EXPRESSION</code>.</p>\n<p>So let's say we entered <code>81</code> as the value, and we end up with <code>+'81'</code>. JS tries to convert <code>'81'</code> to a number. And JS succeeds at doing so. So we end up with <code>+81</code>, which is simply <code>81</code></p>\n</blockquote>\n<p>This <code>+</code> will convert the incoming value from the input to number, if it can, otherwise it will turn it into <code>NaN</code>. Luckily in out case, it will convert those values to <code>2</code> and <code>8</code> as numbers, respectively, and we'll get the correct answer, <code>10</code></p>\n<p>This saved us in the end, but what if it was a much more complex codebase, and a dev forgot to fix it, and shipped it to production? Ooh, whatever would have happened, it would make headlines in HackerNews and Twitter <img class=\"emoji\" draggable=\"false\" alt=\"😈\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f608.svg\">.</p>\n<p>This where TypeScript comes in handy. Consider the above code's equivalent in TypeScript:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> sum</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">a</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> b</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#BABED8\"> a</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> b</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#submit</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">addEventListener</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">click</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> val1</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input1</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">as</span><span style=\"color:#FFCB6B\"> HTMLInputElement</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> val2</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">document</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">querySelector</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">#input2</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">as</span><span style=\"color:#FFCB6B\"> HTMLInputElement</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#82AAFF\">sum</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">val1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> val2</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We added the type <code>number</code> to our parameters in <code>sum</code> function, used <code>as</code> keyword to say that the element selected is actually an <code>input</code> element. But our code editor shows an error here.</p>\n<p><img src=\"\" alt=\"Weird input sum values error\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/declaring-my-undying-love-for-typescript-code-sample-2/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/declaring-my-undying-love-for-typescript-code-sample-2.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Typescript is giving us an error that we can't put a <code>string</code> where a <code>number</code> was expected. It took the guessing game out of the equation completely, and saved us a lot of time later when the we would be looking in the whole codebase for the issue.</p>\n<h1 id=\"Only-specific-values-allowed\"><a class=\"heading-link\" href=\"#Only-specific-values-allowed\">#</a>Only specific values allowed</h1>\n<p>You can limit the values a variable can have, using <mark>String Literal Types</mark>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hello</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hi</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">hola</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">namaste</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">namaste</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You try to put any other value in <code>x</code>, TypeScript will throw an error, and just won't compile your code.</p>\n<p>This feature helps a load, especially when I'm building error handling logic in React forms. I can simply make a map of all kinds of error codes and their messages, and limit it using TypeScript</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> TLoginError</span><span style=\"color:#89DDFF\"> =</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">user-not-found</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">wrong-password</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">network-request-failed</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">too-many-requests</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> loginErrorMessages</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">error</span><span style=\"color:#89DDFF\"> in</span><span style=\"color:#FFCB6B\"> TLoginError</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#F07178\">network-request-failed</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> `</span><span style=\"color:#C3E88D\">Network request failed. Try to log in again.</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#F07178\">user-not-found</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Email not found in our database</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#F07178\">wrong-password</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Email and Password do not match</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  '</span><span style=\"color:#F07178\">too-many-requests</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Too many login attempts. Try again in a minute</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>loginErrorMessages</code> won't take a property other than those specified in the type <code>TLoginError</code>. I can't stress enough how important that feature was when I was building an app.</p>\n<p>You can specify numbers also</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> FontWeights</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 100</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 200</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 300</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 400</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 500</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 600</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 700</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> fontWeight</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> FontWeights</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 200</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Not to mention their use in limiting Arrays to accept only a small set of values.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> searchFilters</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> (</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">name</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">email</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">phone</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">designation</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)[] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> []</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I actually used this snippet in a search feature I built for a Dashboard app.</p>\n<h2 id=\"Template-Literal-Types\"><a class=\"heading-link\" href=\"#Template-Literal-Types\">#</a>Template Literal Types <img class=\"emoji\" draggable=\"false\" alt=\"💪\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f4aa.svg\"></h2>\n<p>Think of typings for Tailwind color palette.</p>\n<p>Let's limit ourselves to just 5 main colors, and 4 shades for the next example.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> ColorPalette</span><span style=\"color:#89DDFF\"> =</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Blue</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">blue-100</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">blue-300</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">blue-500</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">blue-700</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Green</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">green-100</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">green-300</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">green-500</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">green-700</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Yellow</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">yellow-100</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">yellow-300</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">yellow-500</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">yellow-700</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Red</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">red-100</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">red-300</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">red-500</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">red-700</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Cyan</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">cyan-100</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">cyan-300</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">cyan-500</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">cyan-700</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>OMG!! We already had to declare <code>20</code> different color shade types here. And this is with a limited palette. Tailwind's actual palette has <code>22</code> colors, and <code>10</code> color shades. That's a whopping <mark>220</mark> string literals. We can't define all 220 of those can we?</p>\n<p>But we can use this nifty new feature called <code>Template Literal Types</code>. This feature shipped in TypeScript <code>4.1.0</code>, and was a total game changer when it dropped. It allowed us to apply dynamic behavior in your literal types.</p>\n<p>See <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> Color</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">blue</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">green</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">yellow</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">red</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">cyan</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> Shade</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F78C6C\"> 100</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 300</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 500</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#F78C6C\"> 700</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> ColorPalette</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> `${</span><span style=\"color:#FFCB6B\">Color</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">-</span><span style=\"color:#89DDFF\">${</span><span style=\"color:#FFCB6B\">Shade</span><span style=\"color:#89DDFF\">}`</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now <code>ColorPalette</code> contains all the combinations that can come from crossing all these values from these 2 types. See for yourself <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Template literal types demo\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/declaring-my-undying-love-for-typescript-template-literal-type/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/declaring-my-undying-love-for-typescript-template-literal-type.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>This here is pure magic <img class=\"emoji\" draggable=\"false\" alt=\"🦄\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f984.svg\"></p>\n<h1 id=\"Tuples-FTW!\"><a class=\"heading-link\" href=\"#Tuples-FTW!\">#</a>Tuples FTW!</h1>\n<blockquote>\n<p>A tuple is a collection which is ordered and unchangeable.</p>\n</blockquote>\n<p>Tuples in TypeScript are super amazing. They help a lot when working with Arrays. Consider this</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> Coordinates</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> getLocation</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">coords</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Coordinates</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#BABED8\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> y</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> coords</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /** Logic */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now coords can only be given values that are of <mark>number</mark> type, and only <strong>2 values</strong>. No less than 2, no more.</p>\n<p>Another example:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> Grid</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> [[</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#BABED8\">]]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Grid</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  [</span><span style=\"color:#F78C6C\">3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // <img class=\"emoji\" draggable=\"false\" alt=\"✅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2705.svg\"> Correct</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> y</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Grid</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> [[</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // <img class=\"emoji\" draggable=\"false\" alt=\"❌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/274c.svg\"> ERROR</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Main use of Tuples is in limiting the <strong>types</strong>, as well as the number of items it can take.</p>\n<p>And the types don't have to be same, you can mix and match these as much as you wish</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> UserData</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#FFCB6B\">string</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> UserRole</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So useful!</p>\n<h1 id=\"It-is-futuristic\"><a class=\"heading-link\" href=\"#It-is-futuristic\">#</a>It is futuristic</h1>\n<p>TypeScript is always ahead of JavaScript. Every feature that comes to JavaScript, already gets implemented into TypeScript months, even years before it first shows up in JavaScript the first time.</p>\n<p>Generally, any feature proposal in <mark>ECMAScript</mark> that reaches Stage 3 or 4, it gets implemented into TypeScript. You can start using the feature directly, and TypeScript will just polyfill it to work in browsers.</p>\n<p>For example, look at Optional chaining. I've been using it for over a year in TypeScript before it officially dropped in Chrome.</p>\n<blockquote>\n<p>Refresher: Optional chaining removes the need for checking for properties in an object before using them. <code>x &amp;&amp; x.y &amp;&amp; x.y.z &amp;&amp; x.y.z()</code> simply becomes <code>x?.y?.z.()</code> using Optional Chaining.</p>\n</blockquote>\n<p>Same was the case with Classes, ES6 Proxies, Spread operator, Destructuring. You name it.</p>\n<h1 id=\"Intersection-types-save-effort\"><a class=\"heading-link\" href=\"#Intersection-types-save-effort\">#</a>Intersection types save effort</h1>\n<p>In MySQL, you split up related data into different tables. For example,</p>\n<p>Instead of a single table containing all the fields</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> id </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> name </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> email </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> username </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> password </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> gender </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> dob </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> acc_created </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> last_seen </span><span style=\"color:#89DDFF\">|</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We split it up into Many tables containing atomic data</p>\n<p><code>login_info</code>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> id </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> email </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> username </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> password </span><span style=\"color:#89DDFF\">|</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>personalInfo</code>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> id </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> name </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> gender </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> dob </span><span style=\"color:#89DDFF\">|</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>account_details</code>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> id </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> account_created </span><span style=\"color:#89DDFF\">|</span><span style=\"color:#BABED8\"> last_seen </span><span style=\"color:#89DDFF\">|</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then we join all these together in the query when we need all the data.</p>\n<p>We can do a similar thing in TypeScript:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> LoginFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  email</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  username</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  password</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> PersonalFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  gender</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">male</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">female</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">non-binary</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">prefer-not-to-say</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  dob</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Date</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> AccountDetails</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  accountCreated</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Date</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  lastSeen</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> Date</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> User</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> LoginFields</span><span style=\"color:#89DDFF\"> &amp;</span><span style=\"color:#FFCB6B\"> PersonalFields</span><span style=\"color:#89DDFF\"> &amp;</span><span style=\"color:#FFCB6B\"> AccountDetails</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Proof it works: <img src=\"\" alt=\"Intersection types work\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/declaring-my-undying-love-for-typescript-intersection-type/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/declaring-my-undying-love-for-typescript-intersection-type.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>What all you can do with this is limitless. You can mix and match these types for all kinds of different requirements.</p>\n<blockquote>\n<p>Note: If 2 types contain same property(in this case <code>id</code>), their types must be same too, or TypeScript will error out</p>\n</blockquote>\n<h1 id=\"I-Pick-you\"><a class=\"heading-link\" href=\"#I-Pick-you\">#</a>I <mark>Pick</mark> you</h1>\n<p>If the heading didn't make any sense, this part is about the <code>Pick</code> helper type, which helps you pick specific properties from an interface.</p>\n<p>Let's continue the above example only. Let's say we want to create a type with only <code>id</code>, <code>gender</code>, <code>name</code>, and these properties should match those in the original <code>User</code> type.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> FewUserFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> number</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  gender</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">male</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">female</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">non-binary</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">prefer-not-to-say</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Hmm. That's not good. Lots of duplication.</p>\n<p>To prevent this duplication, we'll directly pick from the original object.</p>\n<p>TypeScript provides a helper type <mark>Pick</mark>, which does exactly this.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">type</span><span style=\"color:#FFCB6B\"> FewUserFields</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FFCB6B\"> Pick</span><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#FFCB6B\">User</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">id</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">gender</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">name</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here's the proof <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Pick type helper demo\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/declaring-my-undying-love-for-typescript-code-sample-pick-helper-type/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/declaring-my-undying-love-for-typescript-code-sample-pick-helper-type.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>See?! The fields are here, just how they were in the original object. It's so much better than duplicating. Whenever you change the these types in the original source, this type will also update itself, because it's just referencing the original one.</p>\n<p>This type is super handy everywhere. In fact, <a href=\"https://styled-components.com/\" target=\"_blank\" rel=\"noopener\">styled-components</a>, a styling library for React uses it heavily, too heavily in fact <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Styled Components usage of Pick\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 33.58333333333333%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/declaring-my-undying-love-for-typescript-pick-styled-components/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/declaring-my-undying-love-for-typescript-pick-styled-components/small.png\">\n      <img alt=\"Styled Components usage of Pick\" data-src=\"../media/declaring-my-undying-love-for-typescript-pick-styled-components/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Just see how many <code>Pick</code>s there are. If you have used this library in TypeScript, you have hands-on experience of how good styled-components with TS experience is. A lot of it is possible due to <code>Pick</code> only.</p>\n<h1 id=\"An-ode-to-Intellisense\"><a class=\"heading-link\" href=\"#An-ode-to-Intellisense\">#</a>An ode to Intellisense</h1>\n<p>And finally, the <mark>Intellisense</mark></p>\n<p>I know, it's kinda late talking about intellisense, considering that is the most popular and well-known feature of TypeScript. But that's why it deserves this section at the end, the most important section of any article. It's <strong>Gratitude Time</strong>!!</p>\n<p>In late 2015, VSCode dropped into the Web Dev Scene. At that time, I had just got into development, around 6 months before, and been using <mark>Microsoft Webmatrix</mark> IDE (@ me on my Twitter <a href=\"https://twitter.com/puruvjdev\" target=\"_blank\" rel=\"noopener\">@puruvjdev</a> if you remember that editor). Microsoft decided to kill it in favour of VSCode, so I installed VSCode. At the time I was primarily in PHP land, and VSCode was never near good enough as Webmatrix was at doing PHP stuff, not to mention it didn't have built-in Database manager, so I thought it was trash and moved on to other editors like <mark>Atom</mark> or <mark>Brackets</mark>(Ah! Brackets was so good <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\">). Then I slowly moved over to more of front-end, and felt that Brackets wasn't enough for that, so I decided to move back to VSCode.</p>\n<p>And boy, was I blown away completely <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"></p>\n<p>This was in mid-2016s. VSCode hadn't been there for more than 8 months at most, yet I was blown away by how good it's <mark>Intellisense</mark> was in JS files. It was butter smooth!!. It's like it would read my mind whenever I wanted to do anything. I had seen first-class autocompletion and code suggestions in <mark>Brackets</mark>, but what VSCode offered was something even more stronger.</p>\n<p>For starters, it showed the right kind of suggestions in the right kind of files. In Brackets and Webmatrix, code suggestions were all over the place. As in, it would show me suggestions for CSS when I was writing HTML. And I wasn't in a <code>style</code> tag.</p>\n<p>With VSCode, no problem. I would only see any CSS suggestions inside a <code>style</code> tag, and that was just as good as the intellisense in CSS files(which means insanely good).</p>\n<p>Well, back to TypeScript. The biggest and the most impactful contribution of TypeScript I believe is in it's integration with VSCode. Most of the time, my only need for TypeScript is just its type-checking aspects. I don't want it to modify my code and apply the polyfilling magic. I just want it to catch silly errors while I'm writing the code, so I can spend my precious time catching the errors that really matter.</p>\n<p>And that's why its integration with VSCode is so important. If it was one of those tools where the only way you can use its checking was by using the terminal only, it wouldn't take off as well. But instead, you get error reporting as you type. No extra commands, no rote memorization, nothing, nada. Just start writing, and TypeScript, your loyal friend, will guide you.</p>\n<h1 id=\"The-end\"><a class=\"heading-link\" href=\"#The-end\">#</a>The end</h1>\n<p>I hope you got something good out of this article. I hope this comes useful one day(by that, I mean you convincing your team to move over to TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">).</p>\n<p>Signing off!</p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a> Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/2764.svg\"> to TypeScript  (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--react-hooks-return-array-issue\">Part 3 - React TypeScript Hooks issue when returning array</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--mindblowing-typescript-tricks\">Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg\"> TypeScript tricks</a><br>\n      </p>\n    </blockquote><p></p>\n",
    "id": "get-to-know-typescript-an-ode-to-typescript",
    "reading_time": 9.655,
    "toc": [
      {
        "indent": 0,
        "id": "Disclaimer",
        "title": "Disclaimer",
        "length": 10
      },
      {
        "indent": 0,
        "id": "What-is-TypeScript",
        "title": "What is TypeScript?",
        "length": 19
      },
      {
        "indent": 0,
        "id": "Only-specific-values-allowed",
        "title": "Only specific values allowed",
        "length": 28
      },
      {
        "indent": 1,
        "id": "Template-Literal-Types",
        "title": "Template Literal Types <img class=\"emoji\" draggable=\"false\" alt=\"💪\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f4aa.svg\"/>",
        "length": 25
      },
      {
        "indent": 0,
        "id": "Tuples-FTW!",
        "title": "Tuples FTW!",
        "length": 11
      },
      {
        "indent": 0,
        "id": "It-is-futuristic",
        "title": "It is futuristic",
        "length": 16
      },
      {
        "indent": 0,
        "id": "Intersection-types-save-effort",
        "title": "Intersection types save effort",
        "length": 30
      },
      {
        "indent": 0,
        "id": "I-Pick-you",
        "title": "I Pick you",
        "length": 10
      },
      {
        "indent": 0,
        "id": "An-ode-to-Intellisense",
        "title": "An ode to Intellisense",
        "length": 22
      },
      {
        "indent": 0,
        "id": "The-end",
        "title": "The end",
        "length": 7
      }
    ],
    "series": "Get to know TypeScript",
    "seriesIndex": 1
  },
  "promisify-callbacks-in-nodejs": {
    "cover_image": "media/promisify-callbacks-in-nodejs-promises-everywhere.jpg",
    "title": "Bye bye Callbacks, hello Promises in NodeJS",
    "date": "2021-01-24T18:30:00.000Z",
    "description": "Completely get rid of callbacks in NodeJS and replace them with the great Promises.",
    "body": "<p><img src=\"\" alt=\"Promise, promises everywhere\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 55.58333333333333%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/promisify-callbacks-in-nodejs-promises-everywhere/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/promisify-callbacks-in-nodejs-promises-everywhere/small.jpg\">\n      <img alt=\"Promise, promises everywhere\" data-src=\"../media/promisify-callbacks-in-nodejs-promises-everywhere/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>These is gonna be a meme-tastic blog post. Strap yourself in.</p>\n<p>So, I guess you read the [super]clickbaity title, and couldn't resist it, huh? Well, no worries, I <strong>promise</strong> you <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\"> this is gonna be good.</p>\n<h1 id=\"History-lesson\"><a class=\"heading-link\" href=\"#History-lesson\">#</a>History lesson <img class=\"emoji\" draggable=\"false\" alt=\"😴\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f634.svg\"></h1>\n<p>NodeJS initially shipped with callbacks for its amazing asynchronous model which made it an overnight star in the first place. And callbacks were cool. You could read a huge file, and write the code in such a way to simply wait for the response to come out. This applied to database reads, XHR calls(ajax). This model was groundbreaking when it came out.</p>\n<p>Callbacks follow this pattern <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#82AAFF\">callback</span><span style=\"color:#BABED8\">(param1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> param2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> param3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> (error</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> data)) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Do something</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Note, there can be any number of parameters before the actual callback as the last parameter, and the callback doesn't have to have only <code>data</code> either, it can be any number of parameters, or not have any, other than the <code>error</code>.</p>\n<p>But there's a funny thing that happens when you dive super deep into something. <strong>YoU fInD oUt ItS fLaWs.</strong> <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">readdir</span><span style=\"color:#BABED8\">(source</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> files</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Error finding files: </span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> err</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#89DDFF;font-style:italic\"> else</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    files</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">forEach</span><span style=\"color:#F07178\">(</span><span style=\"color:#C792EA\">function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">filename</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> fileIndex</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">      console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">filename</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">      gm</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">source</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> filename</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">size</span><span style=\"color:#F07178\">(</span><span style=\"color:#C792EA\">function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> values</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">        if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">          console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Error identifying file size: </span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> err</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        }</span><span style=\"color:#89DDFF;font-style:italic\"> else</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">          console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">filename</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\"> : </span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> values</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">          aspect</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> values</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">width</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#BABED8\"> values</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">height</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">          widths</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">forEach</span><span style=\"color:#F07178\">(</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">            function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">width</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> widthIndex</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">              height</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> Math</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">round</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">width</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#BABED8\"> aspect</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">              console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">resizing </span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> filename</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">to </span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> height</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">x</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> height</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">              this.</span><span style=\"color:#82AAFF\">resize</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">width</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> height</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">write</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">dest</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">w</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> width</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">_</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> filename</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">                if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Error writing file: </span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#BABED8\"> err</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">              }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">            }.</span><span style=\"color:#82AAFF\">bind</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">this</span><span style=\"color:#F07178\">)</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">          )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Oh boy, my eyes bleed <img class=\"emoji\" draggable=\"false\" alt=\"🙈\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f648.svg\"></p>\n<p>I guess this twitter meme was on point <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Goku pushing callbacks\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/promisify-callbacks-in-nodejs-goku-meme/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/promisify-callbacks-in-nodejs-goku-meme.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h1 id=\"Enter-promises\"><a class=\"heading-link\" href=\"#Enter-promises\">#</a>Enter promises</h1>\n<p>Promises radicalized the whole scene. They made our code even cleaner. They follow a much simpler structure. No need for all that indentation inside indentation inside indentation. Max to max 1 level of indentation is needed</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> finalData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">https://api.example/com</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">then</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">req</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> req</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">json</span><span style=\"color:#BABED8\">())</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">then</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">data</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> cleanUpData</span><span style=\"color:#BABED8\">(data))</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">then</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">data</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> doEpicShit</span><span style=\"color:#BABED8\">(data))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Using the <code>.then</code> pattern made life super easy.</p>\n<p>And then came <mark>async/await</mark>. Above code became even simpler:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> req </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">https://api.example.com</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#BABED8\"> req</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">json</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> finalData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> cleanUpData</span><span style=\"color:#BABED8\">(data)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">doEpicShit</span><span style=\"color:#BABED8\">(finalData)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So flat <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f607.svg\"></p>\n<h1 id=\"Callback-to-Promise\"><a class=\"heading-link\" href=\"#Callback-to-Promise\">#</a>Callback to Promise</h1>\n<p>Converting callbacks to promises in NodeJS is very simple. If you're using <code>fs.readdir</code>.</p>\n<p>We'll redefine it:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> readdirPromise </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">folderPath</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  new</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> reject</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#BABED8\"> fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">readdir</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">folderPath</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> filenames</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">      err</span><span style=\"color:#89DDFF\"> !=</span><span style=\"color:#89DDFF\"> null</span><span style=\"color:#89DDFF\"> ?</span><span style=\"color:#82AAFF\"> reject</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">:</span><span style=\"color:#82AAFF\"> resolve</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">filenames</span><span style=\"color:#F07178\">)</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Just do it for every single function <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"></p>\n<p><strong>NOTE</strong>: The above part was a joke. You don't need to redefine every single callback function like that.</p>\n<h2 id=\"Serious-way...\"><a class=\"heading-link\" href=\"#Serious-way...\">#</a>Serious way...</h2>\n<p>Since Node 8, there's been a built-in helper function into Node, called <code>promisify</code>. It's the easiest way to promisify your callbacks. Check it out <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> promisify </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">util</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> callbackP </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> promisify</span><span style=\"color:#BABED8\">(callback)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> callbackP</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That's it. Just pass your callback to <code>promisify</code>, and it will magically be <code>.then</code>able and <code>await</code>able.</p>\n<h1 id=\"About-filesystem-API...\"><a class=\"heading-link\" href=\"#About-filesystem-API...\">#</a>About filesystem API...</h1>\n<p>Most of the time, you'll end up needing promisification for the <code>fs</code> API in NodeJS. But there's a good news. <code>fs</code> <strong>already ships with promise based version of its functions</strong>.</p>\n<p>Check out my article to know this uncanny art: <a href=\"https://puruvj.dev/blog/fs-promises\" target=\"_blank\" rel=\"noopener\">Simple code with fs.promises and async await</a>.</p>\n<p>Hope you got something good out of it <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f607.svg\">.</p>\n<p>Thank you for reading.</p>\n",
    "id": "promisify-callbacks-in-nodejs",
    "reading_time": 2.96,
    "toc": [
      {
        "indent": 0,
        "id": "History-lesson",
        "title": "History lesson <img class=\"emoji\" draggable=\"false\" alt=\"😴\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f634.svg\"/>",
        "length": 17
      },
      {
        "indent": 0,
        "id": "Enter-promises",
        "title": "Enter promises",
        "length": 14
      },
      {
        "indent": 0,
        "id": "Callback-to-Promise",
        "title": "Callback to Promise",
        "length": 19
      },
      {
        "indent": 1,
        "id": "Serious-way...",
        "title": "Serious way...",
        "length": 14
      },
      {
        "indent": 0,
        "id": "About-filesystem-API...",
        "title": "About filesystem API...",
        "length": 23
      }
    ],
    "seriesIndex": 0
  },
  "create-folder-if-not-exists": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "NodeJS Create folder if not exists in 3 lines - No dependencies",
    "date": "2021-01-17T21:08:00.000Z",
    "description": "The simplest and dependency-free way to create a folder in NodeJS if it doesn't exist",
    "body": "<p>Here's a very simple trick to create a folder if it doesn't exists (Or ensure if a folder exists) in NodeJS. <strong>Just 3 lines, no dependencies</strong></p>\n<h1 id=\"Minimum-requirements\"><a class=\"heading-link\" href=\"#Minimum-requirements\">#</a>Minimum requirements</h1>\n<ol>\n<li>NodeJS &gt;= v10 LTS.</li>\n<li>Working knowledge of <code>promises</code> and <code>async await</code>.</li>\n</ol>\n<p>That's it <img class=\"emoji\" draggable=\"false\" alt=\"😊\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60a.svg\"></p>\n<h1 id=\"TLDR-Code:\"><a class=\"heading-link\" href=\"#TLDR-Code:\">#</a>TLDR Code:</h1>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> mkdir </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">promises</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  await</span><span style=\"color:#82AAFF\"> mkdir</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">folderPath</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#BABED8\"> (e) </span><span style=\"color:#89DDFF\">{}</span></span>\n<span class=\"line\"></span></code></pre>\n<h1 id=\"Explanation\"><a class=\"heading-link\" href=\"#Explanation\">#</a>Explanation</h1>\n<ol>\n<li>\n<p>We import promise-based version of mkdir from <code>fs.promises</code>. Read my article about <a href=\"https://puruvj.dev/blog/fs-promises\" target=\"_blank\" rel=\"noopener\">Simple code with fs.promises and async await</a>.</p>\n</li>\n<li>\n<p>We actually create the folder with the <code>await mkdir('folderPath')</code>.</p>\n</li>\n</ol>\n<blockquote>\n<p>Note: We are using an await here, so it's necessary for this code to be in an async function, or you can also use the <mark>Top Level Await</mark> feature in NodeJS &gt;= 14.8.0. Read my article about why <a href=\"https://puruvj.dev/blog/top-level-await\" target=\"_blank\" rel=\"noopener\">Top level Await is AWESOME!! <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"></a></p>\n</blockquote>\n<h2 id=\"Why-wrap-it-in-try-catch\"><a class=\"heading-link\" href=\"#Why-wrap-it-in-try-catch\">#</a>Why wrap it in try-catch?</h2>\n<p>Remember: We're trying to create a folder if it doesn't exists. That means there's a fair chance it may already exists, in which case mkdir will throw an error, and will stop the rest of code from executing. We don't want that now, do we? <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"></p>\n<p>So if <code>mkdir</code> works perfectly, good, means the folder didn't exist, so it was created. But if it throws error, try catch will simply catch the error, ignore it, and move on to the rest of the code.</p>\n<p>Simple!</p>\n<h1 id=\"As-a-utility-function\"><a class=\"heading-link\" href=\"#As-a-utility-function\">#</a>As a utility function</h1>\n<p>Make this snippet part of your utility belt <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * Ensure that a folder exists</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">string</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> folderPath</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">async</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> ensureFolder</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">folderPath</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    await</span><span style=\"color:#82AAFF\"> mkdir</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">folderPath</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Hope it helped!</p>\n",
    "id": "create-folder-if-not-exists",
    "reading_time": 1.0075,
    "toc": [
      {
        "indent": 0,
        "id": "Minimum-requirements",
        "title": "Minimum requirements",
        "length": 20
      },
      {
        "indent": 0,
        "id": "TLDR-Code:",
        "title": "TLDR Code:",
        "length": 10
      },
      {
        "indent": 0,
        "id": "Explanation",
        "title": "Explanation",
        "length": 11
      },
      {
        "indent": 1,
        "id": "Why-wrap-it-in-try-catch",
        "title": "Why wrap it in try-catch?",
        "length": 25
      },
      {
        "indent": 0,
        "id": "As-a-utility-function",
        "title": "As a utility function",
        "length": 21
      }
    ],
    "seriesIndex": 0
  },
  "fs-promises": {
    "cover_image": "media/fs-promise-requires.jpg",
    "title": "Simple code with fs.promises and async await",
    "date": "2021-01-11T06:37:00.000Z",
    "description": "If you've spent some time with Node's fs API, you know how huge a pain its callback based pattern can get. Read out how to flatten your code using promises and async await syntax",
    "body": "<p><img src=\"\" alt=\"Just some NodeJS code\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/fs-promise-requires/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/fs-promise-requires/small.jpg\">\n      <img alt=\"Just some NodeJS code\" data-src=\"../media/fs-promise-requires/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Hi! I see you have jumped onto my blog. Well, buckle up, this is gonna be one helluva ride!! We're gonna explore how to use the all-time favorite <mark>async / await</mark> feature with Node's Filesystem API.</p>\n<p>So now, let's make a super-simple program to read the username and password from a file, encrypt the password(Always do it, kids <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\">), and write the username and new password to some other file.</p>\n<p>So let's write up in plain english how our code works</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">1.</span><span style=\"color:#BABED8\"> Read the </span><span style=\"color:#89DDFF\">`</span><span style=\"color:#C3E88D\">user-data.json</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\"> file.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">2.</span><span style=\"color:#BABED8\"> Throw error if any.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">3.</span><span style=\"color:#BABED8\"> Extract </span><span style=\"color:#89DDFF\">`</span><span style=\"color:#C3E88D\">username</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\">, </span><span style=\"color:#89DDFF\">`</span><span style=\"color:#C3E88D\">password</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\"> from the file contents.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">4.</span><span style=\"color:#BABED8\"> Encrypt the password.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">5.</span><span style=\"color:#BABED8\"> Assemble final data to be written into the new file.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">6.</span><span style=\"color:#BABED8\"> Write the data to the </span><span style=\"color:#89DDFF\">`</span><span style=\"color:#C3E88D\">user-data-final.json</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\"> file</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">7.</span><span style=\"color:#BABED8\"> Throw error if any.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">8.</span><span style=\"color:#BABED8\"> Output if successful</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Seems straightforward enough. So let's write it out in actual code.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> fs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> main</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">readFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> data</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">throw</span><span style=\"color:#BABED8\"> err</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Let's process the data</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> password</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">parse</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Let's encrypt</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> encrypt</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">password</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> finalObject</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> password</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Let's write it to another file</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">writeFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data-final.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">stringify</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">finalObject</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF;font-style:italic\">throw</span><span style=\"color:#BABED8\"> err</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">      console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Successful</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  main</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#BABED8\"> (e) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">error</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We're just catching the errors and throwing them out to the console, in the last <code>try-catch</code> block.</p>\n<p>This seems to work.</p>\n<p>But something nags me here. Look at the steps I wrote out in plain english, and then look at the code. Plain english steps look very sequential, and step by step. Whereas the code we wrote, it <strong>is</strong> sequential, but it feels like all the steps live inside step 1, and step 7 and 8 live inside step 6. In short:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span>1.</span></span>\n<span class=\"line\"><span>  2.</span></span>\n<span class=\"line\"><span>  3.</span></span>\n<span class=\"line\"><span>  4.</span></span>\n<span class=\"line\"><span>  5.</span></span>\n<span class=\"line\"><span>  6.</span></span>\n<span class=\"line\"><span>    7.</span></span>\n<span class=\"line\"><span>    8.</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>Doesn't feel so idiomatic anymore, does it? It feels weird that all these steps in the code have to live <strong>inside</strong> of other steps, whereas in what we wrote, it feels idiomatic, like passing the torch in olympics(or in whatever events the torch is passed, I ain't a sports junkie <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">).</p>\n<p>How can I make the code idiomatic, and mirror the steps it's based on?</p>\n<h1 id=\"Solution(s)\"><a class=\"heading-link\" href=\"#Solution(s)\">#</a>Solution(s)</h1>\n<p>Well, callback pattern can be replaced by using <code>async / await</code>. We can flatten our code a lot using them. But <code>await</code> works only with promises, ie.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> result </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">https://api.example.com</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>fetch</code> here returns a promise, so we can await the result. How do we promisify our <code>writeFile</code> and <code>readFile</code> methods then <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\">?</p>\n<p>Well, look at this code below:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> readFile </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">path</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  new</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> reject</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">readFile</span><span style=\"color:#BABED8\">(path</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> data</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#82AAFF\">reject</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">      resolve</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is a promise based implementation of the readFile function. We can use it as simply as this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> readFile</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will read the file, and move on to the next line after the data has come through. No indentation, no branching, nothing, Nada!! It looks good. So let's implement our complete code with this method.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> fs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> readFile </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">path</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  new</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> reject</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">readFile</span><span style=\"color:#BABED8\">(path</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> data</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#82AAFF\">reject</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">      resolve</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> writeFile </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">path</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> data</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  new</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> reject</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">writeFile</span><span style=\"color:#BABED8\">(path</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">err</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">      if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">) </span><span style=\"color:#82AAFF\">reject</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">err</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">      resolve</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  )</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">async</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> main</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> readFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Extract</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> password</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">parse</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's encrypt</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> encrypt</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">password</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> finalObject</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> password</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's write to another file</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  await</span><span style=\"color:#82AAFF\"> writeFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data-final.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">stringify</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">finalObject</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Successful</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  main</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#BABED8\"> (e) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">error</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Look at our main function here. The overall code is bigger, but our <code>main</code> function, which is the actual logic, is much more simpler and actually follows the steps we wrote, in the idiomatic way we imagined.</p>\n<h2 id=\"Simpler-way-(utils.promisify)...\"><a class=\"heading-link\" href=\"#Simpler-way-(utils.promisify)...\">#</a>Simpler way (utils.promisify)...</h2>\n<p>Our code above looks quite big, due to defining the promise-based versions of <code>writeFile</code> and <code>readFile</code>. We can make it much, much smaller by using a utility function exported by Node itself, <code>promisify</code>.</p>\n<p>Usage <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> promisify </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">util</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> fs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> writeFile </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> promisify</span><span style=\"color:#BABED8\">(fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">writeFile)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You simply pass the callback-based function to the <code>promisify</code> function, and voila! you have a promise-based version of your original function.</p>\n<p>So our code now becomes <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> promisify </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">util</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> fs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> writeFile </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> promisify</span><span style=\"color:#BABED8\">(fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">writeFile)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> readFile </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> promisify</span><span style=\"color:#BABED8\">(fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">readFile)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">async</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> main</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> readFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Extract</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> password</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">parse</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's encrypt</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> encrypt</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">password</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> finalObject</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> password</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's write to another file</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  await</span><span style=\"color:#82AAFF\"> writeFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data-final.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">stringify</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">finalObject</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Successful</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  main</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#BABED8\"> (e) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">error</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So much smaller <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\">.</p>\n<h2 id=\"...Simplest-Way!\"><a class=\"heading-link\" href=\"#...Simplest-Way!\">#</a>...Simplest Way!</h2>\n<p>Now lemme introduce you to the Ace in the sleeve! Since version 10, NodeJS exports promise based versions of its methods, <strong>by default</strong>. They can be accessed by <code>require('fs').promises</code>.</p>\n<p>Here's our final code using this approach:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> writeFile</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> readFile </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">promises</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">async</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> main</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> readFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Extract</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> password</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">parse</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's encrypt</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> encrypt</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">password</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> finalObject</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> password</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's write to another file</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  await</span><span style=\"color:#82AAFF\"> writeFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data-final.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">stringify</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">finalObject</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Successful</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  main</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#BABED8\"> (e) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">error</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Notice the first line. We're directly importing the <code>writeFile</code> and <code>readFile</code> methods from <code>require(fs).promises</code>. This is the best and the cleanest version you can find in Node currently.</p>\n<h1 id=\"Code-Conventions\"><a class=\"heading-link\" href=\"#Code-Conventions\">#</a>Code Conventions</h1>\n<p>Now that you've seen how to use <code>fs.promises</code>, let's find out the best patterns to use this code.</p>\n<h2 id=\"Importing-individual-functions\"><a class=\"heading-link\" href=\"#Importing-individual-functions\">#</a>Importing individual functions</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> writeFile</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> readFile</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> access </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">promises</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is probably the most convenient method, and the cleanest too. But the problem arises when you have to import something from regular <code>fs</code> module. For example <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> writeFile</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> readFile</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> access </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">promises</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> writeFileSync</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> createReadStream</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> createWriteStream </span><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We are importing the promise based functions, as well as some functions from regular <code>fs</code>, like streams. Now you can directly use it down in your main logic, but sometimes when the code in the file gets big enough, and I'm not exactly using await with the promise-based versions, it can get pretty confusing which method is coming from where, so I have to scroll all the way to the top to see the imports.</p>\n<p>This may not seem like a big problem, but I challenge you to write this code and comeback to it after 6 months. You'll be in the same dilemma <img class=\"emoji\" draggable=\"false\" alt=\"😂\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f602.svg\"></p>\n<h2 id=\"Importing-as-namespace\"><a class=\"heading-link\" href=\"#Importing-as-namespace\">#</a>Importing as namespace</h2>\n<p>This is my most preferred method.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> fs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> fsp </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">promises</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // <img class=\"emoji\" draggable=\"false\" alt=\"👈\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f448.svg\"> This line</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#BABED8\"> fsp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">writeFile</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">createReadStream</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"ES-Imports\"><a class=\"heading-link\" href=\"#ES-Imports\">#</a>ES Imports</h2>\n<p>Now that we can use ES Imports in Node(with some extra tweaking), let's consider the Modular version</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> promises</span><span style=\"color:#89DDFF;font-style:italic\"> as</span><span style=\"color:#BABED8\"> fsp</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">async</span><span style=\"color:#C792EA\"> function</span><span style=\"color:#82AAFF\"> main</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#BABED8\"> fsp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">readFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Extract</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> password</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">parse</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's encrypt</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> encrypt</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">password</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> finalObject</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> password</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's write to another file</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  await</span><span style=\"color:#BABED8\"> fsp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">writeFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data-final.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">stringify</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">finalObject</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Successful</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  main</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#BABED8\"> (e) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">error</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Also, if your node version is more than <mark>v14.8.0</mark>, you can also directly use top level await (I have an article about it, <a href=\"https://puruvj.dev/blog/top-level-await\" target=\"_blank\" rel=\"noopener\">right here</a>).</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> promises</span><span style=\"color:#89DDFF;font-style:italic\"> as</span><span style=\"color:#BABED8\"> fsp</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#BABED8\"> fsp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">readFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Extract</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> password</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">parse</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">data</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's encrypt</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> encrypt</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">password</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> finalObject</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> username</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F07178\"> password</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> encryptedPassword</span><span style=\"color:#89DDFF\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Let's write to another file</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  await</span><span style=\"color:#BABED8\"> fsp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">writeFile</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">user-data-final.json</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> JSON</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">stringify</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">finalObject</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">Successful</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#BABED8\"> (e) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">error</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">e</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Even smaller!!!</p>\n<h1 id=\"Conclusion\"><a class=\"heading-link\" href=\"#Conclusion\">#</a>Conclusion</h1>\n<p>Hope you got some good insights from this blog post.</p>\n",
    "id": "fs-promises",
    "reading_time": 7.0675,
    "toc": [
      {
        "indent": 0,
        "id": "Solution(s)",
        "title": "Solution(s)",
        "length": 11
      },
      {
        "indent": 1,
        "id": "Simpler-way-(utils.promisify)...",
        "title": "Simpler way (utils.promisify)...",
        "length": 32
      },
      {
        "indent": 1,
        "id": "...Simplest-Way!",
        "title": "...Simplest Way!",
        "length": 16
      },
      {
        "indent": 0,
        "id": "Code-Conventions",
        "title": "Code Conventions",
        "length": 16
      },
      {
        "indent": 1,
        "id": "Importing-individual-functions",
        "title": "Importing individual functions",
        "length": 30
      },
      {
        "indent": 1,
        "id": "Importing-as-namespace",
        "title": "Importing as namespace",
        "length": 22
      },
      {
        "indent": 1,
        "id": "ES-Imports",
        "title": "ES Imports",
        "length": 10
      },
      {
        "indent": 0,
        "id": "Conclusion",
        "title": "Conclusion",
        "length": 10
      }
    ],
    "seriesIndex": 0
  },
  "top-level-await": {
    "cover_image": "media/top-level-await-top-of-the-world.jpg",
    "title": "Top level Await is AWESOME!! <img class=\"emoji\" draggable=\"false\" alt=\"😍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60d.svg\"/>",
    "date": "2020-12-28T03:21:00.000Z",
    "description": "Top level await is literally the GOAT (Greatest of All Time). In every way. Read on to know why, how to use it, and its implications",
    "body": "<p><img src=\"\" alt=\"Top of the world\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 61.5%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/top-level-await-top-of-the-world/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/top-level-await-top-of-the-world/small.jpg\">\n      <img alt=\"Top of the world\" data-src=\"../media/top-level-await-top-of-the-world/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p><mark>Top Level Await</mark> is literally awesome. It's the GOAT!!(<strong>G</strong>reatest <strong>o</strong>f <strong>A</strong>ll <strong>T</strong>ime, in case you couldn't guess <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\">)</p>\n<h1 id=\"The-Dark-Times...\"><a class=\"heading-link\" href=\"#The-Dark-Times...\">#</a>The Dark Times...</h1>\n<p>There was an era, where if you tried to pull a stunt like this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"> at the top level(i.e. not in any <code>async</code> function),</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#BABED8\">(URL)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>JS would scream at you <img class=\"emoji\" draggable=\"false\" alt=\"👉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f449.svg\"> <code>SyntaxError: await is only valid in async function</code></p>\n<p>It was super frustrating. But what could you do then?</p>\n<h2 id=\"The-Hack\"><a class=\"heading-link\" href=\"#The-Hack\">#</a>The Hack</h2>\n<p><strong>Wrap it in IIFE</strong></p>\n<blockquote>\n<p><mark>IIFE</mark>: Immediately Invoked Function expressions. <a href=\"https://flaviocopes.com/javascript-iife/\" target=\"_blank\" rel=\"noopener\">Flavio Copes has a really good article about it.</a></p>\n</blockquote>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">(</span><span style=\"color:#C792EA\">async</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> data</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">URL</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>Not really a hack as far as official spec is concerned, but to the code author, it definitely feels like one.</p>\n</blockquote>\n<p>Just look at the code. So many brackets, so much boilerplate. The last line with <code>})();</code> makes me nauseous even after 5 years of JS development. So many weird brackets!!</p>\n<p>But wait, it gets even better <img class=\"emoji\" draggable=\"false\" alt=\"😑\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f611.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">(</span><span style=\"color:#C792EA\">async</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> response</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">URL</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> jsonData</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#BABED8\"> response</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">json</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> finalData</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> processJsonData</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">jsonData</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  if</span><span style=\"color:#F07178\"> (</span><span style=\"color:#BABED8\">finalData</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">propA</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">propB</span><span style=\"color:#89DDFF\"> ===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">who-cares</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Do stuff</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This code gets messier. And that code above is still very clean. Wait till you try to create your version of MacOS Desktop for Web (Shameless Plug! I'm working on it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\"> <a href=\"https://macos.now.sh\" target=\"_blank\" rel=\"noopener\">macos.now.sh</a>). It's gonna get outright ugly, and you don't want ugly code. Nobody wants ugly code.</p>\n<h1 id=\"A-New-Hope\"><a class=\"heading-link\" href=\"#A-New-Hope\">#</a>A New Hope</h1>\n<blockquote>\n<p>If you're wondering why I'm using Star Wars related words a lot, Mandalorian episode 16 dropped a few days ago, and literally, ************** appeared <img class=\"emoji\" draggable=\"false\" alt=\"😭\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f62d.svg\">. I'm still shaking from how good that episode was.</p>\n</blockquote>\n<p>In comes Top Level await, <s>slashing droids with his lightsaber</s>, taking the pains of IIFE hacks away.</p>\n<p>Using it is as simple as the first code snippet on top:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#BABED8\">(URL)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And it will work perfectly.</p>\n<p>And that second snippet, see this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> response </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> fetch</span><span style=\"color:#BABED8\">(URL)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> jsonData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#BABED8\"> response</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">json</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> finalData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> processJsonData</span><span style=\"color:#BABED8\">(jsonData)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">if</span><span style=\"color:#BABED8\"> (finalData</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">propA</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">propB </span><span style=\"color:#89DDFF\">===</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">who-cares</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  // Do stuff</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Perfection <img class=\"emoji\" draggable=\"false\" alt=\"👌\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f44c.svg\">.</p>\n<p>But, there are certain requirements to use it.</p>\n<h1 id=\"Requirements\"><a class=\"heading-link\" href=\"#Requirements\">#</a>Requirements</h1>\n<p>It can be used only in <mark>ES Modules</mark>.</p>\n<p>That is, in scripts that are marked as modules in your HTML or in your package.json in Node</p>\n<h2 id=\"Browser\"><a class=\"heading-link\" href=\"#Browser\">#</a>Browser</h2>\n<p>In browser, JS alone is nothing. It needs to be linked to by the HTML file.</p>\n<p>In your <code>index.html</code>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">script</span><span style=\"color:#C792EA\"> type</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">module</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> src</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">index.js</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>type=\"module\"</code> is necessary for it to be interpreted as an ES Module</p>\n<h2 id=\"NodeJS\"><a class=\"heading-link\" href=\"#NodeJS\">#</a>NodeJS</h2>\n<p>You need to have minimum of Node <strong>14.8.0</strong> for this feature to work. Modules were available in 13.9.0, but the top level await was unlocked at 14.8.0 only. The current LTS is v14.15, and I recommend most users to always choose the LTS version. If you're reading this in 2025, and the LTS is v24, go for it, not 14.15. (I hope Node survives that long, what with <a href=\"https://deno.land/\" target=\"_blank\" rel=\"noopener\">Deno</a> and <a href=\"https://github.com/elsaland/elsa\" target=\"_blank\" rel=\"noopener\">Elsa</a> being there now <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">)</p>\n<blockquote>\n<p>Note: I'm aware that you could use ES Modules long before 13.9.0 in NodeJS, but you had to pass the flag <code>--experimental-module</code>, as in <code>node index.js --experimental-module</code>, and these modules were highly experimental and unstable and subject to change then, so I didn't even bother with them.</p>\n</blockquote>\n<p>These below are some steps to get ES Modules in Node working. Note that these aren't the only methods for that. There are total of 2 or 3 right now, but I will explore the most common one only.</p>\n<h3 id=\"Step-0\"><a class=\"heading-link\" href=\"#Step-0\">#</a>Step 0</h3>\n<p>Have npm installed. If you already have node installed, you need not worry, you already have it.</p>\n<p>Check Node version:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#FFCB6B\">node</span><span style=\"color:#C3E88D\"> -v</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Check npm version:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#FFCB6B\">npm</span><span style=\"color:#C3E88D\"> -v</span></span>\n<span class=\"line\"></span></code></pre>\n<p>npm should be higher than <code>6.14.8</code> at this point of time.</p>\n<p>But the Linux users might have some issues, as running <code>sudo apt install nodejs</code> downloads a super-old version of Node, and even without npm, that is (The Blasphemy <img class=\"emoji\" draggable=\"false\" alt=\"😤\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f624.svg\">).</p>\n<p>In that case i recommend you to install nodeJS and npm using this <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04\" target=\"_blank\" rel=\"noopener\">very good article</a>.</p>\n<p>But beware, your problems won't be over because of the permissions issues. I recommend you to install <code>nvm</code> (Nope I didn't misspell <code>npm</code>), which will take care of all these problems for you. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04\" target=\"_blank\" rel=\"noopener\">Read how to install nvm</a>.</p>\n<p>After you have installed nvm, Run <code>nvm install --lts</code> to install the latest LTS version.</p>\n<p>It's slightly longer method, but much less painful, both in short and long term</p>\n<h3 id=\"Step-1\"><a class=\"heading-link\" href=\"#Step-1\">#</a>Step 1</h3>\n<p>Create <code>package.json</code></p>\n<p>Most Node projects will already have the <code>package.json</code> ready, but in case you don't, make one. It's as simple as typing this command:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#FFCB6B\">npm</span><span style=\"color:#C3E88D\"> init</span><span style=\"color:#C3E88D\"> -y</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This should output a file of this format. Values may be different, but format stays the same:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">name</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">snippets</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">version</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">1.0.0</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">description</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">main</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">promise-arr.js</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">scripts</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#FFCB6B\">test</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">echo </span><span style=\"color:#BABED8\">\\\"</span><span style=\"color:#C3E88D\">Error: no test specified</span><span style=\"color:#BABED8\">\\\"</span><span style=\"color:#C3E88D\"> &amp;&amp; exit 1</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">keywords</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> [],</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">author</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">license</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">ISC</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"Step-2\"><a class=\"heading-link\" href=\"#Step-2\">#</a>Step 2</h3>\n<p>Add <code>\"type\": module\"</code> in the JSON file. Like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">{</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  \"name\": \"snippets\",</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  \"version\": \"1.0.0\",</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  \"description\": \"\",</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  \"main\": \"promise-arr.js\",</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">+</span><span style=\"color:#C3E88D\"> \"type\": \"module\",</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  \"scripts\": {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  \"keywords\": [],</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  \"author\": \"\",</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  \"license\": \"ISC\"</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And you're good to go!</p>\n<h1 id=\"Use-Cases\"><a class=\"heading-link\" href=\"#Use-Cases\">#</a>Use Cases</h1>\n<p>Here are some common use cases for top level await:</p>\n<blockquote>\n<p>Note: These use cases are quite simple, and will be most probably composed inside functions, where you can already use <code>async</code>. The most use of top level await would be to consume these higher order functions in the main code.</p>\n</blockquote>\n<h2 id=\"Timer\"><a class=\"heading-link\" href=\"#Timer\">#</a>Timer</h2>\n<p>Whenever I jump onto any project, I carry some utility functions with me. One such utility functions is the simpler alternative to using the ugly <code>setTimeout</code>, and it gets rids of some weird use cases that comes with <code>setTimeout</code>. It's the <code>waitFor</code> utility function:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">number</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> time</span><span style=\"color:#676E95;font-style:italic\"> Time to wait for in milliseconds</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> waitFor</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">time</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> new</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> setTimeout</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">resolve</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> time</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I use it simply as:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#82AAFF\">doTask1</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> waitFor</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">200</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">doTask2</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> waitFor</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">200</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">doTask3</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I can use it directly in modules with top level await like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> waitFor</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">../utils.js</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Wait for 200ms</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> waitFor</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">200</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">2</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I have written a blog post about this utility function too. <a href=\"https://puruvj.dev/blog/flatten-settimeout\" target=\"_blank\" rel=\"noopener\">Check it out here</a></p>\n<h2 id=\"Dependency-fallbacks\"><a class=\"heading-link\" href=\"#Dependency-fallbacks\">#</a>Dependency fallbacks</h2>\n<p>Let's say you're using your own remote server for importing Modules directly. You have come up with some superb optimization algorithms to make those imports from remote server even faster than locally bundled imports, and are willing to rely more on that server.</p>\n<p>But it's <strong>your</strong> server. You have to maintain it. 24/7!! What if it goes down? It would be a huge bummer then, wouldn't it?</p>\n<p>So you come with a clever solution: Import from your own server, but if it fails, import from <mark>unpkg</mark>. Seems smart. So you write this code:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  import</span><span style=\"color:#BABED8\"> jquery</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">https://my-server.com/api/jquery.js</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  import</span><span style=\"color:#BABED8\"> jquery</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">https://unpkg.com/jquery@3.3.1/dist/jquery.js</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> $ </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> jquery</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">default</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Ahem! One catch here. This code is invalid. You can't use <code>import package from \"somewhere\"</code> inside any block. It has to be used in the top level only (This seems like the inverse problem of Top Level Await, isn't it <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\">).</p>\n<p>Luckily, we can use the dynamic <code>import</code> statement, which can be used anywhere.</p>\n<p>So our new code becomes.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> jquery</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">try</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  jquery</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#89DDFF\"> import</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">https://my-server.com/api/jquery.js</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#89DDFF;font-style:italic\"> catch</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  jquery</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#89DDFF\"> import</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">https://unpkg.com/jquery@3.3.1/dist/jquery.js</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> $ </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> jquery</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">default</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That's it! See, we used await without any async function wrapping it. It's on the top-most level. The code will wait for the <code>import</code> in the <code>try</code> block to resolve, then if it fails, will go fetch from <code>unpkg</code>, and waiting while it happens, but not stopping the execution altogether.</p>\n<h2 id=\"Internationalization-(i18n)\"><a class=\"heading-link\" href=\"#Internationalization-(i18n)\">#</a>Internationalization (i18n)</h2>\n<blockquote>\n<p>Had to search Google for the spelling of this word <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\"></p>\n</blockquote>\n<p>Say you have some JS files in which you're storing common strings for different languages.</p>\n<p>Now you wish to access those strings right on top, without any other wrapper or function. You can do it simply like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> strings </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#89DDFF\"> import</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#C3E88D\">../i18n/</span><span style=\"color:#89DDFF\">${</span><span style=\"color:#BABED8\">navigator</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">language</span><span style=\"color:#89DDFF\">}`</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">paragraph</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">innerHTML </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> strings</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">paraGraph</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See how simple it is?</p>\n<p>And most bundlers like Webpack/Rollup will recognize that you're trying to fetch some files from the <code>../i18n</code> folder, so they'll just create separate, individual bundles of the files in the <code>../i18n</code> folder, and you can import the right, optimized bundle.</p>\n<blockquote>\n<p>This has traditionally been done with JSON files and <code>fetch</code>ing them, but these dynamic imports open up new possibilities</p>\n</blockquote>\n<h2 id=\"Resource-initialization\"><a class=\"heading-link\" href=\"#Resource-initialization\">#</a>Resource initialization</h2>\n<p>Let's consider a backend-related example for this. Say you have a Database implementation with lots of initialization code. Well, you'd need to initialize your database someway, and most of these databases take some amount of time, so they're always callback or promise based. Let's assume, in our case, the database instance is promise based (You can convert callback based functions to promises in NodeJS too, using <code>require('util').promisify</code>).</p>\n<p>So you initialize it:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> dbInstance</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">../db</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> connection </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> dbInstance</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// Now we can simply pass the database instance to the function below</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> userData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getUserData</span><span style=\"color:#BABED8\">(connection)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See how simple and idiomatic it is?</p>\n<h1 id=\"Conclusion\"><a class=\"heading-link\" href=\"#Conclusion\">#</a>Conclusion</h1>\n<p>Top Level Await is an awesome addition to JavaScript, and is here to stay. Heck, even Darth Vader agrees</p>\n<p><img src=\"\" alt=\"Darth Vader: The force is strong with this one\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/top-level-await-force-strong-darth-vader/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/top-level-await-force-strong-darth-vader.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Signing off! <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\"></p>\n",
    "id": "top-level-await",
    "reading_time": 6.0125,
    "toc": [
      {
        "indent": 0,
        "id": "The-Dark-Times...",
        "title": "The Dark Times...",
        "length": 17
      },
      {
        "indent": 1,
        "id": "The-Hack",
        "title": "The Hack",
        "length": 8
      },
      {
        "indent": 0,
        "id": "A-New-Hope",
        "title": "A New Hope",
        "length": 10
      },
      {
        "indent": 0,
        "id": "Requirements",
        "title": "Requirements",
        "length": 12
      },
      {
        "indent": 1,
        "id": "Browser",
        "title": "Browser",
        "length": 7
      },
      {
        "indent": 1,
        "id": "NodeJS",
        "title": "NodeJS",
        "length": 6
      },
      {
        "indent": 2,
        "id": "Step-0",
        "title": "Step 0",
        "length": 6
      },
      {
        "indent": 2,
        "id": "Step-1",
        "title": "Step 1",
        "length": 6
      },
      {
        "indent": 2,
        "id": "Step-2",
        "title": "Step 2",
        "length": 6
      },
      {
        "indent": 0,
        "id": "Use-Cases",
        "title": "Use Cases",
        "length": 9
      },
      {
        "indent": 1,
        "id": "Timer",
        "title": "Timer",
        "length": 5
      },
      {
        "indent": 1,
        "id": "Dependency-fallbacks",
        "title": "Dependency fallbacks",
        "length": 20
      },
      {
        "indent": 1,
        "id": "Internationalization-(i18n)",
        "title": "Internationalization (i18n)",
        "length": 27
      },
      {
        "indent": 1,
        "id": "Resource-initialization",
        "title": "Resource initialization",
        "length": 23
      },
      {
        "indent": 0,
        "id": "Conclusion",
        "title": "Conclusion",
        "length": 10
      }
    ],
    "seriesIndex": 0
  },
  "get-free-github-pro-and-perks": {
    "cover_image": "media/github-student-pack-study-table.jpg",
    "title": "Free Github pro and Perks for Students",
    "date": "2020-12-20T03:58:00.000Z",
    "description": "Are you a student? Then you better enroll yourself into getting the Github Student Developer Pack. So many great perks. Find out more about it.",
    "body": "<p><img src=\"\" alt=\"Study Table\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 75.08333333333333%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/github-student-pack-study-table/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/github-student-pack-study-table/small.jpg\">\n      <img alt=\"Study Table\" data-src=\"../media/github-student-pack-study-table/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p><img class=\"emoji\" draggable=\"false\" alt=\"👋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f44b.svg\"> there! This article is about opening students' eyes about how much perks they can get if they apply for a Github Student Pack.</p>\n<p>I am student at the time of writing (December 2020), and just got admission to an engineering college for my higher studies. I very recently applied for the Github Student Pack and got it. One of the happiest day of my life, as now I could use a lot of the paid programmes that I always wanted, for free!!</p>\n<h1 id=\"What-is-Github\"><a class=\"heading-link\" href=\"#What-is-Github\">#</a>What is Github?</h1>\n<p>Github is an online platform where you can host your code, collaborate on projects, and overall just manage your code really well using the <mark>Version Control System</mark> called <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>.</p>\n<p>Github is based on <mark>Git</mark>, which is a necessity in today's world if you wish to work on code projects in collaboration with other developers, or heck, once you get the hang of it, you will always use it on your personal projects too.</p>\n<p>Github is the biggest player out of all the platforms based on Git, and offers damn too many great services and offers.</p>\n<h1 id=\"Perks-for-Students-eh\"><a class=\"heading-link\" href=\"#Perks-for-Students-eh\">#</a>Perks for Students, eh?</h1>\n<p>Yup. Github offers the <mark>Github Student Developer pack</mark>, which is for all the students currently studying under an institution, like a school or university, and doing some engineering related course or work.</p>\n<blockquote>\n<p>You don't have to be doing a programming course in your college or school to apply. You could be a student in high school or a law university, and still be able to apply for a Student pack.</p>\n</blockquote>\n<p><strong>And it's 100% free.</strong></p>\n<p>The amount of perks you get from Github Student Pack are just unparalleled and you'll thank yourself in future if you get it now.</p>\n<p>According to Github, the value provided by the pack is <strong>12,000 USD</strong> per student <img class=\"emoji\" draggable=\"false\" alt=\"😮\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f62e.svg\">.</p>\n<p><img src=\"\" alt=\"Awestruck\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/free-github-student-po-awestruck/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/free-github-student-po-awestruck.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Mind blowing isn't it? It's a great time to be a Student Developer.</p>\n<p>You also get Github Pro free in it until you're a student. It gets you the Pro badge on your github profile. I dunno how much good stuff you get from Github Pro, but the badge sure looks great <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\">.</p>\n<p>Check out <a href=\"https://github.com/PuruVJ\" target=\"_blank\" rel=\"noopener\">my profile</a> to see the pro badge.</p>\n<h1 id=\"How-to-get-it\"><a class=\"heading-link\" href=\"#How-to-get-it\">#</a>How to get it?</h1>\n<p>Head over to the website, <a href=\"https://education.github.com/pack\" target=\"_blank\" rel=\"noopener\">GitHub Student Developer Pack</a>.</p>\n<p>Here you'll find all the perks you get, and register to Github Student Pack here.</p>\n<p>This topic is way too big to cover myself, and I suggest you to head over to this <a href=\"https://github.blog/2019-07-30-how-to-get-the-github-student-developer-pack-without-a-student-id/\" target=\"_blank\" rel=\"noopener\">Github Blog Post about Student Developer Pack</a>. They have written it better than I ever could ¯\\_(ツ)_/¯</p>\n<p>Signing off!</p>\n",
    "id": "get-free-github-pro-and-perks",
    "reading_time": 1.31,
    "toc": [
      {
        "indent": 0,
        "id": "What-is-Github",
        "title": "What is Github?",
        "length": 15
      },
      {
        "indent": 0,
        "id": "Perks-for-Students-eh",
        "title": "Perks for Students, eh?",
        "length": 23
      },
      {
        "indent": 0,
        "id": "How-to-get-it",
        "title": "How to get it?",
        "length": 14
      }
    ],
    "seriesIndex": 0
  },
  "setup-prettier-vscode": {
    "cover_image": "media/prettier-setup-ugly-vs-clean.jpg",
    "title": "Setting up auto-formatting in VSCode in 5 minutes",
    "date": "2020-12-14T11:41:00.000Z",
    "description": "Set up auto formatting in VSCode in just 5 minutes.",
    "body": "<p><img src=\"\" alt=\"Ugly vs Clean\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.25%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/prettier-setup-ugly-vs-clean/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/prettier-setup-ugly-vs-clean/small.jpg\">\n      <img alt=\"Ugly vs Clean\" data-src=\"../media/prettier-setup-ugly-vs-clean/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>look at the image above <img class=\"emoji\" draggable=\"false\" alt=\"☝\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/261d.svg\">. What do you see?</p>\n<p>On the left, there is a very clean table chair, and very orderly. It's the kind of place where people would wanna sit and have a chat together. It's place where this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"> happens</p>\n<p><img src=\"\" alt=\"Tony and Cap Shake hand\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/tony-cap-handshake-endgame/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/tony-cap-handshake-endgame.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>On the right, it's a mess. A total mess. You simply can't expect to collaborate with anyone in here. You'd probably scare them off! No good conversation, no collaboration, nothing, NADA!!</p>\n<p><img src=\"\" alt=\"Tony punch Cap in his perfect teeth\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/tony-punch-cap-perfect-teeth/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/tony-punch-cap-perfect-teeth.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>This is the same situation with well-formatted code, and unformatted code.</p>\n<p>A little letter to those who have written unformatted code/still write them:</p>\n<blockquote>\n<p>The code may look ugly, but it's still <strong>your</strong> code. You wrote it with the sweat of your brows and strength of your fingers. It's your child, as Scott Tolinsky would say. Having written unformatted code doesn't make you a bad developer.</p>\n</blockquote>\n<p>If you're the only one involved in the project, sure go ahead and write unformatted code. Nobody minds(And ignore those who do).</p>\n<p>But if you are in a team or in some situation where multiple developers are collaborating on the code, you need to have properly formatted code, whether by yourself by hand, or by having it auto-formatted by the tooling.</p>\n<p>And it's better if it's auto-formatted.</p>\n<p>And it's good to have formatted code, even when you're on your own. Higher readability, Higher productivity.</p>\n<p>And this is where Prettier comes in.</p>\n<h1 id=\"What-is-Prettier\"><a class=\"heading-link\" href=\"#What-is-Prettier\">#</a>What is Prettier?</h1>\n<p>Prettier is basically a tool that automatically formats the code you've written, saving you the headache of fixing spaces and brackets positioning yourselves.</p>\n<h2 id=\"So-it's-a-VSCode-extension\"><a class=\"heading-link\" href=\"#So-it's-a-VSCode-extension\">#</a>So it's a VSCode extension?</h2>\n<p>Off course, as the title says <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\">.</p>\n<p>It's a very good extension that saves you a lot of trouble. All you have to know is one shortcut key combo to automatically format the code, and boom, you're done.</p>\n<p>But it's more than an extension. it's actually an <mark>NPM package</mark> as well as a <mark>CLI</mark> originally, on top of which the VSCode extension has been written. It can be run as easily as</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">prettier </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#BABED8\">write filename.js</span></span>\n<span class=\"line\"></span></code></pre>\n<p>or, to format all kinds of files all at once</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">prettier </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#BABED8\">write </span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">src/**/*.{html,css,js,json,jsx,tsx}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Why-should-I-bother-with-the-NPM-package\"><a class=\"heading-link\" href=\"#Why-should-I-bother-with-the-NPM-package\">#</a>Why should I bother with the NPM package?</h2>\n<p>VSCode extension is much easier and better in terms of Developer Experience, but it can only format one file at a time. If you're adding prettier in a pre-existing large-enough project, you simply can't bother with opening every single file yourselves, and hitting the magic keys. You need to <mark>bulk-format</mark> them. That's where Prettier Node CLI comes in.</p>\n<p>There's also the fact that VSCode is a memory hog, and adding extensions to it makes everything slower. You don't need to bother with this point if you have a 8 GB RAM, i5 CPU with blazing-fast SSD laptop, it can take any extension (These specs are just my laptop's specs, these are not hard limits in any way).</p>\n<p>But if you have a slow system and don't wanna add any extensions, No Problem <img class=\"emoji\" draggable=\"false\" alt=\"👍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f44d.svg\">. You'll just need to learn to use the CLI. And it's simple enough. I'll cover that below.</p>\n<p>Now let's cut to the chase.</p>\n<h1 id=\"Setting-up-the-VSCode-extension\"><a class=\"heading-link\" href=\"#Setting-up-the-VSCode-extension\">#</a>Setting up the VSCode extension</h1>\n<p>All right, open up your VSCode</p>\n<ol>\n<li>Hit <code>Ctrl+P</code> (Or <code>Cmd+P</code> if on MacOS)</li>\n<li>Type <code>ext install esbenp.prettier-vscode</code> in the input box that opens up, and hit enter.</li>\n<li>This will install the extension. If it opens up a dialog box about syncing this extension, choose your sync preference for this extension. If you're not sure what that means, I recommend just choosing <code>Yes</code>. That should be good enough</li>\n</ol>\n<p>There, now you have Prettier installed as an extension in VSCode</p>\n<h2 id=\"How-to-use-it\"><a class=\"heading-link\" href=\"#How-to-use-it\">#</a>How to use it?</h2>\n<p>Easy. Open up any file you wish to format. Any JavaScript file for example.</p>\n<p>Right click anywhere in the code, and you'll see the <mark>Format Document</mark> option in the context menu. Click on it, and your document will be auto-formatted, like this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"VSCode right click to format\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/prettier-setup-format-option-vscode/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/prettier-setup-format-option-vscode.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Magic, right?</p>\n<h2 id=\"Shortcut-keys\"><a class=\"heading-link\" href=\"#Shortcut-keys\">#</a>Shortcut keys</h2>\n<p>This is a tricky one. You see, the shortcut keys are different for different Operating Systems and sometimes even for different environments.</p>\n<p>You'll have to see for yourself. Look at the GIF above. You can the see the shortcut key combo right next to the <mark>Format Document</mark> option. It's <mark>Alt+Shift+F</mark> for me.</p>\n<h2 id=\"Optional\"><a class=\"heading-link\" href=\"#Optional\">#</a>Optional</h2>\n<p>You can modify your settings to format the document whenever you hit <code>Ctrl+S</code>.</p>\n<p>Just open up your VSCode settings, search for <code>\"Format on Save\"</code>, and check the option as true.</p>\n<p><img src=\"\" alt=\"Format on Save\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/format-on-save/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/format-on-save.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<blockquote>\n<p>Note: If you have autosave turned on, beware, for whenever you type, your code may jump around like crazy, as prettier tries to format your document at the instant you're typing.</p>\n</blockquote>\n<h1 id=\"Using-it-with-the-CLI\"><a class=\"heading-link\" href=\"#Using-it-with-the-CLI\">#</a>Using it with the CLI</h1>\n<p>This section is dedicated to how to format using the Prettier CLI</p>\n<h2 id=\"Installing-the-CLI\"><a class=\"heading-link\" href=\"#Installing-the-CLI\">#</a>Installing the CLI</h2>\n<p>There 2 ways to install the CLI <img class=\"emoji\" draggable=\"false\" alt=\"👉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f449.svg\"></p>\n<h3 id=\"Global\"><a class=\"heading-link\" href=\"#Global\">#</a>Global</h3>\n<p>It can be installed globally:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">npm install </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">g prettier</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This approach is fine. However, if you're a new linux user and getting permission errors, don't worry for now. Just read the next section to install prettier locally.</p>\n<h3 id=\"Local\"><a class=\"heading-link\" href=\"#Local\">#</a>Local</h3>\n<p>Local here means you install prettier in the folder you're working on right now, and run it locally. This is actually the recommended way, and better than the global approach, in my opinion ¯\\_(ツ)_/¯</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">npm install </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#82AAFF\">save-dev</span><span style=\"color:#BABED8\"> prettier</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Running-it\"><a class=\"heading-link\" href=\"#Running-it\">#</a>Running it</h2>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">npx prettier </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#BABED8\">write file.js</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is for the locally installed prettier. For global, remove <code>npx</code>:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">prettier </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#BABED8\">write file.js</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You can tell it to run prettify all JS files directly in the directory</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">npx prettier </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#BABED8\">write </span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">./src/*.js</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or recursively prettify all the JS files, no matter how deeply embedded in folders</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">npx prettier </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#BABED8\">write </span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">./src/**/*.js</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You can target multiple file formats too</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">npx prettier </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#BABED8\">write </span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">./src/**/*.{js,ts,html,css,json}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The possibilities are endless.</p>\n<h1 id=\".prettierrc\"><a class=\"heading-link\" href=\"#.prettierrc\">#</a>.prettierrc</h1>\n<p>Lastly, you can add your own <code>.prettierrc</code> file to the your workspace. It is basically a little config file telling prettier how it should handle the formatting.</p>\n<p>Here's mine:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">singleQuote</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> true,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">trailingComma</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">all</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">printWidth</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you see, this file is tiny. And that's the best thing about prettier. Prettier comes with very sensible defaults, and will get you very good formatting even without the config file</p>\n<h1 id=\"Conclusion\"><a class=\"heading-link\" href=\"#Conclusion\">#</a>Conclusion</h1>\n<p>Hoped this article helped <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\"></p>\n",
    "id": "setup-prettier-vscode",
    "reading_time": 3.52,
    "toc": [
      {
        "indent": 0,
        "id": "What-is-Prettier",
        "title": "What is Prettier?",
        "length": 17
      },
      {
        "indent": 1,
        "id": "So-it's-a-VSCode-extension",
        "title": "So it's a VSCode extension?",
        "length": 27
      },
      {
        "indent": 1,
        "id": "Why-should-I-bother-with-the-NPM-package",
        "title": "Why should I bother with the NPM package?",
        "length": 41
      },
      {
        "indent": 0,
        "id": "Setting-up-the-VSCode-extension",
        "title": "Setting up the VSCode extension",
        "length": 31
      },
      {
        "indent": 1,
        "id": "How-to-use-it",
        "title": "How to use it?",
        "length": 14
      },
      {
        "indent": 1,
        "id": "Shortcut-keys",
        "title": "Shortcut keys",
        "length": 13
      },
      {
        "indent": 1,
        "id": "Optional",
        "title": "Optional",
        "length": 8
      },
      {
        "indent": 0,
        "id": "Using-it-with-the-CLI",
        "title": "Using it with the CLI",
        "length": 21
      },
      {
        "indent": 1,
        "id": "Installing-the-CLI",
        "title": "Installing the CLI",
        "length": 18
      },
      {
        "indent": 2,
        "id": "Global",
        "title": "Global",
        "length": 6
      },
      {
        "indent": 2,
        "id": "Local",
        "title": "Local",
        "length": 5
      },
      {
        "indent": 1,
        "id": "Running-it",
        "title": "Running it",
        "length": 10
      },
      {
        "indent": 0,
        "id": ".prettierrc",
        "title": ".prettierrc",
        "length": 11
      },
      {
        "indent": 0,
        "id": "Conclusion",
        "title": "Conclusion",
        "length": 10
      }
    ],
    "seriesIndex": 0
  },
  "blog-every-week-rant": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "BLOG. EVERY. SINGLE. WEEK!!",
    "date": "2020-12-09T14:00:00.000Z",
    "description": "Just some random rant to make myself blog every week",
    "body": "<p>BLOG. EVERY. SINGLE. WEEK!!</p>\n<p>That's it. That's the reminder for myself.</p>\n<p>If you look closely at my blog posts, they seem to follow a pattern.</p>\n<p><img src=\"\" alt=\"Puru's blog page inconsistency\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 82%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/blog-every-day-blog-page-image/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/blog-every-day-blog-page-image/small.png\">\n      <img alt=\"Puru's blog page inconsistency\" data-src=\"../media/blog-every-day-blog-page-image/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Look at the 2 blog posts on top, which I have connected with a red line. There's a 3 month difference in there. You'll notice a similar pattern if you go down, that there's a huge gap in between.</p>\n<p>I'm not consistent at all.</p>\n<p>So I'm putting this out there. A [VERY] Public reminder for myself. Now that it is here, I'll be forced to write blog posts every week.</p>\n<p><img src=\"\" alt=\"Ronaldo bracing himself\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/ronaldo-brace-yourself/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/ronaldo-brace-yourself.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n",
    "id": "blog-every-week-rant",
    "reading_time": 0.4125,
    "toc": [],
    "seriesIndex": 0
  },
  "git-pr-clean-commits": {
    "cover_image": "media/git-pr-clean-commits.jpg",
    "title": "Cleaning up tag-along git commits in Pull Requests",
    "date": "2020-12-07T10:13:00.000Z",
    "description": "It's easy to submit dirty PRs with unnecessary number of stowaway commits. Learn how to clean this up.",
    "body": "<p><img src=\"\" alt=\"Alt text\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.25%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/git-pr-clean-commits/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/git-pr-clean-commits/small.jpg\">\n      <img alt=\"Alt text\" data-src=\"../media/git-pr-clean-commits/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Hey awesome dev! Are you on your way to make your next contribution to a repo? Great. Awesome! <img class=\"emoji\" draggable=\"false\" alt=\"👍\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f44d.svg\"></p>\n<p>But when you make your Pull Request, you suddenly see something like this below <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"A PR\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 81%;\">\n    <picture>\n      <source type=\"image/png\" media=\"(min-width: 501px)\" data-srcset=\"../media/fork-ahead-upstream-header-image/large.png\">\n      <source type=\"image/png\" media=\"(max-width: 500px)\" data-srcset=\"../media/fork-ahead-upstream-header-image/small.png\">\n      <img alt=\"A PR\" data-src=\"../media/fork-ahead-upstream-header-image/large.png\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>What is that?! How did it happen?!!</p>\n<p>Don't worry. Just read on.</p>\n<blockquote>\n<p>Disclaimer: I'm not a git expert in any way. In fact I started using it to its full extent only 2 months back from now, in <mark>November, 2020</mark>. The explanation you read below may be (partially)incorrect, and if you find that, please inform me with a Direct Message on twitter <a href=\"https://twitter.com/puruvj\" target=\"_blank\" rel=\"noopener\">@puruvj</a>. You'll be doing a favour to the whole community. However be assured, the commands/steps below are tested to work well, and are correct.</p>\n</blockquote>\n<h1 id=\"Explanation\"><a class=\"heading-link\" href=\"#Explanation\">#</a>Explanation</h1>\n<p>It's easy to submit dirty Pull Requests with unnecessary number of commits, which shouldn't have been in there in the first place</p>\n<p>The photo you see above is of a PR I opened recently on an open source project I'm actively working on, <a href=\"https://github.com/twindle-co/twindle\" target=\"_blank\" rel=\"noopener\">Twindle</a>. I made only 2 commits related to this PR, but as you can see, this includes a lot of commits (19 to be exact). The thing is that it was 15 commits in the previous PR, and around 13 in the one before. As you can see, these commits are just adding on. The next PR I make would have all these included plus the new commits.</p>\n<p>There are 2 reasons why it happens:</p>\n<h2 id=\"Making-PRs-from-one-single-branch\"><a class=\"heading-link\" href=\"#Making-PRs-from-one-single-branch\">#</a>Making PRs from one single branch</h2>\n<p>If you keep making PRs from one single branch, whether it be a new branch you created, or it be <code>main</code> or <code>master</code>, the previous commits will keep adding up, the files involved in each ones will keep piling up too.</p>\n<p>For example, you intended to make a PR with only 2 file changes, but your PR <strong>may</strong> show 10, or 20, or 30, or however number of files all those previous commits included.</p>\n<h2 id=\"Fault-in-our-stars-bots\"><a class=\"heading-link\" href=\"#Fault-in-our-stars-bots\">#</a>Fault in our <s>stars</s> bots</h2>\n<p>As you see in the photo above <img class=\"emoji\" draggable=\"false\" alt=\"👆\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f446.svg\">, you will see some commits by a bot too. Some repos have automated bots to take care of some things. Sometimes when you merge changes from upstream repo(AKA The original repo from which you forked), some bot commits may be included, and will pollute your own commits history.</p>\n<blockquote>\n<p>If this explanation seems very incomplete or weird, is because of the fact that I don't know completely about these bot commits. Please do your own research about this if you can(and tell me too <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60b.svg\">).</p>\n</blockquote>\n<h1 id=\"How-do-I-get-rid-of-these-stowaway-commit\"><a class=\"heading-link\" href=\"#How-do-I-get-rid-of-these-stowaway-commit\">#</a>How do I get rid of these stowaway commit?</h1>\n<p>All you have to do is run these commands</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#FFCB6B\">git</span><span style=\"color:#C3E88D\"> checkout</span><span style=\"color:#C3E88D\"> main</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">git</span><span style=\"color:#C3E88D\"> reset</span><span style=\"color:#C3E88D\"> --hard</span><span style=\"color:#C3E88D\"> upstream/main</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">git</span><span style=\"color:#C3E88D\"> push</span><span style=\"color:#C3E88D\"> --force</span></span>\n<span class=\"line\"></span></code></pre>\n<ol>\n<li>\n<p><code>git checkout main</code> just checkouts to your <code>main</code> branch. Replace it with <code>master</code> or whatever your default branch is.</p>\n</li>\n<li>\n<p><code>git reset --hard upstream/main</code> basically resets your own fork's commit history to that of the upstream's main branch. Replace <code>upstream/main</code> with <code>upstream/master</code> or <code>upstream/dev</code> or whatever that repo's default branch is, if needed.</p>\n</li>\n<li>\n<p><code>git push --force</code> basically pushes the new commit history to your own fork. <code>--force</code> is needed, cuz ideally, there won't be any files for git to push, so it will try to show your error.</p>\n</li>\n</ol>\n<h1 id=\"Caution\"><a class=\"heading-link\" href=\"#Caution\">#</a>Caution</h1>\n<p>Hard reset may delete your local commits or any changes, so better not run this cleanup. Make your (dirty) PR, implore the maintainer to merge, and then do this process with your main branch.</p>\n",
    "id": "git-pr-clean-commits",
    "reading_time": 1.74,
    "toc": [
      {
        "indent": 0,
        "id": "Explanation",
        "title": "Explanation",
        "length": 11
      },
      {
        "indent": 1,
        "id": "Making-PRs-from-one-single-branch",
        "title": "Making PRs from one single branch",
        "length": 33
      },
      {
        "indent": 1,
        "id": "Fault-in-our-stars-bots",
        "title": "Fault in our stars bots",
        "length": 23
      },
      {
        "indent": 0,
        "id": "How-do-I-get-rid-of-these-stowaway-commit",
        "title": "How do I get rid of these stowaway commit?",
        "length": 42
      },
      {
        "indent": 0,
        "id": "Caution",
        "title": "Caution",
        "length": 7
      }
    ],
    "seriesIndex": 0
  },
  "chaining-promises-array-methods": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "Async Await usage and pitfalls in Array.prototype.map() and chaining",
    "date": "2020-09-29T10:05:00.000Z",
    "description": "Using async await in array methods is quite tricky. But it gets even trickier when you chain multiple array methods. Find out how.",
    "body": "<p>Let's consider the code below</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> IDs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> usersData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> IDs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">map</span><span style=\"color:#BABED8\">(</span><span style=\"color:#C792EA\">async</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">id</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getUserData</span><span style=\"color:#BABED8\">(id))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(usersData)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>What would this output?</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">[</span><span style=\"color:#FFCB6B\">Promise</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>All these are promises. But we are expecting data as objects(or whatever other format you can think of) here. How do <code>await</code> every single array item?</p>\n<p>The solution here is <code>Promise.all</code>. Quick recap:</p>\n<p><code>Promise.all</code> takes in an array of promises, runs them concurrently until they <code>all</code> resolve, and return a bigger <code>promise</code> with the outcomes from those promises as resolved values as an Array</p>\n<p>For example</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">all</span><span style=\"color:#BABED8\">([</span><span style=\"color:#82AAFF\">getUserData</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#82AAFF\"> getUserData</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">2</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#82AAFF\"> getUserData</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">3</span><span style=\"color:#BABED8\">)])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>will return</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">[</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  {</span><span style=\"color:#F07178\"> id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ...</span><span style=\"color:#BABED8\">otherData </span><span style=\"color:#89DDFF\">},</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  {</span><span style=\"color:#F07178\"> id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ...</span><span style=\"color:#BABED8\">otherData </span><span style=\"color:#89DDFF\">},</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  {</span><span style=\"color:#F07178\"> id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ...</span><span style=\"color:#BABED8\">otherData </span><span style=\"color:#89DDFF\">},</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you think about it, the code snippet where we're mapping over IDs is just an Array of Promises. We can directly <code>Promise.all</code> that array</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> IDs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> usersDataPromises </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> IDs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">map</span><span style=\"color:#BABED8\">(</span><span style=\"color:#C792EA\">async</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">id</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getUserData</span><span style=\"color:#BABED8\">(id))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> usersData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">all</span><span style=\"color:#BABED8\">(usersDataPromises)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(usersData)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That would output us the same object as above</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">[</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  {</span><span style=\"color:#F07178\"> id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ...</span><span style=\"color:#BABED8\">otherData </span><span style=\"color:#89DDFF\">},</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  {</span><span style=\"color:#F07178\"> id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ...</span><span style=\"color:#BABED8\">otherData </span><span style=\"color:#89DDFF\">},</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  {</span><span style=\"color:#F07178\"> id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ...</span><span style=\"color:#BABED8\">otherData </span><span style=\"color:#89DDFF\">},</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h1 id=\"Tricky-part\"><a class=\"heading-link\" href=\"#Tricky-part\">#</a>Tricky part</h1>\n<p>The trick above works like a charm. However, difficulty arises when you chain another array method to the existing array, like this</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> IDs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> usersDataPromise </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> IDs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">map</span><span style=\"color:#BABED8\">(</span><span style=\"color:#C792EA\">async</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">id</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getUserData</span><span style=\"color:#BABED8\">(id))</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">map</span><span style=\"color:#BABED8\">(</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  async</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">data</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getPosts</span><span style=\"color:#BABED8\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> usersData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">all</span><span style=\"color:#BABED8\">(usersDataPromise)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(usersData)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It will return an error. Why?</p>\n<p><code>Promise.all</code> tries to run all promises at once. And I mean, <strong>All of them</strong>. It will try to run the 2nd <code>map</code> <strong>alongside</strong> the first map. You can see for yourself this is a problem, as the second <code>map</code> depends on the value from the first.</p>\n<p>How do we resolve this (Pun intended <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\">)?</p>\n<h1 id=\"Solutions\"><a class=\"heading-link\" href=\"#Solutions\">#</a>Solutions</h1>\n<p>There can be many ways to solve this problem. I will share 2 here</p>\n<h2 id=\"1st\"><a class=\"heading-link\" href=\"#1st\">#</a>1st</h2>\n<p><code>Promise.all</code> at every single step</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> IDs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> usersData </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">all</span><span style=\"color:#BABED8\">(</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  IDs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">map</span><span style=\"color:#BABED8\">(</span><span style=\"color:#C792EA\">async</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">id</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getUserData</span><span style=\"color:#BABED8\">(id))</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> usersPosts </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">all</span><span style=\"color:#BABED8\">(</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  usersData</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">map</span><span style=\"color:#BABED8\">(</span><span style=\"color:#C792EA\">async</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">userData</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getPosts</span><span style=\"color:#BABED8\">(userData))</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"2nd\"><a class=\"heading-link\" href=\"#2nd\">#</a>2nd</h2>\n<p>A plain old <code>for of</code> loop:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> IDs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> usersPosts </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> []</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">for</span><span style=\"color:#BABED8\"> (</span><span style=\"color:#C792EA\">let</span><span style=\"color:#BABED8\"> id </span><span style=\"color:#89DDFF\">of</span><span style=\"color:#BABED8\"> IDs) </span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> userData</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getUsersData</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">id</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> userPosts</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF;font-style:italic\"> await</span><span style=\"color:#82AAFF\"> getPosts</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">userData</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  usersPosts</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">push</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">userPosts</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I prefer the 2nd approach. If you wanna add an extra step, you simply add an extra line, whereas the 1st will require a whole extra <code>Promise.all(array map)</code>, which ultimately is just code redundancy.</p>\n",
    "id": "chaining-promises-array-methods",
    "reading_time": 2.185,
    "toc": [
      {
        "indent": 0,
        "id": "Tricky-part",
        "title": "Tricky part",
        "length": 11
      },
      {
        "indent": 0,
        "id": "Solutions",
        "title": "Solutions",
        "length": 9
      },
      {
        "indent": 1,
        "id": "1st",
        "title": "1st",
        "length": 3
      },
      {
        "indent": 1,
        "id": "2nd",
        "title": "2nd",
        "length": 3
      }
    ],
    "seriesIndex": 0
  },
  "flatten-settimeout": {
    "cover_image": "media/timer.jpg",
    "title": "Simplify code by promisifying `setTimeout`",
    "date": "2020-09-28T09:04:00.000Z",
    "description": "Simplify and clean your codebase by making setTimeout more idiomatic using Promises",
    "body": "<p><img src=\"\" alt=\"Alt text\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 56.25%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/timer/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/timer/small.jpg\">\n      <img alt=\"Alt text\" data-src=\"../media/timer/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Recently, when I was working on my practice project <a href=\"https://ms-todo.vercel.app\" target=\"_blank\" rel=\"noopener\">Microsoft Todo Clone</a>, I needed to implement code like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span>#1 Do Task 1</span></span>\n<span class=\"line\"><span>#2 Wait for 200ms</span></span>\n<span class=\"line\"><span>#3 Do task 2</span></span>\n<span class=\"line\"><span>#4 Wait for 200ms</span></span>\n<span class=\"line\"><span>#5 Do Task 3</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>Notice <code>#2</code> and <code>#4</code>. They smell of <code>setTimeout</code> <img class=\"emoji\" draggable=\"false\" alt=\"😖\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f616.svg\">. <code>setTimeout</code> takes in a callback, meaning there will be an indentation. Whenever those appear, means the code's gonna get ugly.</p>\n<p>So I wrote this code in JS</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#82AAFF\">doTask1</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">setTimeout</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  doTask2</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">  setTimeout</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">    doTask3</span><span style=\"color:#F07178\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span><span style=\"color:#F78C6C\"> 200</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">},</span><span style=\"color:#F78C6C\"> 200</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now you can see for yourself, this code SMELLS. BAD.</p>\n<p>The moment I wrote it, I knew it wouldn't work in long-term. What if I needed to an extra step of waiting and doing a Task #4? Or rearranging the order.</p>\n<p>So, I declared a utility function and it solved the problem completely.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">number</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> time</span><span style=\"color:#676E95;font-style:italic\"> Time to wait for in milliseconds</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> waitFor</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">time</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> new</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> setTimeout</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">resolve</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> time</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we're returning a <code>Promise</code>, which resolves when the <code>setTimeout</code> function inside runs.</p>\n<p>It's usage would be as simple as</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> waitFor</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">200</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So the spaghetti code above could be rearranged like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#82AAFF\">doTask1</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> waitFor</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">200</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">doTask2</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> waitFor</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">200</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">doTask3</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See how simple it became? It reads exactly like the text version I wrote at the top. It's very idiomatic <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\">.</p>\n<h2 id=\"Shorter-code\"><a class=\"heading-link\" href=\"#Shorter-code\">#</a>Shorter code</h2>\n<p>That code snippet could be simplified further</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> waitFor </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">time</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> new</span><span style=\"color:#FFCB6B\"> Promise</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">resolve</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#82AAFF\"> setTimeout</span><span style=\"color:#BABED8\">(resolve</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> time))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n",
    "id": "flatten-settimeout",
    "reading_time": 1.18,
    "toc": [
      {
        "indent": 1,
        "id": "Shorter-code",
        "title": "Shorter code",
        "length": 12
      }
    ],
    "seriesIndex": 0
  },
  "split-array-chunks": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "Split Array into `n` number of chunks",
    "date": "2020-09-27T05:15:00.000Z",
    "description": "Split an array into `n` number of multiple arrays with JavaScript",
    "body": "<p>Recently, while making my blog, I ran into a problem. I was using headless chrome to take snapshot of the URLs provided on the <mark>Works</mark> page, and it was turning out to be quite slow, even on Cloud Servers, which have top-notch internet and processing speed.</p>\n<p>I was passing it a URL at a time, it would go to it, take a snapshot, then move to the next URL, and so on. It was a very linear process.</p>\n<p>But those servers being so powerful, they could've snapshot 5 pages at once at the speed it takes for 1 page. So I decided to split the work up in chunks. I broke the urls up in chunks of 5. Chrome would snapshot those 5 simultaneously, and when it was done with all, it would move on to the next 5, and so on. The times reduced to a <code>third</code> of the time.</p>\n<p>Consider this array <code>list</code>. For our purposes, let's just deal simply with numbers rather than URLs.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> list </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 6</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 8</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 9</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 10</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 11</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 12</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now I want to split it into chunks of 5, like this,</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> splitList </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  [</span><span style=\"color:#F78C6C\">6</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 8</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 9</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 10</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  [</span><span style=\"color:#F78C6C\">11</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 12</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or chunks of 4:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> SplitList </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  [</span><span style=\"color:#F78C6C\">5</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 6</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 8</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  [</span><span style=\"color:#F78C6C\">9</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 10</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 11</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 12</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You get the idea.</p>\n<h1 id=\"Code\"><a class=\"heading-link\" href=\"#Code\">#</a>Code</h1>\n<p>The code for splitting an array in its simplest form would be:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">/**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">Array</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> arr</span><span style=\"color:#676E95;font-style:italic\"> The array to be broken into chunks</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> * </span><span style=\"color:#89DDFF;font-style:italic\">@</span><span style=\"color:#C792EA;font-style:italic\">param</span><span style=\"color:#89DDFF;font-style:italic\"> {</span><span style=\"color:#FFCB6B;font-style:italic\">number</span><span style=\"color:#89DDFF;font-style:italic\">}</span><span style=\"color:#BABED8;font-style:italic\"> n</span><span style=\"color:#676E95;font-style:italic\"> The number of items in each chunk</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\"> */</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">function</span><span style=\"color:#82AAFF\"> chunks</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">arr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> n</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  let</span><span style=\"color:#BABED8\"> items</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#F07178\"> [</span><span style=\"color:#89DDFF\">...</span><span style=\"color:#BABED8\">arr</span><span style=\"color:#F07178\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">  return</span><span style=\"color:#89DDFF\"> new</span><span style=\"color:#82AAFF\"> Array</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">Math</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">ceil</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">items</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">length</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#BABED8\"> n</span><span style=\"color:#F07178\">))</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    .</span><span style=\"color:#82AAFF\">fill</span><span style=\"color:#F07178\">()</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    .</span><span style=\"color:#82AAFF\">map</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> items</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">splice</span><span style=\"color:#F07178\">(</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> n</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Let's break it down piece by piece:</p>\n<ul>\n<li>\n<p>We're returning an <code>Array</code> with the number of items defined by <code>Math.ceil(items.length / n)</code>. if <code>items.length</code> is 12, and <code>n</code> is 5, we would get the devision as 2.4 . More than 2, less than 3. 2 items(11, 12) will be leftover, and will need to be accomodated in 3rd array, so <code>Math.ceil</code> the division.</p>\n</li>\n<li>\n<p><code>.fill()</code> simply fills the array up with <code>undefined</code>. This is to get an array with the required size, and we can modify those values later. The example above would return <code>[undefined, undefined, undefined]</code>.</p>\n</li>\n<li>\n<p><code>.map()</code> We're traversing over every value in the array of <code>undefined</code> and replacing it with a chunk of the <code>items</code> array. <code>splice</code> removes a chunk from the given array and returns as the value for the <code>.map</code></p>\n</li>\n<li>\n<p>Lastly, notice we're cloning <code>arr</code> into <code>items</code>. This is required to not mutate the original value.</p>\n</li>\n</ul>\n<h2 id=\"Explanation\"><a class=\"heading-link\" href=\"#Explanation\">#</a>Explanation</h2>\n<p>Let's see how <code>splice</code> works</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> arr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 6</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 8</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 9</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> spliced </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> arr</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">splice</span><span style=\"color:#BABED8\">(</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// let's print both the original array and spliced array</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(spliced)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // Output: [1, 2, 3]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(arr)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // [4, 5, 6, 7, 8, 9]</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>splice</code> mutated the original array.</p>\n<p>That's what would happen in the <code>chunks</code> function.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> arr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> [</span><span style=\"color:#F78C6C\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 3</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 6</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 7</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 8</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 9</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 10</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 11</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 12</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> chunked </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> chunks</span><span style=\"color:#BABED8\">(arr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 5</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(arr)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#676E95;font-style:italic\"> // Output: []</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>chunks</code> would remove all the values from the original array. However due to cloning the passed array and working on it, we avoid this problem.</p>\n<h1 id=\"Conclusion\"><a class=\"heading-link\" href=\"#Conclusion\">#</a>Conclusion</h1>\n<p>Go chunk it up <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\"> <img class=\"emoji\" draggable=\"false\" alt=\"😜\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f61c.svg\"> <img class=\"emoji\" draggable=\"false\" alt=\"🤣\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f923.svg\"></p>\n",
    "id": "split-array-chunks",
    "reading_time": 2.3375,
    "toc": [
      {
        "indent": 0,
        "id": "Code",
        "title": "Code",
        "length": 4
      },
      {
        "indent": 1,
        "id": "Explanation",
        "title": "Explanation",
        "length": 11
      },
      {
        "indent": 0,
        "id": "Conclusion",
        "title": "Conclusion",
        "length": 10
      }
    ],
    "seriesIndex": 0
  },
  "gif-to-mp4-ffmpeg-fluent-web": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "GIF to MP4 conversion for web using NodeJS",
    "date": "2020-09-24T19:39:00.000Z",
    "description": "GIF to MP4 conversion for performance is all the rage nowadays. But doing so in practice is really difficult, especially for cross-browser compatibility. Learn how to do it right",
    "body": "<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/harry-firebolt-eats-cupcake/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/harry-firebolt-eats-cupcake.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Who doesn't love these awesome GIFs? These are used heavily on social media, and many among us(*cough* Myself *cough*) couldn't live without these (Prove me wrong <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\">)</p>\n<p>However, these GIFs are costly. They eat up loads of CPU and GPU power, are huge in file size. This GIF above <img class=\"emoji\" draggable=\"false\" alt=\"👆\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f446.svg\"> is <mark>890kb</mark> when downloaded. This number may not seem huge, but it's MP4 version is only <mark>132kb</mark>.</p>\n<blockquote>\n<p>It's <strong>85%</strong> smaller <img class=\"emoji\" draggable=\"false\" alt=\"😮\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f62e.svg\"></p>\n</blockquote>\n<p>And it barely eats any CPU. Even the oldest of devices will play it easily</p>\n<h1 id=\"How-to-convert\"><a class=\"heading-link\" href=\"#How-to-convert\">#</a>How to convert</h1>\n<p>You can convert a GIF to MP4 by running this command</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">ffmpeg </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">i harry</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">eats</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">cupcake.gif </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">pix_fmt yuv420p </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">c:v libx264 </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">movflags </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#BABED8\">faststart </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">filter:v crop</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">floor(in_w/2)*2:floor(in_h/2)*2</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\"> output.mp4</span></span>\n<span class=\"line\"></span></code></pre>\n<p>What are those weird options? I'll explain later.</p>\n<p>However, you'll have to manually run this on every single GIF.</p>\n<p>But we, the developers don't like to do that<img class=\"emoji\" draggable=\"false\" alt=\"🙄\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f644.svg\">. So let's automate the process.</p>\n<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 75.08333333333333%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/dev-automation-10-min/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/dev-automation-10-min/small.jpg\">\n      <img alt=\"\" data-src=\"../media/dev-automation-10-min/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<h1 id=\"Install-dependencies\"><a class=\"heading-link\" href=\"#Install-dependencies\">#</a>Install dependencies</h1>\n<p>We'll require a binary of <code>ffmpeg</code> and will have to figure how to use it. And we'll need to download the <strong>right</strong> binary. What I mean by this is that in a real world application, you'll be deploying the code on cloud/servers, and you'd need FFMPEG there too.</p>\n<p>If it's your own server, you can upload it there manually and it'll work. But you can't directly upload the binary to Cloud environments like Google Cloud Functions/AWS lambda without a lot of preprocessing and testing on your end. You'd have to keep a Ubuntu compatible FFMPEG binary alongside your own OS based binary, and still it won't work properly.</p>\n<p>But thank the NPM Gods, we have the package <a href=\"https://www.npmjs.com/package/@ffmpeg-installer/ffmpeg\" target=\"_blank\" rel=\"noopener\">@ffmpeg-installer/ffmpeg</a> that installs the <strong>right</strong> binary based on the operating system. If you are running Windows, it'll download the <code>ffmpeg.exe</code> file. If the OS is linux based, it'll download specific binary for that.</p>\n<p>And there's also an amazing package called <a href=\"https://www.npmjs.com/package/fluent-ffmpeg\" target=\"_blank\" rel=\"noopener\">fluent-ffmpeg</a> which provides a very declarative, callback-based API to interact with FFMPEG.</p>\n<p>So let's download these. Make sure you have npm setup.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">npm i </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">D </span><span style=\"color:#89DDFF\">@</span><span style=\"color:#BABED8\">ffmpeg</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">installer</span><span style=\"color:#89DDFF\">/</span><span style=\"color:#BABED8\">ffmpeg fluent</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">ffmpeg </span><span style=\"color:#89DDFF\">@</span><span style=\"color:#BABED8\">ffprobe</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">installer</span><span style=\"color:#89DDFF\">/</span><span style=\"color:#BABED8\">ffprobe</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The <code>@ffprobe-installer/ffprobe</code> package is also required by FFMPEG.</p>\n<h1 id=\"Code\"><a class=\"heading-link\" href=\"#Code\">#</a>Code</h1>\n<p>First, let's set up FFMPEG paths in our <code>index.js</code> file:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> ffmpegInstaller </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">@ffmpeg-installer/ffmpeg</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> ffprobe </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">@ffprobe-installer/ffprobe</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> ffmpeg </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">fluent-ffmpeg</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)()</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">setFfprobePath</span><span style=\"color:#BABED8\">(ffprobe</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">path)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">setFfmpegPath</span><span style=\"color:#BABED8\">(ffmpegInstaller</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">path)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>The code snippet above <img class=\"emoji\" draggable=\"false\" alt=\"☝\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/261d.svg\"> is not optional. Not having this config will break your program</p>\n</blockquote>\n<p>Now, the code to convert GIF to MP4</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">ffmpeg</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">input</span><span style=\"color:#BABED8\">(gifPath)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">noAudio</span><span style=\"color:#BABED8\">()</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">output</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#C3E88D\">vidgif.mp4</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">on</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">end</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">Finished</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">on</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">error</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">e</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(e))</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">run</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<ul>\n<li>\n<p><code>.input(gifPath)</code> is inputting the GIF file by its path. Relative paths will work here like <code>../../harry-eats-cupcake.gif</code>.</p>\n</li>\n<li>\n<p><code>.noAudio()</code> will remove all the audio from the file. Makes sense. GIFs don't speak <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\">.</p>\n</li>\n<li>\n<p><code>.output('vidgif.mp4')</code> is the path where the output file has to be written. FFMPEG will look at the output file's format(<code>.mp4</code> here) and automatically choose the currect library for encoding, <code>libx264</code> for mp4 files.</p>\n</li>\n</ul>\n<blockquote>\n<p><code>libx264</code> is a video encoding library that encodes the video file into H.264 encoding, the most widely supported video codec. <a href=\"https://caniuse.com/mpeg4\" target=\"_blank\" rel=\"noopener\">See here: Caniuse H.264</a></p>\n</blockquote>\n<ul>\n<li>\n<p><code>.on(\"end\")</code> and <code>.on(\"error\")</code> are events that fire when the process finishes or throws an error and shuts down respectively.</p>\n</li>\n<li>\n<p><code>.run()</code> is the most important line here. Without it, the process will not start and you'll staring at your blank terminal waiting for anything to happen, which it won't <img class=\"emoji\" draggable=\"false\" alt=\"😏\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60f.svg\">.</p>\n</li>\n</ul>\n<p>When this process finishes, you'll have a <code>vidgif.mp4</code> sitting right where you intended. It'll be much smaller in size, and will play perfectly fine.</p>\n<p>Just replace</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">img</span><span style=\"color:#C792EA\"> src</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">harry-eats-cupcake.gif</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>with</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">video</span><span style=\"color:#C792EA\"> autoplay</span><span style=\"color:#C792EA\"> loop</span><span style=\"color:#C792EA\"> muted</span><span style=\"color:#C792EA\"> playsinline</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">source</span><span style=\"color:#C792EA\"> src</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">vidgif.mp4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> type</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">video/mp4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Your browser doesn't support HTML5 video playback.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">a</span><span style=\"color:#C792EA\"> href</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">harry-eats-cupcake.gif</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> target</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">_blank</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> rel</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">noopener</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &gt;</span><span style=\"color:#BABED8\">See the gif here</span><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">a</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">video</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now this will play just like GIF! <code>playsinline</code> is necessary for it to run automatically on IOS Safari, and is also good for performance.</p>\n<p>But wait! There's a catch!</p>\n<p>If you push this file to production, and try to view it on Android or IOS, you'll see a blank area where the GIF should be visible. Why?</p>\n<h1 id=\"Compatibility\"><a class=\"heading-link\" href=\"#Compatibility\">#</a>Compatibility</h1>\n<p>The code above doesn't encode the new MP4 video for maximum compatibility.</p>\n<p>The file you generated will work fine on a computer which comes with all kinds of codecs preinstalled. But your phone's browser won't be able to parse the video file.</p>\n<h1 id=\"Solution\"><a class=\"heading-link\" href=\"#Solution\">#</a>Solution</h1>\n<p>Remember the code snippet on top? Here it is again <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">ffmpeg </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">i harry</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">eats</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">cupcake.gif </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">pix_fmt yuv420p </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">c:v libx264 </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">movflags </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#BABED8\">faststart </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#BABED8\">filter:v crop</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">floor(in_w/2)*2:floor(in_h/2)*2</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\"> output.mp4</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This code snippet works perfectly. The output.mp4 here works on phones too. But how do we translate it to <code>fluent-ffmpeg</code> format <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\">?</p>\n<p><code>fluent-ffmpeg</code> has an <code>outputOptions</code> method which takes in an array of the all the output options. Simply put, every option after the <code>-i inputFile.gif</code> is an <code>outputOption</code>.</p>\n<p>Here's the code</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">ffmpeg</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">input</span><span style=\"color:#BABED8\">(gifPath)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">outputOptions</span><span style=\"color:#BABED8\">([</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">-pix_fmt yuv420p</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">-c:v libx264</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">-movflags +faststart</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">-filter:v crop='floor(in_w/2)*2:floor(in_h/2)*2'</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ])</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">noAudio</span><span style=\"color:#BABED8\">()</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">output</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#C3E88D\">vidgif.mp4</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">on</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">end</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">Ended</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">on</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">error</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">e</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(e))</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">run</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<ul>\n<li>output mp4 is encoded with h264, support Firefox/Chrome/Safari in Windows, Mac OSX, Android, and iOS.</li>\n<li>one mp4 file for all platforms, there is no need to encode an extra <code>webm</code> movie, which encoding speed is pretty slow.</li>\n<li>format as <code>yuv420p</code> for Firefox compatibility, the downside is color becomes less-saturate than original gif.</li>\n<li>yuv420p only support even width/height, so crop filter is required</li>\n<li><code>-movflags +faststart</code> flags are optimized for online view in browser</li>\n<li>compression ratio typically 10:1, pretty awesome. note that if original gif is &lt; 512KB, convert as mp4 is less efficient.</li>\n</ul>\n<p><a href=\"https://gist.github.com/ingramchen/e2af352bf8b40bb88890fba4f47eccd0\" target=\"_blank\" rel=\"noopener\">Courtesy of this gist</a></p>\n<h1 id=\"Complete-Code\"><a class=\"heading-link\" href=\"#Complete-Code\">#</a>Complete Code</h1>\n<p>JS:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> ffmpegInstaller </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">@ffmpeg-installer/ffmpeg</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> ffprobe </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">@ffprobe-installer/ffprobe</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> ffmpeg </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">fluent-ffmpeg</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)()</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">setFfprobePath</span><span style=\"color:#BABED8\">(ffprobe</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">path)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">setFfmpegPath</span><span style=\"color:#BABED8\">(ffmpegInstaller</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">path)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">ffmpeg</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">input</span><span style=\"color:#BABED8\">(gifPath)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">outputOptions</span><span style=\"color:#BABED8\">([</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">-pix_fmt yuv420p</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">-c:v libx264</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">-movflags +faststart</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">-filter:v crop='floor(in_w/2)*2:floor(in_h/2)*2'</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ])</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">noAudio</span><span style=\"color:#BABED8\">()</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">output</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#C3E88D\">vidgif.mp4</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">on</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">end</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> ()</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">Ended</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">on</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">error</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">e</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#BABED8\"> console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#BABED8\">(e))</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">run</span><span style=\"color:#BABED8\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>HTML:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">video</span><span style=\"color:#C792EA\"> autoplay</span><span style=\"color:#C792EA\"> loop</span><span style=\"color:#C792EA\"> muted</span><span style=\"color:#C792EA\"> playsinline</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">source</span><span style=\"color:#C792EA\"> src</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">vidgif.mp4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> type</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">video/mp4</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  Your browser doesn't support HTML5 video playback.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">a</span><span style=\"color:#C792EA\"> href</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">harry-eats-cupcake.gif</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> target</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">_blank</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> rel</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">noopener</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &gt;</span><span style=\"color:#BABED8\">See the gif here</span><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">a</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">video</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n",
    "id": "gif-to-mp4-ffmpeg-fluent-web",
    "reading_time": 4.3475,
    "toc": [
      {
        "indent": 0,
        "id": "How-to-convert",
        "title": "How to convert",
        "length": 14
      },
      {
        "indent": 0,
        "id": "Install-dependencies",
        "title": "Install dependencies",
        "length": 20
      },
      {
        "indent": 0,
        "id": "Code",
        "title": "Code",
        "length": 4
      },
      {
        "indent": 0,
        "id": "Compatibility",
        "title": "Compatibility",
        "length": 13
      },
      {
        "indent": 0,
        "id": "Solution",
        "title": "Solution",
        "length": 8
      },
      {
        "indent": 0,
        "id": "Complete-Code",
        "title": "Complete Code",
        "length": 13
      }
    ],
    "seriesIndex": 0
  },
  "how-i-created-personal-site-part-3": {
    "cover_image": "media/camera-scenery.jpg",
    "title": "Image Optimization Automation with Incremental builds",
    "date": "2020-06-29T04:20:00.000Z",
    "description": "In this post, I delve deep into how I automated image optimization on my blog.",
    "body": "<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/camera-scenery/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/camera-scenery/small.jpg\">\n      <img alt=\"\" data-src=\"../media/camera-scenery/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p class=\"series-links\"></p><blockquote>\n      <p>How I created my personal site series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-1\">Part 1 - Tech Stack &amp; Design</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-2\">Part 2 - Blogging with Markdown</a><br><a> Part 3 - Image Optimization Automation with Incremental builds (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br>\n      </p>\n    </blockquote><p></p>\n<p>Image Optimization. Ah, The bane of frontend devs! All that is slow with a site is responsible mostly because of images. These take up 100s of Kilobytes, and slow up the site heavily. What if we could just optimize our images so they wouldn't make the page slow?</p>\n<p>I know the perfect solution to this problem. <strong>REMOVE ALL THE IMAGES!</strong></p>\n<p>Just kidding. Don't remove images. They're important. Very Important. They breathe life and fun into a page. Keep as many images you want.</p>\n<p>But this image problem, it's real. And it's important. A lot of people in the world don't enjoy as good network connections as those in US, UK do, like India and Nigeria. Also, data plans per GB on slower connections are much more expensive.</p>\n<p>For example, in India, before the 4g revolution brought on by Reliance Jio, the data plan for 1GB 3G data was <strong>Rs. 345 (4.6 USD)</strong>. That's <strong>4.6 USD / GB</strong>! ON 3G! And now, it's <strong>Rs. 150 (2 USD)</strong> for <strong>30GB</strong> 4G data! That's just <strong>Rs. 5 (6 cents) / GB</strong>. And that's for 4G.</p>\n<p>And data prices are even worse in countries like Thailand, where due to strict Government regulations, prices for even voice calls are astronomically high!</p>\n<p>So you see, image optimization is important not for just User Experience, but also for their Wallets. So let's see how I achieved it in this blog.</p>\n<p>But first, let's get this question out of the way:</p>\n<h2 id=\"Why-do-it-myself\"><a class=\"heading-link\" href=\"#Why-do-it-myself\">#</a>Why do it myself?</h2>\n<p>Why should I spend so many hours working on something so trivial and for which there are thousands of platforms and plugins?</p>\n<p>That's a valid question. Why? I mean if you have ever used <a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener\">Gatsby</a>, you would know that there is a plugin which does that specifically for you. It's extremely flexible, requires very little amount code, and works like a charm.</p>\n<p>And what about <a href=\"https://cloudinary.com/\" target=\"_blank\" rel=\"noopener\">Cloudinary</a>? Ah Cloudinary, the Dumbledore of image optimization. The most magical thing I've very seen in the image optimization department. Why not simple use it?</p>\n<p>And fair point. Cloudinary gives you such a granular control, just in the URL. You can ask for the image with specific dimensions, or aspect-ratio or any level of quality, simply by specifying some parameters in the URL. So magical!</p>\n<p>But I didn't choose Cloudinary. Or the Gatsby image plugin (cuz I'm not using Gatsby, I'm using <a href=\"https://stenciljs.com\" target=\"_blank\" rel=\"noopener\">StencilJS</a>).</p>\n<p>I long thought about Cloudinary. Sounds simple ... well, simple, but what is the fun in that?</p>\n<p>The reason is simple:</p>\n<blockquote>\n<p>I wanted to get my hands dirty!</p>\n</blockquote>\n<p>This blog wasn't just meant to have a personal site or online presence, it's an exercise. A leap of faith. To do something I've never done before.</p>\n<p>Before I ever worked on this blog, I was dead scared of automating image optimization by myself. It sounded very complicated (cuz it is), and something that I could never do.</p>\n<p>I had done image optimization before, but it was all by hand. It was on the website of my father's hospital I had made, <a href=\"https://purueyehospital.com\" target=\"_blank\" rel=\"noopener\">Puru Eye Hospital</a>. I made 4 different variations of every single image, all by myself. I myself made <strong>44</strong> images!</p>\n<p>So when I started work on this project, I made up my mind: I was going to do it. ALL. BY. MYSELF.</p>\n<p>These are my reasons. These are, you could say, a bit naive, but that's all right.</p>\n<p><mark>A Note though</mark>: If you're a company or someone who wants to save time and money, go with Cloudinary or some other similar solution. Cloudinary optimized images are much smaller too.</p>\n<p>So, up and at 'em.</p>\n<h1 id=\"Expectations\"><a class=\"heading-link\" href=\"#Expectations\">#</a>Expectations</h1>\n<p>Ok, so these are the expectations I have from the the images on my blog:</p>\n<h2 id=\"Next-gen-formats\"><a class=\"heading-link\" href=\"#Next-gen-formats\">#</a>Next gen formats</h2>\n<p>JPEGs and PNGs are fine, but I need to squeeze out more from my images. I want the images to be high quality and small in size at the same time.</p>\n<p><mark>WebP</mark> to the rescue!</p>\n<p>WebP is a relatively newer image format which can give 20-30% decrease in size, at same quality. And it even supports transparency like PNG, and animatability like a GIF. It's an amazing image format.</p>\n<p>But WebP doesn't has universal support as of now (Looking at you iOS Safari and IE 11). So we need a fallback.</p>\n<p>This is the strategy: Show WebP for browsers which support it, and JPEG or PNG for older browsers. This sounds tough, but trust me, it isn't.</p>\n<p>The only hard part is generating all these images</p>\n<h2 id=\"Responsive-images\"><a class=\"heading-link\" href=\"#Responsive-images\">#</a>Responsive images</h2>\n<p>This sounds like setting <code>width: 100%</code> on your images, but trust me, its much more cooler.</p>\n<p>So, food for thought. Say you are visiting a website on desktop. If the image you are looking at looks fine (that is, not broken or pixelated), it is probably quite wide, like maybe <code>1200px</code> wide (If it's a full width image). And that's fine. That's a good size for desktops.</p>\n<p>But then you visit it on mobile. The image still looks high quality, cuz its still the same <code>1200px</code> wide image, and your viewport is like <code>500px</code> wide. But just think, how much better it would have been if that image was close to your viewport's size, say <code>600px</code>. That image would be half the file size (Like <mark>60kb</mark> instead of <mark>120kb</mark>). That would have been some massive savings. And there wouldn't be any quality loss, cuz you can't look at much detail on a small screen, so its a total win-win!</p>\n<p>So that's what I did. The pipeline would generate 2 images, one <code>large.jpg</code> of width <code>1200px</code>, and a <code>small.jpg</code> of width <code>600px</code> for smaller screens. And then my algorithm will convert those 2 into their <code>webp</code> counter-parts <code>large.webp</code> and <code>small.webp</code>, which would be much smaller in size.</p>\n<p>So finally, I would end up with 4 images. And don't worry, getting the browsers to choose between one of them is quite simple. Just read on!</p>\n<p>PS: Here's a very good article about <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\" target=\"_blank\" rel=\"noopener\">responsive images</a>.</p>\n<h2 id=\"Lazy-loading\"><a class=\"heading-link\" href=\"#Lazy-loading\">#</a>Lazy-loading</h2>\n<p>This term is all the rage nowadays. Lazy loading is a technique, in which you load images only when you need them. Think about your twitter or instagram feed. Those images load only when you scroll down to them.</p>\n<p>This doesn't only make browser's native loading spinner stop earlier, it can also save the user's data. If a user doesn't read through to the end, they don't need to load all the images, hence saving some bandwidth, and will also remove the jank by not trying to load all the images at once.</p>\n<h2 id=\"Graceful\"><a class=\"heading-link\" href=\"#Graceful\">#</a>Graceful</h2>\n<p>All the above hi-fi techniques are good, but if they lead to worse user experience, the whole purpose is defeated.</p>\n<p>What I do <strong>not</strong> consider graceful is an image popping out of nowhere and pushing all the content around. That's just plain bad, removes the user's focus from what they were reading, and just frustates them.</p>\n<p>A graceful image showing technique is to show a placeholder the size of the image, resulting in no pushing of content. The placeholder can be anything, but I decided on using the dominant color of the image as the background of the placeholder. And lastly, toss in some fade-in animation, to smoothen the overall experience.</p>\n<p>To get a feeling, reload the page and just look at the image on top. It fades-in gracefully rather than pop-in out of nowhere, doesn't push the content around, and looks smooth overall.</p>\n<blockquote>\n<p>It's a graceful image!</p>\n</blockquote>\n<h1 id=\"Process\"><a class=\"heading-link\" href=\"#Process\">#</a>Process</h1>\n<p>This part will be quite short, cuz I won't be going into code a lot. Rather I'll simply explain <strong>how</strong> I made the processes and their gotchas You can always check out the code at my <a href=\"https://github.com/puruvj/\" target=\"_blank\" rel=\"noopener\">Github Repo</a>. <a href=\"https://github.com/PuruVJ/puruvjdev/blob/main/scripts/optimize-images.js\" target=\"_blank\" rel=\"noopener\">The exact code for image processing is in this file</a>.</p>\n<blockquote>\n<p>Beware though! The code is messy and may result in brain damage for a whole day!! Read at your own risk.</p>\n</blockquote>\n<h2 id=\"Get-the-image-referenced-in-the-markdown\"><a class=\"heading-link\" href=\"#Get-the-image-referenced-in-the-markdown\">#</a>Get the image referenced in the markdown</h2>\n<p>This one is quite easy. <code>markdown-it</code>(The tool I use for rendering markdown to html. Check out my <a href=\"https://puruvjdev.now.sh/blog/how-i-created-personal-site-part-2\" target=\"_blank\" rel=\"noopener\">previous post</a> for more) has hooks which give you the <code>src</code> for an image.</p>\n<h2 id=\"Check-whether-this-image-has-already-been-processed\"><a class=\"heading-link\" href=\"#Check-whether-this-image-has-already-been-processed\">#</a>Check whether this image has already been processed</h2>\n<p>This step is necessary for incremental builds. Image processing is a very CPU-intensive and time-taking task. In the beginning, the build times won't be more than a few seconds, but after a year of writing, I would have to wait 10 minutes for the blog to build! That's quite a drag.</p>\n<p>That's why it doesn't make sense to process every single image every time. Just process the new ones and leave the old ones as they were.</p>\n<p>But how do I check if the image has already been built? Do I store references in database? In a JSON file?</p>\n<p>Not really, the solution is quite simple. If my image is, say <code>check-mate.jpg</code>, I check if the folder <code>check-mate</code> exists or not. Why a folder? Cuz when I process <code>check-mate.jpg</code>, I will create 4 versions of it:</p>\n<ul>\n<li>large.jpg</li>\n<li>large.webp</li>\n<li>small.jpg</li>\n<li>small.webp</li>\n</ul>\n<p>and store them in <code>check-mate</code> folder. This makes things very easy for me. I don't have to maintain any database of all the images and their states. Also, if I update any photo, all I have to do is to just delete the folder corresponding to its name, and it will be rebuilt. Easy Peasy!</p>\n<p>If the folder exists, I simply return the required data fore-hand and return early</p>\n<h2 id=\"Generating-images-of-different-sizes\"><a class=\"heading-link\" href=\"#Generating-images-of-different-sizes\">#</a>Generating images of different sizes</h2>\n<p>It doesn't make any sense to serve a <code>2000px</code> wide image to screens of all sizes, so I generate 2 sizes:</p>\n<ul>\n<li><code>1000px</code> for desktops and tablets</li>\n<li><code>600px</code> for mobiles</li>\n</ul>\n<p>I use 2 packages for this:</p>\n<ul>\n<li>\n<p><a href=\"https://www.npmjs.com/package/image-size\" target=\"_blank\" rel=\"noopener\">image-size</a> to get the aspect ratio of the image. <code>resize-img</code> requires absolute height and width, so the height has to be calculated based on the width and the aspect ratio.</p>\n</li>\n<li>\n<p><a href=\"https://www.npmjs.com/package/resize-img\" target=\"_blank\" rel=\"noopener\">resize-image</a> for actually resizing the image.</p>\n</li>\n</ul>\n<p>And the images resized by <code>resize-img</code> are saved as <code>large.jpg</code> and <code>small.jpg</code> in the folder(<code>check-mate</code> in the above example).</p>\n<p>These images are only resized, not optimized. The next step is the interesting part.</p>\n<h2 id=\"Converting-to-webp\"><a class=\"heading-link\" href=\"#Converting-to-webp\">#</a>Converting to webp</h2>\n<p>Before optimizing the JPEGs themselves, first we'll make their webp counterparts.</p>\n<p>For optimizing, I use the amazing <code>imagemin</code> package from NPM. It's the most versatile image optimization package I have ever seen, because of its vast plugin ecosystem. Whatever algorithm you want to use for image optimization, there is a plugin for that, whether it be <code>optiPNG</code> or <code>oxiPNG</code>.</p>\n<p>For converting to <code>webp</code>, the plugin required is <a href=\"https://www.npmjs.com/package/imagemin-webp\" target=\"_blank\" rel=\"noopener\">imagemin-webp</a>.</p>\n<p>The code to convert to webp is quite simple:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> imagemin </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">imagemin</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> webp </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">imagemin-webp</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> imagemin</span><span style=\"color:#BABED8\">([</span><span style=\"color:#89DDFF\">`${</span><span style=\"color:#BABED8\">folderPath</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">/*.jpg</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  destination</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> folderPath</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  plugins</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">    webp</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">      quality</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 85</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>imagemin</code> here takes in <code>${folderPath}/*.jpg</code>, which is just telling it to take all the JPEG files in the given folder, applies the <code>mozjpeg</code> compression with <code>quality</code> set to <code>85</code>, and\nchurns out <code>large.webp</code> and <code>small.webp</code>, 2 super compressed images.</p>\n<h2 id=\"Optimizing-the-JPEGs\"><a class=\"heading-link\" href=\"#Optimizing-the-JPEGs\">#</a>Optimizing the JPEGs</h2>\n<p><code>large.jpg</code> and <code>small.jpg</code> have been created, but these are far from optimized. These might still be in Megabytes, so optimzations are required.</p>\n<p>For this blog, all I need is the <code>mozJPEG</code> algorithm for my JPEG files. Plus mozJPEG churns out <code>Progressive JPEGs</code>, which is even better. For those who don't know what Progressive JPEGs(<code>pjpeg</code> for short) means, these are the kind of the images which load a blurry version of it at first, then fills in the details, rather than load from top to bottom. These are much compact, and don't need to be loaded 100% to convey the information. 30% loaded is enough.</p>\n<p>The basic code for that is:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> imagemin </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">imagemin</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> mozjpeg </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#C3E88D\">imagemin-mozjpeg</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">await</span><span style=\"color:#82AAFF\"> imagemin</span><span style=\"color:#BABED8\">([</span><span style=\"color:#89DDFF\">`${</span><span style=\"color:#BABED8\">folderPath</span><span style=\"color:#89DDFF\">}</span><span style=\"color:#C3E88D\">/*.jpg</span><span style=\"color:#89DDFF\">`</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  destination</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> folderPath</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  plugins</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BABED8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">    mozjpeg</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">      quality</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 85</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  ]</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will replace the <code>large.jpg</code> and <code>small.jpg</code> inside with the newly optimized images.</p>\n<p><mark>Note</mark>: The statement to convert to <code>webp</code> should come before optimizing the <code>jpeg</code>s themselves, or the quality of <code>webp</code> images will be quite aweful.</p>\n<h2 id=\"Metadata\"><a class=\"heading-link\" href=\"#Metadata\">#</a>Metadata</h2>\n<p>Now these images are optimized and prepared, let's extract some metadata. The metadata here includes:</p>\n<ul>\n<li><strong>Aspect</strong> ratio: For a little CSS hack to ensure images don't push down content.</li>\n<li><strong>Dominant Color</strong>: The dominant color extracted from the image for the placeholder.</li>\n</ul>\n<p><strong>Aspect Ratio calculation</strong> is quite easy. We already did that above using the <code>image-size</code> package.</p>\n<p><strong>For getting the dominant color</strong>, I use <a href=\"https://www.npmjs.com/package/color-thief-node\" target=\"_blank\" rel=\"noopener\">color-thief-node</a>. The API is dead simple and promise-based.</p>\n<p>I store these values in a <code>data.json</code> file in the corresponding folder(<code>check-mate</code>, in the example).</p>\n<p>Here's an example of how it looks:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">aspectHTW</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 0.75</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">color</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#F78C6C\">46</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 35</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#F78C6C\"> 39</span><span style=\"color:#89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>aspectHTW</code> is value of <code>Height / Width</code> of the image</p>\n<p><code>color</code> is an Array corresponding to <code>[r, g, b]</code>.</p>\n<p>You could calculate these everytime, but that would defeat the purpose of incremental builds, eh<img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f609.svg\">?</p>\n<h2 id=\"Returning-the-markup\"><a class=\"heading-link\" href=\"#Returning-the-markup\">#</a>Returning the markup</h2>\n<p>Now after all that complex algorithm work is over, let's just return the markup.</p>\n<p>The markup returned is this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">figure</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  style</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">width: 100%;padding-top: ${</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">    list.aspectHTW * 100</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">  }%;background-color: rgb(${r}, ${g}, ${b})</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;</span><span style=\"color:#F07178\">picture</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">source</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      type</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">image/webp</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      media</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">(min-width: 501px)</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      data-srcset</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">${list.large.webp}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &gt;&lt;/</span><span style=\"color:#F07178\">source</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">source</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      type</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">image/webp</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      media</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">(max-width: 500px)</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      data-srcset</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">${list.small.webp}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &gt;&lt;/</span><span style=\"color:#F07178\">source</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">source</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      type</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">image/jpg</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      media</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">(min-width: 501px)</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      data-srcset</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">${list.large.jpg}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &gt;&lt;/</span><span style=\"color:#F07178\">source</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">source</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      type</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">image/jpg</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      media</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">(max-width: 500px)</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      data-srcset</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">${list.small.jpg}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &gt;&lt;/</span><span style=\"color:#F07178\">source</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    &lt;</span><span style=\"color:#F07178\">img</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      alt</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">Placeholder</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      data-src</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">${list.large.jpg}</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">      class</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">lazyload blog-img</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  &lt;/</span><span style=\"color:#F07178\">picture</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">figure</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>list</code> is where I store the references and metadata of the images. Nothing much there.</p>\n<p>The markup is quite a handful, so lemme break it down:</p>\n<p>In the <code>figure</code> tag, I'm using a little trick too maintain aspect ratio. It requires setting <code>padding-top</code> or <code>padding-bottom</code> to the percantage required.</p>\n<p>For example, to maintain a <code>16:9</code> ratio box, you would set <code>padding-top</code> to <code>56.25%</code>. <code>56.25</code> is simply <code>9 / 16 * 100</code>. Height divide by width. That's what I'm doing here. <code>aspectHTW * 100</code> suffixed with <code>%</code> is the trick here.</p>\n<p>The <code>background-color: rgb(${r}, ${g}, ${b})</code> is setting color for the placeholder.</p>\n<p>The <code>picture</code> and the <code>source</code> tags are just providing the browser choices to decide the best image and load that one. For browsers that support <code>webp</code>, the <code>webp</code> will be loaded, otherwise the <code>jpg</code> will load.</p>\n<p>And if the browser doesn't support the <code>picture</code> tag altogether, the image referenced in <code>img</code> tag will be loaded as the last resort.</p>\n<h2 id=\"Lazyloading\"><a class=\"heading-link\" href=\"#Lazyloading\">#</a>Lazyloading</h2>\n<p>Finally, you'll notice that instead of <code>src</code> or <code>srcset</code>, there are <code>data-src</code> and <code>data-srcset</code> attributes. These attributes alone will do nothing. The image won't be loaded just from them.</p>\n<p>These are for lazyloading. When you scroll down to the image, these <code>data-srcset</code> and <code>data-src</code> attributes are replaced with <code>srcset</code> and <code>src</code>, triggering in the loading of the image.</p>\n<p>The library I use for lazyloading images is <a href=\"https://www.npmjs.com/package/lazysizes\" target=\"_blank\" rel=\"noopener\">lazysizes</a>. You're missing out if you haven't heard of it. Check it out!</p>\n<p>These are all the key parts of this crazy algorithm. I use some other hacks to get into the final markup, but that is for another day.</p>\n<p class=\"series-links\"></p><blockquote>\n      <p>How I created my personal site series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-1\">Part 1 - Tech Stack &amp; Design</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-2\">Part 2 - Blogging with Markdown</a><br><a> Part 3 - Image Optimization Automation with Incremental builds (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br>\n      </p>\n    </blockquote><p></p>\n",
    "id": "how-i-created-personal-site-part-3",
    "reading_time": 7.64,
    "toc": [
      {
        "indent": 1,
        "id": "Why-do-it-myself",
        "title": "Why do it myself?",
        "length": 17
      },
      {
        "indent": 0,
        "id": "Expectations",
        "title": "Expectations",
        "length": 12
      },
      {
        "indent": 1,
        "id": "Next-gen-formats",
        "title": "Next gen formats",
        "length": 16
      },
      {
        "indent": 1,
        "id": "Responsive-images",
        "title": "Responsive images",
        "length": 17
      },
      {
        "indent": 1,
        "id": "Lazy-loading",
        "title": "Lazy-loading",
        "length": 12
      },
      {
        "indent": 1,
        "id": "Graceful",
        "title": "Graceful",
        "length": 8
      },
      {
        "indent": 0,
        "id": "Process",
        "title": "Process",
        "length": 7
      },
      {
        "indent": 1,
        "id": "Get-the-image-referenced-in-the-markdown",
        "title": "Get the image referenced in the markdown",
        "length": 40
      },
      {
        "indent": 1,
        "id": "Check-whether-this-image-has-already-been-processed",
        "title": "Check whether this image has already been processed",
        "length": 51
      },
      {
        "indent": 1,
        "id": "Generating-images-of-different-sizes",
        "title": "Generating images of different sizes",
        "length": 36
      },
      {
        "indent": 1,
        "id": "Converting-to-webp",
        "title": "Converting to webp",
        "length": 18
      },
      {
        "indent": 1,
        "id": "Optimizing-the-JPEGs",
        "title": "Optimizing the JPEGs",
        "length": 20
      },
      {
        "indent": 1,
        "id": "Metadata",
        "title": "Metadata",
        "length": 8
      },
      {
        "indent": 1,
        "id": "Returning-the-markup",
        "title": "Returning the markup",
        "length": 20
      },
      {
        "indent": 1,
        "id": "Lazyloading",
        "title": "Lazyloading",
        "length": 11
      }
    ],
    "series": "How I created my personal site",
    "seriesIndex": 3
  },
  "how-i-created-personal-site-part-2": {
    "cover_image": "media/writing-pen-paper.jpg",
    "title": "Blogging with Markdown",
    "date": "2020-06-28T04:20:00.000Z",
    "description": "In this post, I delve into the details of how I built the blogging with markdown system",
    "body": "<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/writing-pen-paper/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/writing-pen-paper/small.jpg\">\n      <img alt=\"\" data-src=\"../media/writing-pen-paper/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p class=\"series-links\"></p><blockquote>\n      <p>How I created my personal site series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-1\">Part 1 - Tech Stack &amp; Design</a><br><a> Part 2 - Blogging with Markdown (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-3\">Part 3 - Image Optimization Automation with Incremental builds</a><br>\n      </p>\n    </blockquote><p></p>\n<p>Hi! In this 2<sup>nd</sup> part of the series, I will expose the secret ingredient of what makes this blog work.</p>\n<h1 id=\"Problem\"><a class=\"heading-link\" href=\"#Problem\">#</a>Problem</h1>\n<p>The problem was figuring out how to write the blog. Do I create a Rich-text Editor for myself first, and then copy-paste the generated HTML into every html page manually? No! Definitely No!</p>\n<p>This left me with only one other way. <mark>Markdown</mark>.</p>\n<p>This seemed the perfect way. Write stuff in markdown, process it and convert it into html and just fetch that html when called for in the blog page.</p>\n<p>But how do I store the metadata like title, date published, description or the cover image for social media?</p>\n<p>After some researching, I reached the complete answer.</p>\n<h1 id=\"Solution\"><a class=\"heading-link\" href=\"#Solution\">#</a>Solution</h1>\n<p>Final solution was: Write content in markdown files, and store the metadata in those files only. Then extract all the relevant part, render to html the main content, and store the final data in a JSON files.</p>\n<p>Whoa Whoa. Wait up! That was quite fast. Lemme break it down.</p>\n<p>A typical markdown file would look like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">## </span><span style=\"color:#FFCB6B\">Hello</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\"># </span><span style=\"color:#FFCB6B\">Heading one</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">I have no idea what </span><span style=\"color:#89DDFF;font-weight:bold\">**</span><span style=\"color:#89DDFF;font-style:italic;font-weight:bold\">_</span><span style=\"color:#F07178;font-style:italic;font-weight:bold\">I am doing here</span><span style=\"color:#89DDFF;font-style:italic;font-weight:bold\">_</span><span style=\"color:#89DDFF;font-weight:bold\">**</span><span style=\"color:#BABED8\">.</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">What are any of us doing here anyway <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\">?</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now we'll adding metadata as <strong>Frontmatter</strong>. Frontmatter is a metadata storing approach Jekyll came up with. Here you store all your metadata on the top of the file. Like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">---</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">title: \"The title\"</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">description: \"the description\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">---</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So our markdown file becomes:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">---</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">title: \"The title\"</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">description: \"the description\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">---</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">## </span><span style=\"color:#FFCB6B\">Hello</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\"># </span><span style=\"color:#FFCB6B\">Heading one</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">I have no idea what </span><span style=\"color:#89DDFF;font-weight:bold\">**</span><span style=\"color:#89DDFF;font-style:italic;font-weight:bold\">_</span><span style=\"color:#F07178;font-style:italic;font-weight:bold\">I am doing here</span><span style=\"color:#89DDFF;font-style:italic;font-weight:bold\">_</span><span style=\"color:#89DDFF;font-weight:bold\">**</span><span style=\"color:#BABED8\">.</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">What are any of us doing here anyway <img class=\"emoji\" draggable=\"false\" alt=\"🤔\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f914.svg\">?</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Looks nice. But how do we process this data(aka convert it to html and store the metadata away)</p>\n<h1 id=\"Processing-the-data\"><a class=\"heading-link\" href=\"#Processing-the-data\">#</a>Processing the data</h1>\n<p>So let's assume we have written a full fledged blog post with all the metadata on top. How do we get it from <code>markdown</code> to a visual blog page viewable in a browser?</p>\n<p>For that we're going to use 2 NPM Packages.</p>\n<ul>\n<li>\n<p><a href=\"https://www.npmjs.com/package/front-matter\" target=\"_blank\" rel=\"noopener\">front-matter</a> for gathering the metadata.</p>\n</li>\n<li>\n<p><a href=\"https://www.npmjs.com/package/markdown-it\" target=\"_blank\" rel=\"noopener\">markdown-it</a> for rendering markdown content into html.</p>\n</li>\n</ul>\n<h2 id=\"front-matter\"><a class=\"heading-link\" href=\"#front-matter\">#</a>front-matter</h2>\n<p><code>front-matter</code> takes in markdown content, tears it apart, and return an object:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  attributes</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  body</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#C3E88D\">...</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>attributes</code> is a key-value pair of all metadata keys to their values.</p>\n<p><code>body</code> is the main content you wrote in your markdown, just below the metadata. Note that <code>body</code> isn't rendered to html yet. We still need to do that</p>\n<p>For example:</p>\n<p>Markdown code:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">---</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">title: Krrish</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">description: Krishna Mehra leaves on a journey to find his father.</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">year_released: 2006</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">---</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">Krrish is a very captivating </span><span style=\"color:#89DDFF;font-weight:bold\">**</span><span style=\"color:#F07178;font-weight:bold\">superhero</span><span style=\"color:#89DDFF;font-weight:bold\">**</span><span style=\"color:#BABED8\">.</span></span>\n<span class=\"line\"></span></code></pre>\n<p>will become</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  attributes</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">    title</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Krrish</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">    description</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Krishna Mehra leaves on a journey to find his father.</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">    year_released</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 2006</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#FFCB6B\">  body</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> '</span><span style=\"color:#C3E88D\">Krrish is a very captivating **superhero**.</span><span style=\"color:#89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Notice how all the metadata got beautifully condensed into an object, which we can use in any way.</p>\n<p>And the <code>body</code> is the part below the front matter, just completely unchanged.</p>\n<h2 id=\"markdown-it\"><a class=\"heading-link\" href=\"#markdown-it\">#</a>markdown-it</h2>\n<p>Now we can use markdown-it to render the <code>markdown</code> in <code>body</code> to html.</p>\n<p>The basic code is this simple:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> md </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">markdown-it</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> result </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> md</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">render</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\"># This is a heading</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now we have the rendered html and metadata, we caan simply store these in a JSON file, like this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">title</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">Krrish</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">description</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">Krishna Mehra leaves on a journey to find his father.</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">year_released</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#F78C6C\"> 2006</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  \"</span><span style=\"color:#C792EA\">body</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">&lt;p&gt;Krrish is a very captivating &lt;b&gt;superhero&lt;/b&gt;.&lt;/p&gt;</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then in our main Stencil component, we can simply fetch this JSON file, and show its content. Easy Peasy.</p>\n<p>BUT WAIT!!!</p>\n<h1 id=\"It-gets-messy\"><a class=\"heading-link\" href=\"#It-gets-messy\">#</a>It gets messy</h1>\n<p>Everything is going very smoothly. But we have forgotten one very important thing: <mark>Code Syntax Highlighting!</mark></p>\n<p>There's no developer blog without some cool code syntax highlighting to show off their coding skills. So we need a way to have code syntax highlighting in our blog.</p>\n<p>These will come in mind for most people:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/prismjs\" target=\"_blank\" rel=\"noopener\">prismjs</a></li>\n<li><a href=\"https://www.npmjs.com/package/highlight.js\" target=\"_blank\" rel=\"noopener\">highlight.js</a></li>\n</ul>\n<p>These are good libraries. No doubt. They both integrate with <code>markdown-it</code> to generate highlighted code at build time only. They just lack one thing: VS Code level consistency.</p>\n<p>They both can't highlight code the way VS Code does. If you use VS Code, you know what I'm talking about. Nothing beats VS Code at syntax highlighting. What if there was a way to use VS Code for syntax highlighting ...</p>\n<p>Aha! There is a way. Lemme introduce you to the amazing and very underrated, <a href=\"https://github.com/octref/shiki\" target=\"_blank\" rel=\"noopener\">ShikiJS</a>.</p>\n<p>Take my word, this is the best syntax highlighter there could be. It's syntax highlighting works the same way VS Code's themes work: JSON Config files. Shiki has some beautiful pre-built themes, but if you want your favorite theme, it can do that too. Just pass it the config JSON file of that theme, and you're all set.</p>\n<p>The basic code for integrating <code>shiki</code> with <code>markdown-it</code> is this:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> fs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">fs</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> markdown </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">markdown-it</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> shiki </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#82AAFF\"> require</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">shiki</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">shiki</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">getHighlighter</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    theme</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">nord</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  .</span><span style=\"color:#82AAFF\">then</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">highlighter</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> md</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#82AAFF\"> markdown</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">      html</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> true</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">      highlight</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">code</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> lang</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">        return</span><span style=\"color:#BABED8\"> highlighter</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">codeToHtml</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">code</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> lang</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      },</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    }</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> html</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> md</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">render</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">readFileSync</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">index.md</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">utf-8</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#F07178\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">    const</span><span style=\"color:#BABED8\"> out</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> `</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">    &lt;title&gt;Shiki&lt;/title&gt;</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    ${</span><span style=\"color:#BABED8\">html</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C3E88D\">    &lt;script src=\"index.js\"&gt;&lt;/script&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  `</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    fs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">writeFileSync</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">index.html</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> out</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BABED8\">    console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">done</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I copied the above code from the <a href=\"https://shiki.matsu.io/\" target=\"_blank\" rel=\"noopener\">main website</a>, but you can always check it out at my <a href=\"https://github.com/puruvj/puruvjdev\" target=\"_blank\" rel=\"noopener\">Github repo</a>.</p>\n<h1 id=\"Structure\"><a class=\"heading-link\" href=\"#Structure\">#</a>Structure</h1>\n<p>All the mechanics aside, we haven't talked about how I actually structure my blog posts. Here's a simple skeleton structure of the metadata:</p>\n<ul>\n<li><strong>title</strong>: The title of the blog post (Duh! <img class=\"emoji\" draggable=\"false\" alt=\"🙄\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f644.svg\">)</li>\n<li><strong>description</strong>: The description of the blog post. This shows up on the blogs overview page as a simple description and in <code>&lt;meta name=\"description\"&gt;</code> too, for social media sharing</li>\n<li><strong>date</strong>: The date when the post was written. I put it in manually when I start writing.</li>\n<li><strong>cover_image</strong>: This isn't the cover image that you looked at, at the top of this very blog post. That's a manual image. It is used for social media cards.</li>\n<li><strong>published</strong>: If I do some horrible, horrible mistake in my feed and have already published it(aka pushed it to Vercel), I can just set this property as <code>false</code>, and it will be removed until I set it to <code>true</code> (Or remove it. Works as <code>true</code> only)</li>\n</ul>\n<p>There is some more dark magic I apply to this blog, but I will get to that in the next post.</p>\n<p class=\"series-links\"></p><blockquote>\n      <p>How I created my personal site series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-1\">Part 1 - Tech Stack &amp; Design</a><br><a> Part 2 - Blogging with Markdown (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-3\">Part 3 - Image Optimization Automation with Incremental builds</a><br>\n      </p>\n    </blockquote><p></p>\n",
    "id": "how-i-created-personal-site-part-2",
    "reading_time": 4.2425,
    "toc": [
      {
        "indent": 0,
        "id": "Problem",
        "title": "Problem",
        "length": 7
      },
      {
        "indent": 0,
        "id": "Solution",
        "title": "Solution",
        "length": 8
      },
      {
        "indent": 0,
        "id": "Processing-the-data",
        "title": "Processing the data",
        "length": 19
      },
      {
        "indent": 1,
        "id": "front-matter",
        "title": "front-matter",
        "length": 12
      },
      {
        "indent": 1,
        "id": "markdown-it",
        "title": "markdown-it",
        "length": 11
      },
      {
        "indent": 0,
        "id": "It-gets-messy",
        "title": "It gets messy",
        "length": 13
      },
      {
        "indent": 0,
        "id": "Structure",
        "title": "Structure",
        "length": 9
      }
    ],
    "series": "How I created my personal site",
    "seriesIndex": 2
  },
  "how-i-created-personal-site-part-1": {
    "cover_image": "media/brick-wall.jpg",
    "title": "Tech Stack & Design",
    "date": "2020-06-27T04:20:00.000Z",
    "description": "In this post, I delve into the details of the design part of how I built my personal site with StencilJS and what did I use to do so.",
    "body": "<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 75%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/brick-wall/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/brick-wall/small.jpg\">\n      <img alt=\"\" data-src=\"../media/brick-wall/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p class=\"series-links\"></p><blockquote>\n      <p>How I created my personal site series:</p>\n      <p>\n        <a> Part 1 - Tech Stack &amp; Design (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-2\">Part 2 - Blogging with Markdown</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-3\">Part 3 - Image Optimization Automation with Incremental builds</a><br>\n      </p>\n    </blockquote><p></p>\n<p>Hi! In this blog post, I delve deep into the design part of how I created my personal website. I won't be going into the code. Feel free to look into my <a href=\"https://github.com/puruvj/puruvjdev\" target=\"_blank\" rel=\"noopener\">Github Repo</a> for the the code.</p>\n<h1 id=\"Why\"><a class=\"heading-link\" href=\"#Why\">#</a>Why</h1>\n<p>Why the need for a personal website? Well, why not?</p>\n<p>Having a personal site with a blog can take you very far as developer. Not only does your online presence increases, but writing a blog regularly can increase your mind's clarity as a developer in the long run.</p>\n<p>Plus it allows you to show off your programming and design skills! What better excuse than that?</p>\n<h1 id=\"Requirements\"><a class=\"heading-link\" href=\"#Requirements\">#</a>Requirements</h1>\n<h2 id=\"Looks-good.\"><a class=\"heading-link\" href=\"#Looks-good.\">#</a>Looks good.</h2>\n<p>This one is a no-brainer. If you have an ugly blog, you yourself wouldn't wan't to look at it.</p>\n<p>But this is not it.</p>\n<p>Looking good means that it should be aesthetically pleasing too. To make something aesthetically pleasing doesn't just require a good eye, it also calls for some knowledge of proportions.</p>\n<p>It should be minimalistic.</p>\n<p>And most of all, it must a conscious design. I will later elaborate what I mean by this.</p>\n<h2 id=\"Blazing-Fast\"><a class=\"heading-link\" href=\"#Blazing-Fast\">#</a>Blazing Fast</h2>\n<blockquote>\n<p>A fast site is a good site. A slow site is no site.</p>\n<p>~ Me <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\"></p>\n</blockquote>\n<p>No, literally. No one's gonna wait 2 minutes for your blog post to show up. They'll <s>definitely</s> probably leave your site. Plus you'll be doing your users with expensive data plans a big favour (Can tell from experience).</p>\n<p>Everyone loves a site that loads instantly.</p>\n<h2 id=\"Prerendered\"><a class=\"heading-link\" href=\"#Prerendered\">#</a>Prerendered</h2>\n<p>For the posts to show up as social media cards and be fast, they need to be prerendered, meaning that each route must be already rendered at build time and converted into a index.html file</p>\n<h2 id=\"PWA\"><a class=\"heading-link\" href=\"#PWA\">#</a>PWA</h2>\n<p>The site should be PWA aka <a href=\"https://web.dev/what-are-pwas/\" target=\"_blank\" rel=\"noopener\">Progressive Web App</a>. If you aren't familiar with these, in simple words, a PWA means just a web app that is enhanced and can be added to home screen and it will behave just like a native app.</p>\n<p>A personal site doesn't really needs to be installable to home screen, but those who really likes reading your blog will probably want to add your blog to their home screen.</p>\n<h1 id=\"Tech-Stack\"><a class=\"heading-link\" href=\"#Tech-Stack\">#</a>Tech Stack</h1>\n<p>So the stack I decided to use for this site is:</p>\n<ul>\n<li><a href=\"https://stenciljs.com\" target=\"_blank\" rel=\"noopener\">StencilJS</a> as the framework</li>\n<li><a href=\"https://vercel.com\" target=\"_blank\" rel=\"noopener\">Vercel(formerly Zeit)</a> for the hosting</li>\n<li><a href=\"https://github.com/octref/shiki\" target=\"_blank\" rel=\"noopener\">ShikiJS</a> for code syntax highlighting at build-time.</li>\n<li>No design library! I designed everything from scratch. No bootstrap, no Materialize, nothing, nada!</li>\n</ul>\n<blockquote>\n<p>NOTE!!: I've moved my blog over from StencilJS to Svelte. This isn't to say StencilJS is a wrong choice to build blogs or apps. It's just I had too much free time on my hand <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\"></p>\n</blockquote>\n<h2 id=\"Why-not-GatsbyNext-with-React\"><a class=\"heading-link\" href=\"#Why-not-GatsbyNext-with-React\">#</a>Why not Gatsby/Next with React</h2>\n<p>Right now (at the time of writing, in 2020), <a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener\">Gatsby</a> and <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener\">NextJS</a> are the hottest meta-frameworks for building fast and prerendered sites, especially blogs. One of my most favourite personal website is <a href=\"https://joshwcomeau.com/\" target=\"_blank\" rel=\"noopener\">joshwcomeau.com</a> by <a href=\"https://twitter.com/JoshWComeau\" target=\"_blank\" rel=\"noopener\">Josh Comeau</a>, and it is built with Gatsby. Next is just as performant. Plus there's the benefit that it's React.</p>\n<p>There also Static Site Generators like <a href=\"https://www.11ty.dev/\" target=\"_blank\" rel=\"noopener\">11ty</a>, <a href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener\">Hugo</a> and <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">Jekyll</a>, which produce a completely static site. These produce sites even faster than Gatsby and Next.</p>\n<p>Then why not any of these? Why Stencil?</p>\n<p><strong>First</strong>, Stencil is like a first language to me, in terms of framework experience. It's very well written and very similar to both Angular and React, the only difference being it's 100% Vanilla JS. Simple and standard <code>fetch</code> for me(which I totally love) instead of a bloated <code>HttpService</code> or <code>Axios</code>.</p>\n<p><strong>Secondly</strong>, It is very damn performant and tiny. The Stencil <strong>Hello World</strong> app is just <mark>87 bytes</mark>. Not 87 kilobites, 87 <mark>bytes</mark>. Yes that's how small it is. And it uses Preact's virtual DOM, meaning its runtime performance is just top-notch. Next and Gatsby, pull in React in the end, which is <mark>200+kb</mark>. That's just too much for a simple blog.</p>\n<p><strong>Thirdly</strong>, Prerendering. Stencil <code>v1.13</code> came with the robust feature of Static Site Generation. Meaning all the routes will be prerendered at build-time and converted to plain HTML, making the site blazing fast, cuz the content can be shown even without any JS loading. I don't opt-in for 100% Static though.</p>\n<p><strong>Fourthly(If that's a word :thinking: )</strong>, I still need interactivity and image lazyloading on the site, so disabling JS all-together is not an option. That's why Hugo or 11ty or Jekyll are out of question.</p>\n<h1 id=\"Design-Choices\"><a class=\"heading-link\" href=\"#Design-Choices\">#</a>Design Choices</h1>\n<h2 id=\"Color-Palette\"><a class=\"heading-link\" href=\"#Color-Palette\">#</a>Color Palette</h2>\n<p>There is a running joke in our industry that it takes 1 day to design the layout of site, but a whole week to just get the color palette right.</p>\n<p>It's a little exaggerated, but kinda true. Choosing a color palette is quite difficult, for most designers.</p>\n<p>So after 3 hours, I found a perfect color palette. Mostly white background(Duh! <img class=\"emoji\" draggable=\"false\" alt=\"🙄\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f644.svg\">) with the primary color <mark>#6002ee</mark>. This for <strong>light mode</strong>.</p>\n<p>For <strong>dark mode</strong>, the background is <strong>#222428</strong>(which is also the text color in light mode) and <mark>#714cfe</mark>.</p>\n<p>A secondary color wasn't required, as my site is quite minimalistic.</p>\n<h2 id=\"Fonts\"><a class=\"heading-link\" href=\"#Fonts\">#</a>Fonts</h2>\n<p>Remember that joke about color palette I just mentioned? Well it applies to selecting fonts too. So after 1 more hour <img class=\"emoji\" draggable=\"false\" alt=\"😅\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f605.svg\">, I found the best fonts(Note that I changed one font after I had launched the site).</p>\n<ul>\n<li><strong>Comfortaa</strong> for headings</li>\n<li><strong>Quicksand</strong> for blog body</li>\n<li><strong>JetBrains Mono</strong> for code snippets, blockquote, and navbar (It's also my IDE's font)</li>\n</ul>\n<p>These are all available on Google Fonts. I have an article about <a href=\"/blog/google-fonts-prefetch\" target=\"_blank\" rel=\"noopener\">performantly loading Google Fonts respecting user's data saver settings</a> too. Check it out.</p>\n<h1 id=\"Finally-designing-site\"><a class=\"heading-link\" href=\"#Finally-designing-site\">#</a>Finally designing site</h1>\n<p>Writing about how to design a website is like writing about how to create a painting. It's too abstract and subjective. You have to get your hands dirty. No other way to get better at designing.</p>\n<p>But I can drop in a few things that I did.</p>\n<h2 id=\"Keep-it-minimalistic\"><a class=\"heading-link\" href=\"#Keep-it-minimalistic\">#</a>Keep it minimalistic</h2>\n<p>A minimalistic design can do wonder for your design. When done right, it looks really great. It sets your brand apart by focusing on the important areas more. Not only that, a minimalist design puts the user in control. If they can easily scan a website, they won't be scared by it, meaning that they will come back. What more can you want.</p>\n<p>Check out this great article about minimalistic design:\n<a href=\"https://thenextweb.com/dd/2015/06/09/7-pillars-of-minimalist-web-design/\" target=\"_blank\" rel=\"noopener\">7 pillars of minimalist Web design</a></p>\n<h2 id=\"Use-the-golden-ratio\"><a class=\"heading-link\" href=\"#Use-the-golden-ratio\">#</a>Use the golden ratio</h2>\n<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.41666666666667%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/golden-spiral/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/golden-spiral/small.jpg\">\n      <img alt=\"\" data-src=\"../media/golden-spiral/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>This one sounds the weirdest of all. What the hell is Golden Ratio? It's a lot of things in nature and is responsible for a lot of artichectural choices. But for a designer, it means that your site will look aesthetically pleasing. Why?</p>\n<p>Golden Ratio is a number: <code>1.618</code>. Why is this number important? It is found throughout the nature and day-to-day life. Our eyes find things following this number aesthetically pleasing. Our bodies' own geometry is built heavily on it. Our screens and TVs even follow it very closely. <code>16:9</code> and <code>16:10</code> screens are a very good example.</p>\n<p>Golden ratio is such a vast topic that I can't write everything about it here, but I'll show you where I'm using it. Look closely at this blog post you're reading on my site. The ratio of width of screen to the width of reading area is <code>1.618</code>. Meaning I just set the reading area's width to <code>61.8%</code>(<code>1 / 1.618 = 0.618</code>).</p>\n<p>And nope, I'm not kidding.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">1 / Golden ratio = Golden Ratio - 1</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I love Math and try to put meaningful numbers in my designs. You don't have to be that. But there is tons of research about aesthetic implications of Golden Ratio. It's even taught in architechture. Heck, even Twitter used it in their previous design. I suggest you to take a look.</p>\n<p>Here's an article about <a href=\"https://uxplanet.org/golden-ratio-bring-balance-in-ui-design-765c954f0ff9\" target=\"_blank\" rel=\"noopener\">using Golden Ratio in web design</a>.</p>\n<h2 id=\"Use-animations\"><a class=\"heading-link\" href=\"#Use-animations\">#</a>Use animations</h2>\n<p>Use animations, like fade-in/out on page transitions, like I'm using here. In nature, nothing ever happens suddenly, there's always a transition.</p>\n<p>Transitions and animations can increase the emotional appeal of a site. They elevate the User Experience. If your site can make users feel good, their chances of coming back increases a lot. This is why companies like Google and Apple focus so much on good animations. This is why that amazing G-Mail animation exists.</p>\n<h2 id=\"Style-Scrollbars\"><a class=\"heading-link\" href=\"#Style-Scrollbars\">#</a>Style Scrollbars</h2>\n<p>Styling scrollbars is very easy. You just have to copy the code from StackOverflow and edit it(Cuz honestly, who can remember all those huge selectors <img class=\"emoji\" draggable=\"false\" alt=\"😏\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60f.svg\">).</p>\n<p>Scrollbars as-of-now are editable only in Webkit based browsers, meaning Chromium-based browsers(Chrome, Brave, Edgium, Opera) and Safari only. Firefox, IE and legacy Edge don't support styling of scrollbars.</p>\n<blockquote>\n<p>In my opinion, Firefox is not an issue. Their scrollbars look dope as hell <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f60e.svg\"></p>\n</blockquote>\n<p>Scrollbars occupy very little real-estate on a page, but when done correctly, can take the look, authenticity and integrity of your site to the next level. A well designed site with default scrollbars just don't do it for anyone, whereas those slick curved transparent scrollbars just do it for everyone.</p>\n<h2 id=\"Use-what-is-good-for-you\"><a class=\"heading-link\" href=\"#Use-what-is-good-for-you\">#</a>Use what is good for you</h2>\n<p>Fixed top-bars have been the most popular mode of navigation on Desktops since the inception of web itself. However in my opinion, a site with a text-heavy page would benefit more from <em>not-having</em> a top bar.</p>\n<p>Lemme explain. When you're reading, you're scrolling vertically. Desktops are wider than they're tall. So our minds sees it as contracted. Top bars reduces the amount of readable space even further, contracting it even further. And some sites have very big nav bars, which reduces readable space considerably.</p>\n<p>This make our subconscious mind relate that site with closeness and suffocation. No one likes small and suffocated spaces.</p>\n<p>Rather, use a sidebar. And a narrow one if possible. Like this blog you're reading.</p>\n<blockquote>\n<p>If you're reading this right now, you'll notice that this blog <strong>does not</strong> have a sidebar, rather a narrow topbar. I've moved over from sidebar to topbar, simply because the topbar looks better for my own blog and allows the theme switcher to be placed there too.</p>\n<p>That doesn't mean a sidebar isn't a good UI pattern. It's still very good, for it provides users with more area to read. However a narrow and undistracting top bar isn't a bad choice either</p>\n</blockquote>\n<p class=\"series-links\"></p><blockquote>\n      <p>How I created my personal site series:</p>\n      <p>\n        <a> Part 1 - Tech Stack &amp; Design (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-2\">Part 2 - Blogging with Markdown</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/how-i-created-personal-site-part-3\">Part 3 - Image Optimization Automation with Incremental builds</a><br>\n      </p>\n    </blockquote><p></p>\n",
    "id": "how-i-created-personal-site-part-1",
    "reading_time": 4.94,
    "toc": [
      {
        "indent": 0,
        "id": "Why",
        "title": "Why",
        "length": 3
      },
      {
        "indent": 0,
        "id": "Requirements",
        "title": "Requirements",
        "length": 12
      },
      {
        "indent": 1,
        "id": "Looks-good.",
        "title": "Looks good.",
        "length": 11
      },
      {
        "indent": 1,
        "id": "Blazing-Fast",
        "title": "Blazing Fast",
        "length": 12
      },
      {
        "indent": 1,
        "id": "Prerendered",
        "title": "Prerendered",
        "length": 11
      },
      {
        "indent": 1,
        "id": "PWA",
        "title": "PWA",
        "length": 3
      },
      {
        "indent": 0,
        "id": "Tech-Stack",
        "title": "Tech Stack",
        "length": 10
      },
      {
        "indent": 1,
        "id": "Why-not-GatsbyNext-with-React",
        "title": "Why not Gatsby/Next with React",
        "length": 30
      },
      {
        "indent": 0,
        "id": "Design-Choices",
        "title": "Design Choices",
        "length": 14
      },
      {
        "indent": 1,
        "id": "Color-Palette",
        "title": "Color Palette",
        "length": 13
      },
      {
        "indent": 1,
        "id": "Fonts",
        "title": "Fonts",
        "length": 5
      },
      {
        "indent": 0,
        "id": "Finally-designing-site",
        "title": "Finally designing site",
        "length": 22
      },
      {
        "indent": 1,
        "id": "Keep-it-minimalistic",
        "title": "Keep it minimalistic",
        "length": 20
      },
      {
        "indent": 1,
        "id": "Use-the-golden-ratio",
        "title": "Use the golden ratio",
        "length": 20
      },
      {
        "indent": 1,
        "id": "Use-animations",
        "title": "Use animations",
        "length": 14
      },
      {
        "indent": 1,
        "id": "Style-Scrollbars",
        "title": "Style Scrollbars",
        "length": 16
      },
      {
        "indent": 1,
        "id": "Use-what-is-good-for-you",
        "title": "Use what is good for you",
        "length": 24
      }
    ],
    "series": "How I created my personal site",
    "seriesIndex": 1
  },
  "link-noopener": {
    "cover_image": "media/link-fence.jpg",
    "title": "Safeguarding target=_blank links",
    "date": "2020-06-09T03:11:00.000Z",
    "description": "Do you know adding a link with target=_blank has the potential of crashing your page and is very insecure? Find out how and its prevention.",
    "body": "<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/link-fence/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/link-fence/small.jpg\">\n      <img alt=\"\" data-src=\"../media/link-fence/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>I'm sure you have added <code>&lt;a href=\"...\" target=\"_blank\"&gt;</code> to your website before or at least know about it. Well, do you know that it has a potential of crashing your site and even have your user robbed?</p>\n<p>Just kidding. I exaggerated a bit there. But seriously, this is a security issue that can be exploited. And it really affects performance, too.</p>\n<p>When you click a link with <code>target=\"_blank\"</code>, the link opens up in new tab. As usual, nothing much happens. But under the hood, <mark>some of the most important properties</mark> of your page's <code>window</code> object get passed to the <strong>page that is going to open</strong> in the <code>window.opener</code> property.</p>\n<p>One of these properties is the <code>location</code> prop.</p>\n<p>With the <code>window.opener</code> property, the new page can redirect the page from which it was opened to some other page. An e-banking site <code>icici.com</code> can be redirected to <code>1c1c1.com</code>, and the user will almost always miss this transition. Watch this video I have here to get a feel.</p>\n<video controls=\"\">\n  <source src=\"/media/link-noopener.mp4\" type=\"video/mp4\">\n</video>\n<p>A bit scary, huh?</p>\n<p>And there is also the issue of <mark>performance</mark>. The page that opens up runs on the same process as your page, meaning that both pages can become slow and laggy, just because of the other page. Don't link Youtube like this.</p>\n<h1 id=\"Solution\"><a class=\"heading-link\" href=\"#Solution\">#</a>Solution</h1>\n<p>Just add this little attribute to your link:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">rel=\"noopener\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Yup, this little attribute solves all of the above problems. An example of this would be:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">a</span><span style=\"color:#C792EA\"> href</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">https://twitter.com/puruvjdev</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> target</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">_blank</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> rel</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">noopener</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">&gt;&lt;/</span><span style=\"color:#F07178\">a</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is a small measure, but it can pay off really well. Every external link on this blog, for example, has this attribute to it. Check it out if you want to.</p>\n<p><a href=\"https://web.dev/external-anchors-use-rel-noopener/\" target=\"_blank\" rel=\"noopener\">Read more about it here</a></p>\n<p><em>That's it for today. Hope you liked the article. Ping me on Twitter if you have any problems or simply leave a review. Link is in the footer.</em></p>\n",
    "id": "link-noopener",
    "reading_time": 0.9525,
    "toc": [
      {
        "indent": 0,
        "id": "Solution",
        "title": "Solution",
        "length": 8
      }
    ],
    "seriesIndex": 0
  },
  "google-fonts-prefetch": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "Performantly loading Google Fonts based on Data Saver",
    "date": "2020-06-05T05:00:00.000Z",
    "description": "Efficiently and Asynchronously load Google Fonts based on Data Saver mode",
    "body": "<p>You. Yes you, who is loading a 50-100kbs of fonts on your site, drop them. Use Comic Sans instead.</p>\n<p>Just Kidding. Use as many fonts as you need. I am myself loading 60kb of fonts on this very blog page, just a little more efficiently than the default approach.</p>\n<h1 id=\"Problem\"><a class=\"heading-link\" href=\"#Problem\">#</a>Problem</h1>\n<p>Using custom fonts isn't bad. They make a bold brand statement. Imagine Google's logo without its beautiful geometric font or Medium without its classic font.</p>\n<p>Nowadays, advice like <mark>Don't use fonts</mark> is just impractical. Sure, <mark>Use less fonts</mark> is a good, but the prebuilt system fonts are just hideous(Looking at you, Ariel) and reading content in those is just not as appealing as it was a decade ago.</p>\n<p>But, if you look at stats, the average website uses about <mark> 50 - 70 KiloBytes</mark> of fonts nowadays. For scale, this blog you're reading, without images, is a total of 78KB, out of which the fonts take up 60kb. We are using way too much fonts nowadays, but it can't really be helped.</p>\n<p>So we have to figure out ways to not let the loading time of fonts get in the way of User experience, while at the same time, respecting the user's data plan. In US, 60KB is basically dust, whereas in countries like Nigeria and India, 60KB can be <strong>real</strong> money.</p>\n<h1 id=\"Solution\"><a class=\"heading-link\" href=\"#Solution\">#</a>Solution</h1>\n<p>We are going to use the amazing resource hint tag.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">link</span><span style=\"color:#C792EA\"> rel</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">prefetch</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> href</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">URL</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This tag simply loads the given URL and stores it in cache/memory until it is actually used. This loading happens asynchronously and doesn't delay the page's loading.</p>\n<p>In simple terms adding this tag to a page will not make it any slower than before.</p>\n<p>The important bit here:</p>\n<blockquote>\n<p>If the browser's data saver is on, this tag will be ignored, thus saving that additional request.</p>\n</blockquote>\n<p><a href=\"https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf\" target=\"_blank\" rel=\"noopener\">Read more about Resource Hints</a></p>\n<p>Let's say that our fonts' URL is:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">https://fonts.googleapis.com/css?family=Comfortaa|Fira+Code|Quicksand&amp;display=swap</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Instead of loading them the standard way</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">link</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  rel</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">stylesheet</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  href</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">https://fonts.googleapis.com/css?family=Comfortaa|Fira+Code|Quicksand&amp;display=swap</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We do it like this</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">link</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  rel</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">prefetch</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  href</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">https://fonts.googleapis.com/css?family=Comfortaa|Fira+Code|Quicksand&amp;display=swap</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  as</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">style</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  onload</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"this.</span><span style=\"color:#BABED8\">onload</span><span style=\"color:#89DDFF\">=null;this.</span><span style=\"color:#BABED8\">rel</span><span style=\"color:#89DDFF\">='</span><span style=\"color:#C3E88D\">stylesheet</span><span style=\"color:#89DDFF\">'\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  onerror</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"this.</span><span style=\"color:#BABED8\">onerror</span><span style=\"color:#89DDFF\">=null;this.</span><span style=\"color:#BABED8\">rel</span><span style=\"color:#89DDFF\">='</span><span style=\"color:#C3E88D\">stylesheet</span><span style=\"color:#89DDFF\">'\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This code above is doing multiple good things at once. The <code>onload</code> will fire when the resource has fully loaded, and replace the <code>rel=prefetch</code> with <code>rel=stylesheet</code>, making the effects of the fonts active.</p>\n<p>But another thing is happening here.</p>\n<blockquote>\n<p>If somehow, due to poor connectivity, the request fails, the <code>onerror</code> will try <strong>again</strong> to load the resource. This solution kills 2 birds with one bullet(proverbially only, off course)</p>\n</blockquote>\n<h1 id=\"Downsides\"><a class=\"heading-link\" href=\"#Downsides\">#</a>Downsides</h1>\n<ul>\n<li>Doesn't load the fonts if old browser or (at the time of writing) latest Safari.</li>\n<li>Slightly degrades the experience for data saver users, but honestly, people are on a site because of the content primarily. Besides, if they have data saver on, this means their data speeds are very slow and data plans quite expensive. They will thank you for making a fast loading site.</li>\n</ul>\n<p><em>That's it for today. Hope you liked the article. Ping me on Twitter if you have any problems or simply leave a review. Link is in the footer.</em></p>\n",
    "id": "google-fonts-prefetch",
    "reading_time": 1.5625,
    "toc": [
      {
        "indent": 0,
        "id": "Problem",
        "title": "Problem",
        "length": 7
      },
      {
        "indent": 0,
        "id": "Solution",
        "title": "Solution",
        "length": 8
      },
      {
        "indent": 0,
        "id": "Downsides",
        "title": "Downsides",
        "length": 9
      }
    ],
    "seriesIndex": 0
  },
  "web-workers-intro-basic-usage": {
    "cover_image": "media/road-grey-asphalt.jpg",
    "title": "Web Workers: Intro and Basic Usage",
    "date": "2020-06-04T20:30:00.000Z",
    "description": "Have you ever heard this term \"Web Workers\" mentioned somewhere and wondered what the hell is this new thing? let me introduce you to this great tech.",
    "body": "<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 66.66666666666666%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/road-grey-asphalt/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/road-grey-asphalt/small.jpg\">\n      <img alt=\"\" data-src=\"../media/road-grey-asphalt/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>What are Web Workers, you might ask. The technical definition is this:</p>\n<blockquote>\n<p>Web Workers are a simple means for web content to run scripts in background threads</p>\n<p>~ <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>Cool. But what does that exactly mean? Lemme explain using an example of roads and cars.</p>\n<p>Javascript is, by nature, a single threaded language. That means every process, from handling button clicks to loading an image happens in a single channel.</p>\n<p>Think of it like this. Imagine the JS process is a single lane road, and all of its processes are cars. Let's take 2 cars, one a very fast Ferrari, and other a beat up 20 year old Toyota. The Ferrari can easily blaze through at the speed of 150kmph, whereas the safe zone for the Toyota is 40kmph.</p>\n<p>If the Ferrari is behind the Toyota, it can't run up to its full speed.</p>\n<p>That is, if a very heavy process is running, it may block up other resources. They won't necessarily stop, just become slow and unresponsive.</p>\n<p>You would have experienced it sometime, when you go to a website, click a button, and it does something so heavy, the scrolling just stops temporarily, the cursor may stop moving around for a few seconds.</p>\n<p>So how do we prevent such situations? Is there a way to have the Ferrari go faster? Well there is.</p>\n<p>We'll just create another lane. The Ferrari can go into that lane, and just blaze through the road.</p>\n<p>Web Workers allow us to create that lane, or in this context, another thread.</p>\n<blockquote>\n<p>Using a Web Worker to create another thread enables us to have multiple threads. This process is called Multithreading. Here is a <a href=\"https://en.wikipedia.org/wiki/Multithreading_(computer_architecture)\" target=\"_blank\" rel=\"noopener\"><strike>Boring</strike> Technical Definition</a>.</p>\n</blockquote>\n<h1 id=\"How-to-use-them\"><a class=\"heading-link\" href=\"#How-to-use-them\">#</a>How to use them</h1>\n<p>Using web workers is quite simple. Let's create a <code>index.js</code> file. This is where we'll initialize our worker.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// index.js</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> worker </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> new</span><span style=\"color:#82AAFF\"> Worker</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">worker.js</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is the bare-bones code for initializing the worker. Let's create the <code>worker.js</code></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// worker.js</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Let's keep our worker file empty for now.</p>\n<p>Add this code to <code>index.js</code></p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">worker</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">postMessage</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">Hello</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The <code>postMessage</code> method simply passes in a value to our web worker. Now let's recieve that value in our worker file.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#676E95;font-style:italic\">// worker.js</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">self</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">onmessage</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BABED8;font-style:italic\">e</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C792EA\"> =&gt;</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">  const</span><span style=\"color:#BABED8\"> message</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BABED8\"> e</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">data</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BABED8\">  console</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#82AAFF\">log</span><span style=\"color:#F07178\">(</span><span style=\"color:#BABED8\">message</span><span style=\"color:#F07178\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>e</code> is here the event argument passed by the <code>self.onmessage</code>.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C792EA\">const</span><span style=\"color:#BABED8\"> message </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BABED8\"> e</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#BABED8\">data</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we are accessing the data we passed to the web worker using <code>worker.postMessage</code> method.</p>\n<p>And surely, the output comes out in the console.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">&gt; Hello</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>There is no <code>window</code> global object in a Web Worker. Everything is available under <code>self</code>.</p>\n</blockquote>\n<p>That's it.</p>\n<h1 id=\"What-values-can-I-pass-into-a-worker\"><a class=\"heading-link\" href=\"#What-values-can-I-pass-into-a-worker\">#</a>What values can I pass into a worker?</h1>\n<p>Any JSON Serializable value, like</p>\n<ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code>,</li>\n<li><code>Object</code> (without any methods)</li>\n<li><code>Arrays</code></li>\n</ul>\n<p>What you <strong>can't</strong> pass:</p>\n<ul>\n<li><code>Function</code></li>\n<li><code>Class</code></li>\n</ul>\n<p>Though there are amazing libraries like <a href=\"https://davidea.st/articles/comlink-simple-web-worker\" target=\"_blank\" rel=\"noopener\">Comlink</a> that allows you to pass any value to a web worker. Check it out!</p>\n<p>This is it for today! Ping me on Twitter if you have any problems or simply leave a review. Link is in the footer.</p>\n<p>Thank you for reading.</p>\n",
    "id": "web-workers-intro-basic-usage",
    "reading_time": 1.665,
    "toc": [
      {
        "indent": 0,
        "id": "How-to-use-them",
        "title": "How to use them",
        "length": 15
      },
      {
        "indent": 0,
        "id": "What-values-can-I-pass-into-a-worker",
        "title": "What values can I pass into a worker?",
        "length": 37
      }
    ],
    "seriesIndex": 0
  },
  "stencil-router-events": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "StencilJS Route Change events - Without any dependencies",
    "date": "2020-06-02T20:16:00.000Z",
    "description": "How to detect route changes in StencilJS Router using the core StencilJS APIs. No dependencies.",
    "body": "<p>Hey Stencil user! Are you using the official <a href=\"https://github.com/ionic-team/stencil-router/wiki\" target=\"_blank\" rel=\"noopener\">StencilJS Router</a> and can't find how to detect route change events? Don't worry, my friend! You will find all the answers here.</p>\n<p>So, is there an <code>onRouteChange</code> event somewhere? Or something like <code>router.subscribe</code>?</p>\n<p>Nope. Its much simpler. Much much simpler, but for some reason, its not documented in the official Wiki (As of the time of writing), resulting in people using the <a href=\"https://ionicframework.com/docs/api/router\" target=\"_blank\" rel=\"noopener\"><code>ion-router</code></a> instead, where everything is very very well documented.</p>\n<p>I myself had to port an application from Stencil Router to Ion router just because of this very reason, and it was a total pain.</p>\n<p>But after some searching and experimenting, I figured it out (No not time travel, I ain't Tony Stark). And it was staring me in the face. It was that simple. Its built right into the very core of Stencil's architechture.</p>\n<h1 id=\"Solution\"><a class=\"heading-link\" href=\"#Solution\">#</a>Solution</h1>\n<p>So here's your typical Stencil component.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> Component</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> Prop</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> h</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">@stencil/core</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#82AAFF\">Component</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  tag</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">my-first-component</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> class</span><span style=\"color:#FFCB6B\"> MyComponent</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  @</span><span style=\"color:#82AAFF\">Prop</span><span style=\"color:#BABED8\">() </span><span style=\"color:#F07178\">name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F07178\">  render</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#F07178\">p</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#BABED8\">My name is </span><span style=\"color:#89DDFF\">{this.</span><span style=\"color:#BABED8\">name</span><span style=\"color:#89DDFF\">}&lt;/</span><span style=\"color:#F07178\">p</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This becomes</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> Component</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> Prop</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> h</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> Watch</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">@stencil/core</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> LocationSegments</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> injectHistory</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">@stencil/router</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#82AAFF\">Component</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  tag</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">my-first-component</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> class</span><span style=\"color:#FFCB6B\"> MyComponent</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  @</span><span style=\"color:#82AAFF\">Prop</span><span style=\"color:#BABED8\">() </span><span style=\"color:#F07178\">name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">   * Remember, this should be `location only`</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">   */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  @</span><span style=\"color:#82AAFF\">Prop</span><span style=\"color:#BABED8\">() </span><span style=\"color:#F07178\">location</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> LocationSegments</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">   * Now watch for any changes to the location property</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">   */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  @</span><span style=\"color:#82AAFF\">Watch</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">location</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">) </span><span style=\"color:#F07178\">onRouteChange</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">newRoute</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> oldRoute</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Do some epic shit</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Like changing document title or</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Route animations. Its your choice.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F07178\">  render</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#F07178\">p</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#BABED8\">My name is </span><span style=\"color:#89DDFF\">{this.</span><span style=\"color:#BABED8\">name</span><span style=\"color:#89DDFF\">}&lt;/</span><span style=\"color:#F07178\">p</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><strong>STOP!! It will still not work.</strong></p>\n<p>Yup this code will still not work. Let me explain why:</p>\n<p>The important bit here is the <code>location</code> prop. Think about it. Its a <strong>Prop</strong>. You pass a value to it. But here, nothing really is passing any value to our component here. Stencil certainly ain't.</p>\n<p>So, the solution is to have <em>something</em> pass a value to the <code>location</code> prop. Notice the <code>injectHistory</code> method we have imported but not used anywhere. Now's the time to use it. Just add this line at the very end of your file</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#82AAFF\">injectHistory</span><span style=\"color:#BABED8\">(MyComponent)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>MyComponent</code> is the name of the class declared above.</p>\n<p>So the final code becomes:</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> Component</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> Prop</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> h</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> Watch</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">@stencil/core</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> LocationSegments</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> injectHistory</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">@stencil/router</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#82AAFF\">Component</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  tag</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">my-first-component</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> class</span><span style=\"color:#FFCB6B\"> MyComponent</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  @</span><span style=\"color:#82AAFF\">Prop</span><span style=\"color:#BABED8\">() </span><span style=\"color:#F07178\">name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> string</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">   * Remember, this should be `location only`</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">   */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  @</span><span style=\"color:#82AAFF\">Prop</span><span style=\"color:#BABED8\">() </span><span style=\"color:#F07178\">location</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FFCB6B\"> LocationSegments</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">  /**</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">   * Now watch for any changes to the location property</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">   */</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  @</span><span style=\"color:#82AAFF\">Watch</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">location</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">) </span><span style=\"color:#F07178\">onRouteChange</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BABED8;font-style:italic\">newRoute</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8;font-style:italic\"> oldRoute</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Do some epic shit</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Like changing document title or</span></span>\n<span class=\"line\"><span style=\"color:#676E95;font-style:italic\">    // Route animations. Its your choice.</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F07178\">  render</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#89DDFF\"> &lt;</span><span style=\"color:#F07178\">p</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#BABED8\">My name is </span><span style=\"color:#89DDFF\">{this.</span><span style=\"color:#BABED8\">name</span><span style=\"color:#89DDFF\">}&lt;/</span><span style=\"color:#F07178\">p</span><span style=\"color:#89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#82AAFF\">injectHistory</span><span style=\"color:#BABED8\">(MyComponent)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here. Hope it helps. If you still run into issues, just ping me on Twitter. The link is in the footer.</p>\n<p>Goodbye and Enjoy!</p>\n",
    "id": "stencil-router-events",
    "reading_time": 2.195,
    "toc": [
      {
        "indent": 0,
        "id": "Solution",
        "title": "Solution",
        "length": 8
      }
    ],
    "seriesIndex": 0
  },
  "pitfalls-stencil-helmet-prerendering": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "Pitfalls when using Stencil Helmet during Prerendering",
    "date": "2020-06-01T20:54:00.000Z",
    "description": "Stencil Helmet can break the whole app really bad on some occasions, some so random that you might never find out why",
    "body": "<p>I assume that if you're here, you already know a little about <a href=\"https://stenciljs.com\" target=\"_blank\" rel=\"noopener\">StencilJS</a>, if not, check out this super awesome framework.</p>\n<h1 id=\"Back-story\"><a class=\"heading-link\" href=\"#Back-story\">#</a>Back story</h1>\n<p>When I was building this blog, I was trying to use <a href=\"https://www.npmjs.com/package/@stencil/helmet\" target=\"_blank\" rel=\"noopener\">Stencil Helmet</a> to dynamically add some tags to the <code>&lt;head&gt;</code> tag, and these dynamic tags would show up in prerendered pages. You can even confirm their existence right now, by pressing <code>Ctrl+U</code> key combo or by manually typing <code>view-source:</code> behind the actual URL.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#BABED8\">view-source:https://puruvjdev.now.sh</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So, what happened was, I made some changes in my code, and my application stopped prerendering. Just like that. <strong>It wasn't prerendering</strong>.</p>\n<p>This wasn't acceptable. Prerendering is absolutely necessary to make a fast and SEO friendly site.</p>\n<p>So I dug deep into my git commits, and BAM! There was the culprit, hiding right in the <strong><code>index.html</code></strong> file on the 3rd line. The glorious.....</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF\">&lt;</span><span style=\"color:#F07178\">title</span><span style=\"color:#89DDFF\">&gt;</span><span style=\"color:#BABED8\">Something</span><span style=\"color:#89DDFF\">&lt;/</span><span style=\"color:#F07178\">title</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or rather, the absence of it. You see, I had deleted the <code>title</code> tag, so I could handle dynamic title management in my components.</p>\n<h1 id=\"The-solution\"><a class=\"heading-link\" href=\"#The-solution\">#</a>The solution</h1>\n<p>Always keep the <code>title</code> tag in your <code>index.html</code>.</p>\n<p>I just added in the <code>title</code> tag and everything started working.</p>\n<p>Hope you got something out of this post.</p>\n<p>Signing off!</p>\n",
    "id": "pitfalls-stencil-helmet-prerendering",
    "reading_time": 0.5775,
    "toc": [
      {
        "indent": 0,
        "id": "Back-story",
        "title": "Back story",
        "length": 10
      },
      {
        "indent": 0,
        "id": "The-solution",
        "title": "The solution",
        "length": 12
      }
    ],
    "seriesIndex": 0
  },
  "my-first-blog": {
    "cover_image": "../media/blog-social-intro.png",
    "title": "My First Blog post",
    "date": "2020-05-30T18:30:00.000Z",
    "description": "My very first blog post on my very first functional site",
    "body": "<p>Hi I am Puru. This is my very first blog post. THE VERY FIRST.</p>\n<p>I will be writing all kinds of technical stuff here. Primarily to increase my own understanding of concepts(Looking at you, Scope and Hoisting), for stuff I found on 40<sup>th</sup> page on google but could not find it again. I will also write a post about how I made this super fast blog using StencilJS's (The coolest framework you've never heard of) Static site generation to create a fast and SEO friendly blog.</p>\n<p>My writing and grammar is quite rusty at present, but no issues. I'll be improving it day by day by posting here something.</p>\n<p><img src=\"\" alt=\"\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/dumbledore-pretty-hard/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/dumbledore-pretty-hard.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Wait Wait Wait. Let me check if my code highlighting is working.</p>\n<pre class=\"shiki material-theme-palenight\" style=\"background-color:#292D3E;color:#babed8\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">import</span><span style=\"color:#89DDFF\"> {</span><span style=\"color:#BABED8\"> Component</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BABED8\"> h</span><span style=\"color:#89DDFF\"> }</span><span style=\"color:#89DDFF;font-style:italic\"> from</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">@stencil/core</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#82AAFF\">Component</span><span style=\"color:#BABED8\">(</span><span style=\"color:#89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  tag</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">app-root</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  styleUrl</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">app-root.scss</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  scoped</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9CAC\"> true</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span><span style=\"color:#BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">export</span><span style=\"color:#C792EA\"> class</span><span style=\"color:#FFCB6B\"> AppRoot</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">  render</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF;font-style:italic\">    return</span><span style=\"color:#F07178\"> [</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      &lt;</span><span style=\"color:#FFCB6B\">app-nav</span><span style=\"color:#89DDFF\"> /&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      &lt;</span><span style=\"color:#F07178\">main</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        &lt;</span><span style=\"color:#FFCB6B\">stencil-router</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          &lt;</span><span style=\"color:#FFCB6B\">stencil-route-switch</span><span style=\"color:#C792EA\"> scrollTopOffset</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#F78C6C\">0</span><span style=\"color:#89DDFF\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">            &lt;</span><span style=\"color:#FFCB6B\">stencil-route</span><span style=\"color:#C792EA\"> url</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">/</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> component</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">app-home</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> exact</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#FF9CAC\">true</span><span style=\"color:#89DDFF\">} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">            &lt;</span><span style=\"color:#FFCB6B\">stencil-route</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">              url</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#BABED8\">[</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">/blog</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#C3E88D\">/blog/</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#BABED8\">]</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">              component</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">blogs-overview</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C792EA\">              exact</span><span style=\"color:#89DDFF\">={</span><span style=\"color:#FF9CAC\">true</span><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">            /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">            &lt;</span><span style=\"color:#FFCB6B\">stencil-route</span><span style=\"color:#C792EA\"> url</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">/blog/:id</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C792EA\"> component</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C3E88D\">blog-page</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">          &lt;/</span><span style=\"color:#FFCB6B\">stencil-route-switch</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        &lt;/</span><span style=\"color:#FFCB6B\">stencil-router</span><span style=\"color:#89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      &lt;/</span><span style=\"color:#F07178\">main</span><span style=\"color:#89DDFF\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#F07178\">    ]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Signing off!</p>\n",
    "id": "my-first-blog",
    "reading_time": 0.96,
    "toc": [],
    "seriesIndex": 0
  }
} as Record<string, import('../../../scripts/types').BlogData>;